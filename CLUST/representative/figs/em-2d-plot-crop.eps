%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: em-2d-plot-crop.pdf
%%Creator: Adobe Acrobat 8.0
%%For: zaki
%%CreationDate: 1/3/10, 6:29:10 PM
%%BoundingBox: 0 0 340 540
%%HiResBoundingBox: 0 0 339.1354 539.5603
%%CropBox: 0 0 339.1354 539.5603
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 3938 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c321 44.398116, Tue Aug 04 2009 14:24:30">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 8.70"
   xap:ModifyDate="2010-01-03T18:28:59-05:00"
   xap:CreateDate="2010-01-03T18:25:41-05:00"
   xap:CreatorTool="dvips(k) 5.98 Copyright 2009 Radical Eye Software"
   xap:MetadataDate="2010-01-03T18:28:59-05:00"
   xapMM:DocumentID="db406f4b-30db-11ea-0000-d3929962eaf5"
   xapMM:InstanceID="uuid:8899e34a-2275-2149-a877-b0dd157bbd61"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">em-2d-plot.dvi</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -539.56 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-05 0 mo
1.52588e-05 539.56 li
339.135 539.56 li
339.135 0 li
cp
clp
[1 0 0 1 -142.237 0 ]ct
185.606 77.9275 mo
180.455 81.0005 li
186.388 81.8855 li
183.78 80.3445 li
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
f
0.672478 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
379.3 41.7355 mo
183.78 80.3444 li
@
418.515 102.213 mo
424.403 103.357 li
420.571 98.7425 li
421.487 101.629 li
f
315.978 39.1265 mo
421.487 101.629 li
@
337.129 32.1365 mo
335.112 26.4885 li
333.095 32.1365 li
335.112 29.8775 li
f
335.112 50.4614 mo
335.112 29.8774 li
@
true set_gvm
%ADOBeginSubsetFont: GZFBAA+HFBRMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /GZFBAA+HFBRMI10 def/FontInfo 6 dict dup begin/Notice (Part of the hfbright font family by Harald Harders, h.harders@tu-bs.de) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 88 /X putdup 89 /Y putdup 90 /Z putdef/FontBBox {0 -4 763 695} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/StdHW [53] def/StdVW [50] def/StemSnapH [20 40 53 61] def/StemSnapV [40 45 50 57 60 65 69 77 84] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/X <1C60D8A8C9B61BBF846508E571DA61AFFC408307A5A8EC79C91BDC0EA0DEE2CC89A0A40C0E57635F3B1056789B93C7E6FFF44205C2A3F040F1F3B19B32DD4379B8720894952F8B7B27DB202F2A33912911B338D72DA8C3E4CF23C2AA3F3C3559822B4A5CB85C8E4C3C1D0D309059403A84DC06973765C4CE04165599> |-/Y <1C60D8A8C9B7AA9152D85F19360405ECE90C2F770CF54022779E210CB93AAB8A4C15AD76A880F537D37534A6086EAF2088DE36516348584E78CB765A1F1C3737418C58BABD08EECC7363B2C8931BF7D0> |-/Z <1C60D8A8C9B630AC40104F70447BE4EB894291F1D55C244F0D743EB131CF6DFBC7C8437E6B7E8A1CE54DB4B8F977888FA325FC00793C38B1879D1F027F0C977CA15F0C6D4CF2A7A7DDA8A0CFA917985A0E51B995A70B> |-/.notdef <1C60D8A8C9B5EE31F4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/ZRVCKZ+HFBRMI10 /GZFBAA+HFBRMI10 findfont ct_VMDictPut/ZRVCKZ+HFBRMI10*1 [88{/.notdef}rp /X /Y /Z 165{/.notdef}rp]ZRVCKZ+HFBRMI10 nfZRVCKZ+HFBRMI10*1 [6.45581 0 0 -6.45581 0 0 ]msf173.013 83.2685 mo(X)sh426.626 105.625 mo(Y)sh332.682 24.2724 mo(Z)sh323.427 52.2654 mo
324.703 53.0204 li
@
312.38 54.4465 mo
313.656 55.2025 li
@
301.333 56.6274 mo
302.609 57.3835 li
@
290.286 58.8094 mo
291.562 59.5645 li
@
279.239 60.9904 mo
280.515 61.7465 li
@
268.193 63.1725 mo
269.468 63.9274 li
@
257.146 65.3535 mo
258.421 66.1085 li
@
246.099 67.5344 mo
247.374 68.2905 li
@
235.052 69.7165 mo
236.327 70.4714 li
@
224.005 71.8975 mo
225.28 72.6535 li
@
212.958 74.0785 mo
214.234 74.8344 li
@
201.911 76.2604 mo
203.187 77.0154 li
@
190.864 78.4415 mo
192.14 79.1974 li
@
345.521 47.9025 mo
346.797 48.6584 li
@
356.568 45.7205 mo
357.844 46.4765 li
@
367.615 43.5395 mo
368.891 44.2955 li
@
378.662 41.3585 mo
379.938 42.1135 li
@
342.595 54.0214 mo
340.385 54.4584 li
@
348.973 57.7995 mo
346.763 58.2365 li
@
355.35 61.5785 mo
353.141 62.0145 li
@
361.729 65.3564 mo
359.519 65.7924 li
@
368.106 69.1345 mo
365.897 69.5705 li
@
374.484 72.9135 mo
372.275 73.3495 li
@
380.862 76.6915 mo
378.653 77.1274 li
@
387.24 80.4694 mo
385.031 80.9055 li
@
393.618 84.2475 mo
391.409 84.6844 li
@
399.996 88.0255 mo
397.787 88.4625 li
@
406.374 91.8044 mo
404.165 92.2404 li
@
412.752 95.5825 mo
410.543 96.0185 li
@
419.13 99.3605 mo
416.921 99.7975 li
@
329.839 46.4655 mo
327.629 46.9015 li
@
323.461 42.6865 mo
321.252 43.1225 li
@
317.083 38.9084 mo
314.873 39.3444 li
@
334.474 50.0834 mo
335.75 50.8395 li
@
0.75 gry
%ADOBeginSubsetFont: ZRVCLA+ Initial
10 dict begin
ct_T3Defs
/FontType 3 def
/FontName /ZRVCLA+ def
/FontMatrix [0.001 0 0 0.001 0 0 ] def
/FontBBox [-0.5715 -0.7425 0.5715 0.7425 ] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /Bullet put
 def
/GlyphProcs 256 dict begin
/.notdef {250 0 0 0 250 0 setcachedevice}bind def
/Bullet {0 0 -500 -500 500 500 setcachedevice500 0 mo
500 276.141 276.141 500 0 500 cv
-276.141 500 -500 276.141 -500 0 cv
-500 -276.141 -276.141 -500 0 -500 cv
276.141 -500 500 -276.141 500 0 cv
false sop
f
}bind def
currentdict end def FontName currentdict end definefont pop
%ADOEndSubsetFont
/ZRVCLB+ /ZRVCLA+ findfont ct_VMDictPut/ZRVCLB+*1 [32{/.notdef}rp /Bullet 223{/.notdef}rp]ZRVCLB+ nfZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf290.151 94.2735 mo( )shfalse sop
0 gry
%ADOBeginSubsetFont: ZRVCLA+ AddGlyphs
systemdict begin ZRVCLB+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/BoldCircle {0 0 -500 -500 500 500 setcachedevice500 0 mo
500 276.141 276.141 500 0 500 cv
-276.141 500 -500 276.141 -500 0 cv
-500 -276.141 -276.141 -500 0 -500 cv
276.141 -500 500 -276.141 500 0 cv
cp
500 0 mo
400 0 li
400 220.91 220.91 400 0 400 cv
-220.91 400 -400 220.91 -400 0 cv
-400 -220.91 -220.91 -400 0 -400 cv
220.91 -400 400 -220.91 400 0 cv
false sop
ef
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/ZRVCLB+*1 [32{/.notdef}rp /Bullet /BoldCircle 222{/.notdef}rp]ZRVCLB+ nfZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf290.151 94.2735 mo(!)shfalse sop
0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf253.036 95.3765 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf253.036 95.3765 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf262.373 92.8075 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf262.373 92.8075 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf301.392 96.0215 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf301.392 96.0215 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf242.483 88.3755 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf242.483 88.3755 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf294.852 103.148 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf294.852 103.148 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf310.105 88.9085 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf310.105 88.9085 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf272.461 78.7835 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf272.461 78.7835 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.591 99.4335 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.591 99.4335 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf378.169 103.885 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf378.169 103.885 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf357.377 83.2955 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf357.377 83.2955 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf390.171 89.7035 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf390.171 89.7035 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf385.218 91.2845 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf385.218 91.2845 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf389.215 95.0495 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf389.215 95.0495 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf352.767 95.5675 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf352.767 95.5675 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf374.216 89.4955 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf374.216 89.4955 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf380.775 86.1635 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf380.775 86.1635 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf330.092 78.5285 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf330.092 78.5285 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf402.606 81.0595 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf402.606 81.0595 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf397.216 87.5025 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf397.216 87.5025 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf404.148 81.0895 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf404.148 81.0895 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf382.469 84.0605 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf382.469 84.0605 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf326.334 87.9795 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf326.334 87.9795 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.399 59.1615 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.399 59.1615 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf305.028 61.1055 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf305.028 61.1055 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf303.613 60.9865 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf303.613 60.9865 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf312.479 63.8605 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf312.479 63.8605 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf296.523 61.9355 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf296.523 61.9355 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.06 57.5225 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.06 57.5225 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf314.833 67.2985 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf314.833 67.2985 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf300.838 67.1805 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf300.838 67.1805 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf322.467 62.4075 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf322.467 62.4075 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf305.236 59.7755 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf305.236 59.7755 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf322.707 63.0285 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf322.707 63.0285 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf318.632 67.1785 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf318.632 67.1785 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf301.672 61.3495 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf301.672 61.3495 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf310.088 58.6925 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf310.088 58.6925 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf308.086 63.3545 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf308.086 63.3545 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf314.371 67.1835 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf314.371 67.1835 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf307.398 63.2215 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf307.398 63.2215 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf294.759 52.6945 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf294.759 52.6945 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf313.397 62.2405 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf313.397 62.2405 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf309.07 62.4205 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf309.07 62.4205 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf315.701 66.5305 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf315.701 66.5305 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf314.184 60.5785 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf314.184 60.5785 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf311.885 69.4005 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf311.885 69.4005 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf311.062 64.1025 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf311.062 64.1025 mo(!)sh0.75 gry
%ADOBeginSubsetFont: ZRVCLA+ AddGlyphs
systemdict begin ZRVCLB+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/SolidSquare {0 0 -450 -450 450 450 setcachedevice-450 -450 mo
450 -450 li
450 450 li
-450 450 li
cp
false sop
f
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/ZRVCLB+*1 [32{/.notdef}rp /Bullet /BoldCircle /SolidSquare 221{/.notdef}rp]ZRVCLB+ nfZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.077 81.0555 mo(")shfalse sop
0 gry
%ADOBeginSubsetFont: ZRVCLA+ AddGlyphs
systemdict begin ZRVCLB+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/BoldSquare {0 0 -450 -450 450 450 setcachedevice-450 450 mo
450 450 li
450 -450 li
-450 -450 li
cp
-351 351 mo
351 351 li
351 -351 li
-351 -351 li
false sop
ef
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/ZRVCLB+*1 [32{/.notdef}rp /Bullet /BoldCircle /SolidSquare /BoldSquare 220{/.notdef}rp]ZRVCLB+ nfZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.077 81.0555 mo(#)shfalse sop
0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf288.974 95.1775 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf288.974 95.1775 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf251.506 78.6485 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf251.506 78.6485 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.721 80.6505 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.721 80.6505 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf281.116 108.099 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf281.116 108.099 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf264.051 97.2695 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf264.051 97.2695 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.561 90.9005 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.561 90.9005 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf274.89 102.539 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf274.89 102.539 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf299.637 102.363 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf299.637 102.363 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf273.024 96.4095 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf273.024 96.4095 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf274.3 96.9905 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf274.3 96.9905 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf277.361 86.6615 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf277.361 86.6615 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf266.713 89.0465 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf266.713 89.0465 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf372.323 104.482 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf372.323 104.482 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf415.375 101.148 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf415.375 101.148 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf401.633 90.0375 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf401.633 90.0375 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf366.954 91.0595 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf366.954 91.0595 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf348.067 83.9475 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf348.067 83.9475 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf350.421 81.2065 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf350.421 81.2065 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf353.97 83.7515 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf353.97 83.7515 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf358.27 69.3935 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf358.27 69.3935 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf389.148 93.9675 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf389.148 93.9675 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf374.634 94.9665 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf374.634 94.9665 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf310.358 54.7915 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf310.358 54.7915 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf331.229 65.0175 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf331.229 65.0175 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf289.176 64.6765 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf289.176 64.6765 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf309.17 58.8305 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf309.17 58.8305 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf309.086 61.5555 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf309.086 61.5555 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf318.745 69.9955 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf318.745 69.9955 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf308.974 59.7645 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf308.974 59.7645 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf306.782 57.2755 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf306.782 57.2755 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf312.981 62.4055 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf312.981 62.4055 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf311.305 66.9135 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf311.305 66.9135 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf288.071 62.4915 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf288.071 62.4915 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf315.496 61.3405 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf315.496 61.3405 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf316.395 62.8725 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf316.395 62.8725 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf310.022 60.5485 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf310.022 60.5485 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf315.179 66.5795 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf315.179 66.5795 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf316.868 63.8275 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf316.868 63.8275 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf310.982 60.2905 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf310.982 60.2905 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf306.509 63.4225 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf306.509 63.4225 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf286.677 54.1995 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf286.677 54.1995 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf306.5 57.7485 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf306.5 57.7485 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf310.906 63.4825 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf310.906 63.4825 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf300.647 61.6525 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf300.647 61.6525 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf323.612 63.9425 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf323.612 63.9425 mo(#)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.909 57.0955 mo(")sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.909 57.0955 mo(#)sh0.75 gry
%ADOBeginSubsetFont: ZRVCLA+ AddGlyphs
systemdict begin ZRVCLB+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/SolidTriangle {0 0 -571.5 -330 571.5 660 setcachedevice0 660 mo
-571.5 -330 li
571.5 -330 li
false sop
f
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/ZRVCLB+*1 [32{/.notdef}rp /Bullet /BoldCircle /SolidSquare /BoldSquare /SolidTriangle 219{/.notdef}rp]ZRVCLB+ nfZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf271.734 77.2275 mo($)shfalse sop
0 gry
%ADOBeginSubsetFont: ZRVCLA+ AddGlyphs
systemdict begin ZRVCLB+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/BoldTriangle {0 0 -571.5 -330 571.5 660 setcachedevice0 660 mo
-571.5 -330 li
571.5 -330 li
cp
0 462 mo
-400.051 -231 li
400.051 -231 li
false sop
ef
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/ZRVCLB+*1 [32{/.notdef}rp /Bullet /BoldCircle /SolidSquare /BoldSquare /SolidTriangle /BoldTriangle 218{/.notdef}rp]ZRVCLB+ nfZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf271.734 77.2275 mo(%)shfalse sop
0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf307.852 95.4325 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf307.852 95.4325 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf278.012 107.667 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf278.012 107.667 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf271.764 93.6155 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf271.764 93.6155 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf311.169 99.4705 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf311.169 99.4705 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf273.07 87.4815 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf273.07 87.4815 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf265.382 90.7185 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf265.382 90.7185 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf250.578 96.1935 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf250.578 96.1935 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf305.115 98.8655 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf305.115 98.8655 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf253.919 101.529 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf253.919 101.529 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf267.687 92.5205 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf267.687 92.5205 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf360.792 78.4305 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf360.792 78.4305 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf372.763 90.1415 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf372.763 90.1415 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf403.726 89.7915 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf403.726 89.7915 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf393.146 85.3095 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf393.146 85.3095 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf365.041 84.6405 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf365.041 84.6405 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf378.551 75.6615 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf378.551 75.6615 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf401.893 69.9285 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf401.893 69.9285 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf339.239 88.7045 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf339.239 88.7045 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf361.131 81.3655 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf361.131 81.3655 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf376.736 92.6855 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf376.736 92.6855 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf355.606 82.1855 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf355.606 82.1855 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf372.287 82.9275 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf372.287 82.9275 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf402.512 91.5255 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf402.512 91.5255 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf366.159 87.1895 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf366.159 87.1895 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf361.04 85.2755 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf361.04 85.2755 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf389.175 77.9955 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf389.175 77.9955 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf372.29 85.2085 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf372.29 85.2085 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf389.784 84.4935 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf389.784 84.4935 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf299.598 59.7255 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf299.598 59.7255 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf313.168 58.5115 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf313.168 58.5115 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.787 64.1245 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.787 64.1245 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf310.098 57.1985 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf310.098 57.1985 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf307.775 61.5005 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf307.775 61.5005 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf313.63 55.8105 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf313.63 55.8105 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf299.589 66.4605 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf299.589 66.4605 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf313.058 55.2565 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf313.058 55.2565 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf302.609 63.0005 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf302.609 63.0005 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf312.06 67.2325 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf312.06 67.2325 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf312.299 67.5595 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf312.299 67.5595 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf308.548 61.3645 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf308.548 61.3645 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf311.398 62.1445 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf311.398 62.1445 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.149 58.2085 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.149 58.2085 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf312.309 71.0295 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf312.309 71.0295 mo(%)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.407 62.6855 mo($)sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.407 62.6855 mo(%)shZRVCLB+*1 [5.64882 0 0 -5.64882 0 0 ]msf323.05 76.0296 mo( !)[0 0 ]xsh314.75 76.2296 mo("#)[0 0 ]xsh327.75 78.7296 mo($%)[0 0 ]xsh0.11208 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
360.166 30.3065 mo
360.166 30.3065 li
362.717 31.7955 li
365.268 33.2814 li
367.82 34.7634 li
370.371 36.2404 li
372.922 37.7134 li
375.473 39.1815 li
378.024 40.6445 li
380.575 42.1035 li
383.127 43.5594 li
385.678 45.0114 li
388.229 46.4604 li
390.78 47.9094 li
393.331 49.3585 li
395.882 50.8094 li
398.434 52.2645 li
400.985 53.7245 li
403.536 55.1904 li
406.087 56.6664 li
408.638 58.1525 li
411.189 59.6484 li
413.741 61.1564 li
416.292 62.6774 li
418.843 64.2094 li
421.394 65.7524 li
423.945 67.3065 li
426.496 68.8685 li
429.048 70.4365 li
431.599 72.0114 li
434.15 73.5884 li
436.701 75.1674 li
439.252 76.7455 li
441.804 78.3215 li
444.355 79.8945 li
446.906 81.4634 li
449.457 83.0265 li
452.008 84.5844 li
454.559 86.1364 li
457.111 87.6835 li
459.662 89.2255 li
462.213 90.7614 li
355.471 31.1904 mo
355.471 31.1904 li
358.022 32.6694 li
360.573 34.1435 li
363.125 35.6115 li
365.676 37.0745 li
368.227 38.5295 li
370.778 39.9794 li
373.329 41.4214 li
375.88 42.8585 li
378.432 44.2905 li
380.983 45.7175 li
383.534 47.1415 li
386.085 48.5654 li
388.636 49.9894 li
391.188 51.4174 li
393.739 52.8495 li
396.29 54.2905 li
398.841 55.7415 li
401.392 57.2054 li
403.943 58.6835 li
406.495 60.1774 li
409.046 61.6865 li
411.597 63.2134 li
414.148 64.7565 li
416.699 66.3154 li
419.25 67.8875 li
421.802 69.4705 li
424.353 71.0645 li
426.904 72.6645 li
429.455 74.2685 li
432.006 75.8745 li
434.557 77.4794 li
437.109 79.0804 li
439.66 80.6774 li
442.211 82.2685 li
444.762 83.8525 li
447.313 85.4274 li
449.864 86.9955 li
452.416 88.5565 li
454.967 90.1085 li
457.518 91.6545 li
350.776 32.0574 mo
350.776 32.0574 li
353.327 33.5234 li
355.879 34.9824 li
358.43 36.4324 li
360.981 37.8735 li
363.532 39.3054 li
366.083 40.7285 li
368.634 42.1435 li
371.186 43.5495 li
373.737 44.9495 li
376.288 46.3434 li
378.839 47.7344 li
381.39 49.1235 li
383.941 50.5154 li
386.493 51.9114 li
389.044 53.3165 li
391.595 54.7335 li
394.146 56.1635 li
396.697 57.6125 li
399.248 59.0815 li
401.8 60.5715 li
404.351 62.0844 li
406.902 63.6205 li
409.453 65.1794 li
412.004 66.7585 li
414.555 68.3564 li
417.107 69.9705 li
419.658 71.5964 li
422.209 73.2314 li
424.76 74.8705 li
427.311 76.5125 li
429.862 78.1525 li
432.414 79.7885 li
434.965 81.4164 li
437.516 83.0364 li
440.067 84.6464 li
442.618 86.2455 li
445.17 87.8344 li
447.721 89.4114 li
450.272 90.9794 li
452.823 92.5375 li
346.081 32.9055 mo
346.081 32.9055 li
348.632 34.3535 li
351.183 35.7905 li
353.734 37.2155 li
356.286 38.6295 li
358.837 40.0305 li
361.388 41.4185 li
363.939 42.7955 li
366.491 44.1625 li
369.042 45.5185 li
371.593 46.8694 li
374.144 48.2155 li
376.695 49.5605 li
379.246 50.9094 li
381.798 52.2654 li
384.349 53.6345 li
386.9 55.0185 li
389.451 56.4245 li
392.002 57.8544 li
394.554 59.3124 li
397.105 60.8005 li
399.656 62.3195 li
402.207 63.8685 li
404.758 65.4495 li
407.309 67.0565 li
409.861 68.6884 li
412.412 70.3415 li
414.963 72.0114 li
417.514 73.6915 li
420.065 75.3795 li
422.616 77.0674 li
425.168 78.7535 li
427.719 80.4324 li
430.27 82.1025 li
432.821 83.7595 li
435.372 85.4035 li
437.923 87.0334 li
440.475 88.6475 li
443.026 90.2475 li
445.577 91.8344 li
448.128 93.4084 li
341.386 33.7294 mo
341.386 33.7294 li
343.937 35.1535 li
346.488 36.5624 li
349.039 37.9565 li
351.591 39.3334 li
354.142 40.6935 li
356.693 42.0364 li
359.244 43.3644 li
361.796 44.6774 li
364.347 45.9794 li
366.898 47.2734 li
369.449 48.5615 li
372 49.8505 li
374.552 51.1435 li
377.103 52.4495 li
379.654 53.7714 li
382.205 55.1174 li
384.756 56.4915 li
387.307 57.8995 li
389.859 59.3444 li
392.41 60.8295 li
394.961 62.3574 li
397.512 63.9265 li
400.063 65.5344 li
402.614 67.1804 li
405.166 68.8585 li
407.717 70.5634 li
410.268 72.2885 li
412.819 74.0275 li
415.37 75.7755 li
417.921 77.5245 li
420.473 79.2685 li
423.024 81.0035 li
425.575 82.7255 li
428.126 84.4304 li
430.677 86.1174 li
433.229 87.7844 li
435.78 89.4324 li
438.331 91.0615 li
440.882 92.6714 li
443.433 94.2654 li
336.691 34.5255 mo
336.691 34.5255 li
339.242 35.9194 li
341.793 37.2924 li
344.345 38.6445 li
346.896 39.9755 li
349.447 41.2834 li
351.998 42.5685 li
354.549 43.8344 li
357.1 45.0815 li
359.652 46.3124 li
362.203 47.5334 li
364.754 48.7495 li
367.305 49.9655 li
369.857 51.1915 li
372.408 52.4324 li
374.959 53.6974 li
377.51 54.9935 li
380.061 56.3295 li
382.612 57.7104 li
385.164 59.1425 li
387.715 60.6274 li
390.266 62.1674 li
392.817 63.7614 li
395.368 65.4084 li
397.92 67.1025 li
400.471 68.8384 li
403.022 70.6094 li
405.573 72.4064 li
408.124 74.2205 li
410.675 76.0435 li
413.227 77.8685 li
415.778 79.6855 li
418.329 81.4904 li
420.88 83.2775 li
423.431 85.0414 li
425.982 86.7824 li
428.534 88.4965 li
431.085 90.1844 li
433.636 91.8484 li
436.187 93.4885 li
438.738 95.1064 li
331.996 35.2914 mo
331.996 35.2914 li
334.547 36.6464 li
337.098 37.9755 li
339.65 39.2765 li
342.201 40.5485 li
344.752 41.7905 li
347.303 43.0045 li
349.854 44.1924 li
352.405 45.3564 li
354.957 46.5004 li
357.508 47.6315 li
360.059 48.7574 li
362.61 49.8854 li
365.161 51.0255 li
367.712 52.1884 li
370.264 53.3835 li
372.815 54.6215 li
375.366 55.9114 li
377.918 57.2614 li
380.469 58.6774 li
383.02 60.1635 li
385.571 61.7205 li
388.122 63.3495 li
390.673 65.0444 li
393.225 66.8005 li
395.776 68.6094 li
398.327 70.4614 li
400.878 72.3464 li
403.429 74.2535 li
405.98 76.1705 li
408.532 78.0875 li
411.083 79.9955 li
413.634 81.8845 li
416.185 83.7504 li
418.736 85.5875 li
421.288 87.3925 li
423.839 89.1645 li
426.39 90.9025 li
428.941 92.6074 li
431.492 94.2824 li
434.043 95.9294 li
327.301 36.0245 mo
327.301 36.0245 li
329.852 37.3334 li
332.404 38.6074 li
334.955 39.8464 li
337.506 41.0475 li
340.057 42.2104 li
342.608 43.3375 li
345.159 44.4304 li
347.711 45.4924 li
350.262 46.5314 li
352.813 47.5544 li
355.364 48.5715 li
357.915 49.5925 li
360.466 50.6315 li
363.018 51.6995 li
365.569 52.8115 li
368.12 53.9804 li
370.671 55.2165 li
373.223 56.5305 li
375.774 57.9294 li
378.325 59.4185 li
380.876 60.9995 li
383.427 62.6694 li
385.979 64.4245 li
388.53 66.2565 li
391.081 68.1545 li
393.632 70.1064 li
396.183 72.0995 li
398.734 74.1174 li
401.286 76.1475 li
403.837 78.1755 li
406.388 80.1904 li
408.939 82.1815 li
411.49 84.1415 li
414.041 86.0645 li
416.593 87.9465 li
419.144 89.7855 li
421.695 91.5815 li
424.246 93.3375 li
426.797 95.0544 li
429.348 96.7355 li
322.606 36.7245 mo
322.606 36.7245 li
325.157 37.9785 li
327.709 39.1895 li
330.26 40.3544 li
332.811 41.4714 li
335.362 42.5414 li
337.913 43.5645 li
340.464 44.5455 li
343.016 45.4885 li
345.567 46.4025 li
348.118 47.2975 li
350.669 48.1855 li
353.22 49.0815 li
355.771 50.0004 li
358.323 50.9594 li
360.874 51.9745 li
363.425 53.0615 li
365.976 54.2365 li
368.527 55.5095 li
371.079 56.8904 li
373.63 58.3854 li
376.181 59.9955 li
378.732 61.7175 li
381.284 63.5444 li
383.835 65.4675 li
386.386 67.4714 li
388.937 69.5414 li
391.488 71.6594 li
394.039 73.8094 li
396.591 75.9714 li
399.142 78.1295 li
401.693 80.2704 li
404.244 82.3804 li
406.795 84.4504 li
409.346 86.4725 li
411.898 88.4435 li
414.449 90.3615 li
417 92.2255 li
419.551 94.0385 li
422.102 95.8024 li
424.654 97.5245 li
317.911 37.3945 mo
317.911 37.3945 li
320.462 38.5864 li
323.014 39.7234 li
325.565 40.8035 li
328.116 41.8245 li
330.667 42.7864 li
333.218 43.6915 li
335.77 44.5435 li
338.321 45.3495 li
340.872 46.1194 li
343.423 46.8674 li
345.974 47.6085 li
348.525 48.3594 li
351.077 49.1425 li
353.628 49.9755 li
356.179 50.8804 li
358.73 51.8765 li
361.281 52.9814 li
363.832 54.2094 li
366.384 55.5724 li
368.935 57.0754 li
371.486 58.7205 li
374.037 60.5035 li
376.589 62.4155 li
379.14 64.4435 li
381.691 66.5705 li
384.242 68.7755 li
386.793 71.0395 li
389.345 73.3384 li
391.896 75.6525 li
394.447 77.9594 li
396.998 80.2424 li
399.549 82.4875 li
402.1 84.6815 li
404.652 86.8174 li
407.203 88.8884 li
409.754 90.8935 li
412.305 92.8344 li
414.856 94.7114 li
417.407 96.5305 li
419.959 98.2964 li
313.216 38.0395 mo
313.216 38.0395 li
315.768 39.1614 li
318.319 40.2175 li
320.87 41.2045 li
323.421 42.1185 li
325.972 42.9594 li
328.523 43.7314 li
331.075 44.4395 li
333.626 45.0925 li
336.177 45.7035 li
338.728 46.2864 li
341.279 46.8635 li
343.83 47.4554 li
346.382 48.0854 li
348.933 48.7795 li
351.484 49.5615 li
354.035 50.4565 li
356.586 51.4855 li
359.138 52.6655 li
361.689 54.0085 li
364.24 55.5225 li
366.791 57.2084 li
369.342 59.0605 li
371.893 61.0685 li
374.445 63.2145 li
376.996 65.4785 li
379.547 67.8364 li
382.098 70.2614 li
384.65 72.7275 li
387.201 75.2084 li
389.752 77.6804 li
392.303 80.1225 li
394.854 82.5154 li
397.405 84.8464 li
399.957 87.1064 li
402.508 89.2885 li
405.059 91.3915 li
407.61 93.4145 li
410.161 95.3635 li
412.712 97.2404 li
415.264 99.0544 li
308.521 38.6674 mo
308.521 38.6674 li
311.073 39.7155 li
313.624 40.6844 li
316.175 41.5695 li
318.726 42.3685 li
321.277 43.0804 li
323.829 43.7094 li
326.38 44.2625 li
328.931 44.7504 li
331.482 45.1874 li
334.033 45.5944 li
336.584 45.9935 li
339.136 46.4114 li
341.687 46.8774 li
344.238 47.4214 li
346.789 48.0724 li
349.34 48.8594 li
351.891 49.8065 li
354.443 50.9355 li
356.994 52.2585 li
359.545 53.7864 li
362.096 55.5175 li
364.647 57.4455 li
367.198 59.5565 li
369.75 61.8315 li
372.301 64.2444 li
374.852 66.7665 li
377.403 69.3665 li
379.954 72.0125 li
382.505 74.6745 li
385.057 77.3224 li
387.608 79.9335 li
390.159 82.4865 li
392.711 84.9645 li
395.262 87.3564 li
397.813 89.6574 li
400.364 91.8625 li
402.915 93.9755 li
405.466 95.9985 li
408.018 97.9384 li
410.569 99.8044 li
303.827 39.2905 mo
303.827 39.2905 li
306.378 40.2614 li
308.929 41.1404 li
311.48 41.9205 li
314.031 42.5995 li
316.582 43.1774 li
319.134 43.6584 li
321.685 44.0495 li
324.236 44.3654 li
326.787 44.6225 li
329.338 44.8444 li
331.889 45.0585 li
334.441 45.2955 li
336.992 45.5905 li
339.543 45.9775 li
342.094 46.4915 li
344.645 47.1664 li
347.196 48.0295 li
349.748 49.1044 li
352.299 50.4084 li
354.85 51.9495 li
357.401 53.7285 li
359.952 55.7365 li
362.504 57.9575 li
365.055 60.3674 li
367.606 62.9355 li
370.157 65.6285 li
372.708 68.4105 li
375.259 71.2435 li
377.811 74.0925 li
380.362 76.9255 li
382.913 79.7114 li
385.464 82.4294 li
388.015 85.0594 li
390.567 87.5884 li
393.118 90.0114 li
395.669 92.3234 li
398.22 94.5265 li
400.771 96.6274 li
403.323 98.6324 li
405.874 100.55 li
299.132 39.9205 mo
299.132 39.9205 li
301.683 40.8154 li
304.234 41.6054 li
306.785 42.2824 li
309.336 42.8425 li
311.888 43.2864 li
314.439 43.6194 li
316.99 43.8495 li
319.541 43.9924 li
322.092 44.0685 li
324.643 44.1054 li
327.195 44.1345 li
329.746 44.1904 li
332.297 44.3134 li
334.848 44.5424 li
337.399 44.9194 li
339.95 45.4804 li
342.502 46.2585 li
345.053 47.2805 li
347.604 48.5645 li
350.155 50.1205 li
352.706 51.9474 li
355.257 54.0364 li
357.809 56.3674 li
360.36 58.9114 li
362.911 61.6364 li
365.462 64.5015 li
368.013 67.4655 li
370.564 70.4855 li
373.116 73.5225 li
375.667 76.5385 li
378.218 79.5004 li
380.769 82.3815 li
383.32 85.1625 li
385.871 87.8285 li
388.423 90.3715 li
390.974 92.7895 li
393.525 95.0834 li
396.076 97.2604 li
398.628 99.3295 li
401.179 101.299 li
294.437 40.5734 mo
294.437 40.5734 li
296.988 41.3984 li
299.539 42.1035 li
302.09 42.6824 li
304.641 43.1304 li
307.193 43.4474 li
309.744 43.6384 li
312.295 43.7155 li
314.846 43.6935 li
317.397 43.5975 li
319.948 43.4575 li
322.5 43.3085 li
325.051 43.1904 li
327.602 43.1484 li
330.153 43.2265 li
332.704 43.4705 li
335.255 43.9225 li
337.807 44.6185 li
340.358 45.5895 li
342.909 46.8544 li
345.46 48.4235 li
348.011 50.2975 li
350.562 52.4625 li
353.114 54.8975 li
355.665 57.5715 li
358.216 60.4455 li
360.767 63.4745 li
363.318 66.6125 li
365.87 69.8115 li
368.421 73.0275 li
370.972 76.2175 li
373.523 79.3475 li
376.074 82.3845 li
378.625 85.3094 li
381.177 88.1054 li
383.728 90.7634 li
386.279 93.2805 li
388.83 95.6614 li
391.381 97.9105 li
393.932 100.038 li
396.484 102.058 li
289.742 41.2645 mo
289.742 41.2645 li
292.293 42.0265 li
294.844 42.6574 li
297.395 43.1495 li
299.946 43.4975 li
302.498 43.7015 li
305.049 43.7675 li
307.6 43.7054 li
310.151 43.5364 li
312.702 43.2844 li
315.254 42.9835 li
317.805 42.6735 li
320.356 42.3975 li
322.907 42.2054 li
325.458 42.1464 li
328.009 42.2695 li
330.561 42.6215 li
333.112 43.2424 li
335.663 44.1655 li
338.214 45.4114 li
340.765 46.9915 li
343.316 48.9055 li
345.868 51.1395 li
348.419 53.6694 li
350.97 56.4594 li
353.521 59.4675 li
356.072 62.6435 li
358.623 65.9384 li
361.175 69.2995 li
363.726 72.6765 li
366.277 76.0245 li
368.828 79.3044 li
371.379 82.4835 li
373.93 85.5364 li
376.482 88.4495 li
379.033 91.2104 li
381.584 93.8174 li
384.135 96.2755 li
386.686 98.5895 li
389.238 100.772 li
391.789 102.835 li
285.047 42.0074 mo
285.047 42.0074 li
287.598 42.7194 li
290.149 43.2905 li
292.7 43.7114 li
295.252 43.9775 li
297.803 44.0884 li
300.354 44.0495 li
302.905 43.8745 li
305.456 43.5815 li
308.007 43.2004 li
310.559 42.7654 li
313.11 42.3195 li
315.661 41.9114 li
318.212 41.5915 li
320.763 41.4155 li
323.314 41.4365 li
325.866 41.7025 li
328.417 42.2585 li
330.968 43.1384 li
333.519 44.3665 li
336.07 45.9545 li
338.621 47.9005 li
341.173 50.1915 li
343.724 52.7985 li
346.275 55.6844 li
348.826 58.8044 li
351.377 62.1044 li
353.929 65.5295 li
356.48 69.0255 li
359.031 72.5364 li
361.582 76.0165 li
364.133 79.4225 li
366.684 82.7184 li
369.236 85.8804 li
371.787 88.8904 li
374.338 91.7375 li
376.889 94.4205 li
379.44 96.9415 li
381.991 99.3105 li
384.543 101.538 li
387.094 103.638 li
280.352 42.8134 mo
280.352 42.8134 li
282.903 43.4904 li
285.454 44.0195 li
288.005 44.3904 li
290.557 44.5975 li
293.108 44.6415 li
295.659 44.5275 li
298.21 44.2675 li
300.761 43.8845 li
303.312 43.4074 li
305.864 42.8725 li
308.415 42.3245 li
310.966 41.8154 li
313.517 41.4005 li
316.068 41.1345 li
318.62 41.0754 li
321.171 41.2755 li
323.722 41.7795 li
326.273 42.6254 li
328.824 43.8375 li
331.375 45.4285 li
333.927 47.3975 li
336.478 49.7275 li
339.029 52.3904 li
341.58 55.3464 li
344.131 58.5485 li
346.682 61.9395 li
349.234 65.4614 li
351.785 69.0574 li
354.336 72.6685 li
356.887 76.2465 li
359.438 79.7455 li
361.989 83.1304 li
364.541 86.3725 li
367.092 89.4554 li
369.643 92.3674 li
372.194 95.1054 li
374.745 97.6745 li
377.296 100.083 li
379.848 102.344 li
382.399 104.472 li
275.657 43.6904 mo
275.657 43.6904 li
278.208 44.3505 li
280.759 44.8574 li
283.311 45.2025 li
285.862 45.3774 li
288.413 45.3845 li
290.964 45.2275 li
293.515 44.9205 li
296.066 44.4855 li
298.618 43.9504 li
301.169 43.3564 li
303.72 42.7475 li
306.271 42.1774 li
308.822 41.7015 li
311.373 41.3795 li
313.925 41.2695 li
316.476 41.4255 li
319.027 41.8954 li
321.578 42.7165 li
324.129 43.9155 li
326.68 45.5045 li
329.232 47.4814 li
331.783 49.8315 li
334.334 52.5255 li
336.885 55.5225 li
339.436 58.7704 li
341.988 62.2155 li
344.539 65.7944 li
347.09 69.4484 li
349.641 73.1205 li
352.192 76.7565 li
354.743 80.3115 li
357.295 83.7475 li
359.846 87.0385 li
362.397 90.1645 li
364.948 93.1144 li
367.499 95.8864 li
370.05 98.4844 li
372.602 100.918 li
375.153 103.199 li
377.704 105.343 li
270.962 44.6425 mo
270.962 44.6425 li
273.513 45.3035 li
276.064 45.8105 li
278.616 46.1545 li
281.167 46.3275 li
283.718 46.3304 li
286.269 46.1674 li
288.82 45.8515 li
291.371 45.4045 li
293.923 44.8574 li
296.474 44.2475 li
299.025 43.6205 li
301.576 43.0314 li
304.127 42.5364 li
306.679 42.1955 li
309.23 42.0654 li
311.781 42.2045 li
314.332 42.6574 li
316.883 43.4655 li
319.434 44.6525 li
321.986 46.2344 li
324.537 48.2084 li
327.088 50.5585 li
329.639 53.2565 li
332.19 56.2585 li
334.741 59.5165 li
337.293 62.9725 li
339.844 66.5645 li
342.395 70.2324 li
344.946 73.9185 li
347.497 77.5695 li
350.048 81.1395 li
352.6 84.5905 li
355.151 87.8935 li
357.702 91.0305 li
360.253 93.9915 li
362.804 96.7725 li
365.355 99.3785 li
367.907 101.818 li
370.458 104.105 li
373.009 106.254 li
266.267 45.6674 mo
266.267 45.6674 li
268.818 46.3475 li
271.369 46.8774 li
273.92 47.2455 li
276.471 47.4455 li
279.023 47.4765 li
281.574 47.3434 li
284.125 47.0585 li
286.677 46.6435 li
289.228 46.1265 li
291.779 45.5464 li
294.33 44.9484 li
296.881 44.3845 li
299.432 43.9114 li
301.984 43.5884 li
304.535 43.4725 li
307.086 43.6205 li
309.637 44.0775 li
312.188 44.8835 li
314.739 46.0645 li
317.291 47.6345 li
319.842 49.5915 li
322.393 51.9214 li
324.944 54.5944 li
327.495 57.5695 li
330.046 60.7975 li
332.598 64.2225 li
335.149 67.7824 li
337.7 71.4194 li
340.251 75.0745 li
342.802 78.6955 li
345.354 82.2375 li
347.905 85.6614 li
350.456 88.9415 li
353.007 92.0585 li
355.558 95.0004 li
358.109 97.7665 li
360.661 100.358 li
363.212 102.787 li
365.763 105.064 li
368.314 107.206 li
261.572 46.7574 mo
261.572 46.7574 li
264.123 47.4755 li
266.674 48.0475 li
269.225 48.4645 li
271.777 48.7184 li
274.328 48.8094 li
276.879 48.7404 li
279.43 48.5245 li
281.981 48.1794 li
284.532 47.7365 li
287.084 47.2294 li
289.635 46.7025 li
292.186 46.2065 li
294.738 45.7964 li
297.289 45.5285 li
299.84 45.4594 li
302.391 45.6425 li
304.942 46.1235 li
307.493 46.9404 li
310.045 48.1194 li
312.596 49.6745 li
315.147 51.6044 li
317.698 53.8935 li
320.249 56.5165 li
322.8 59.4324 li
325.352 62.5934 li
327.903 65.9474 li
330.454 69.4335 li
333.005 72.9935 li
335.556 76.5745 li
338.107 80.1225 li
340.659 83.5955 li
343.21 86.9565 li
345.761 90.1774 li
348.312 93.2415 li
350.863 96.1375 li
353.414 98.8635 li
355.966 101.421 li
358.517 103.82 li
361.068 106.074 li
363.619 108.196 li
256.877 47.9045 mo
256.877 47.9045 li
259.428 48.6735 li
261.979 49.3065 li
264.53 49.7924 li
267.082 50.1245 li
269.633 50.3015 li
272.184 50.3275 li
274.735 50.2125 li
277.286 49.9755 li
279.838 49.6425 li
282.389 49.2475 li
284.94 48.8315 li
287.491 48.4415 li
290.042 48.1315 li
292.594 47.9525 li
295.145 47.9594 li
297.696 48.2025 li
300.247 48.7255 li
302.798 49.5665 li
305.35 50.7485 li
307.901 52.2864 li
310.452 54.1785 li
313.003 56.4114 li
315.554 58.9614 li
318.105 61.7905 li
320.657 64.8535 li
323.208 68.0995 li
325.759 71.4725 li
328.31 74.9185 li
330.861 78.3845 li
333.412 81.8224 li
335.964 85.1895 li
338.515 88.4525 li
341.066 91.5834 li
343.617 94.5665 li
346.168 97.3904 li
348.72 100.054 li
351.271 102.559 li
353.822 104.914 li
356.373 107.131 li
358.924 109.223 li
252.182 49.0934 mo
252.182 49.0934 li
254.733 49.9265 li
257.284 50.6335 li
259.836 51.2045 li
262.387 51.6345 li
264.938 51.9194 li
267.489 52.0634 li
270.04 52.0775 li
272.591 51.9765 li
275.143 51.7844 li
277.694 51.5334 li
280.245 51.2604 li
282.796 51.0095 li
285.347 50.8285 li
287.898 50.7675 li
290.45 50.8754 li
293.001 51.2004 li
295.552 51.7834 li
298.104 52.6584 li
300.655 53.8484 li
303.206 55.3674 li
305.757 57.2165 li
308.308 59.3815 li
310.859 61.8405 li
313.411 64.5594 li
315.962 67.4985 li
318.513 70.6074 li
321.064 73.8375 li
323.615 77.1364 li
326.166 80.4565 li
328.718 83.7504 li
331.269 86.9814 li
333.82 90.1174 li
336.371 93.1324 li
338.922 96.0104 li
341.473 98.7424 li
344.025 101.325 li
346.576 103.761 li
349.127 106.059 li
351.678 108.227 li
354.229 110.281 li
247.487 50.3094 mo
247.487 50.3094 li
250.038 51.2145 li
252.589 52.0054 li
255.141 52.6735 li
257.692 53.2134 li
260.243 53.6225 li
262.794 53.9025 li
265.345 54.0634 li
267.896 54.1194 li
270.448 54.0915 li
272.999 54.0074 li
275.55 53.9015 li
278.101 53.8124 li
280.652 53.7844 li
283.204 53.8635 li
285.755 54.0925 li
288.306 54.5154 li
290.857 55.1714 li
293.408 56.0905 li
295.959 57.2955 li
298.511 58.7975 li
301.062 60.5975 li
303.613 62.6865 li
306.164 65.0435 li
308.716 67.6375 li
311.267 70.4324 li
313.818 73.3845 li
316.369 76.4474 li
318.92 79.5765 li
321.471 82.7255 li
324.023 85.8535 li
326.574 88.9255 li
329.125 91.9125 li
331.676 94.7914 li
334.227 97.5475 li
336.779 100.17 li
339.33 102.658 li
341.881 105.013 li
344.432 107.243 li
346.983 109.355 li
349.534 111.362 li
242.792 51.5385 mo
242.792 51.5385 li
245.343 52.5185 li
247.895 53.3984 li
250.446 54.1694 li
252.997 54.8275 li
255.548 55.3685 li
258.099 55.7955 li
260.65 56.1154 li
263.202 56.3405 li
265.753 56.4894 li
268.304 56.5864 li
270.855 56.6625 li
273.406 56.7515 li
275.957 56.8915 li
278.509 57.1235 li
281.06 57.4865 li
283.611 58.0204 li
286.162 58.7595 li
288.713 59.7294 li
291.264 60.9525 li
293.816 62.4404 li
296.367 64.1924 li
298.918 66.2015 li
301.47 68.4495 li
304.021 70.9105 li
306.572 73.5505 li
309.123 76.3334 li
311.674 79.2165 li
314.225 82.1594 li
316.777 85.1235 li
319.328 88.0705 li
321.879 90.9705 li
324.43 93.7944 li
326.981 96.5245 li
329.532 99.1454 li
332.084 101.649 li
334.635 104.033 li
337.186 106.3 li
339.737 108.454 li
342.288 110.504 li
344.839 112.46 li
238.097 52.7665 mo
238.097 52.7665 li
240.648 53.8224 li
243.2 54.7914 li
245.751 55.6674 li
248.302 56.4435 li
250.853 57.1185 li
253.404 57.6945 li
255.955 58.1765 li
258.507 58.5745 li
261.058 58.9064 li
263.609 59.1904 li
266.16 59.4535 li
268.711 59.7265 li
271.262 60.0414 li
273.814 60.4335 li
276.365 60.9384 li
278.916 61.5884 li
281.467 62.4155 li
284.018 63.4424 li
286.57 64.6895 li
289.121 66.1645 li
291.672 67.8705 li
294.223 69.8005 li
296.774 71.9395 li
299.325 74.2645 li
301.877 76.7485 li
304.428 79.3564 li
306.979 82.0554 li
309.53 84.8085 li
312.082 87.5815 li
314.633 90.3415 li
317.184 93.0615 li
319.735 95.7184 li
322.286 98.2935 li
324.838 100.774 li
327.389 103.154 li
329.94 105.43 li
332.491 107.604 li
335.042 109.68 li
337.593 111.665 li
340.145 113.568 li
233.402 53.9804 mo
233.402 53.9804 li
235.954 55.1094 li
238.505 56.1655 li
241.056 57.1415 li
243.607 58.0344 li
246.158 58.8405 li
248.709 59.5615 li
251.261 60.2015 li
253.812 60.7695 li
256.363 61.2795 li
258.914 61.7475 li
261.465 62.1965 li
264.016 62.6515 li
266.568 63.1404 li
269.119 63.6924 li
271.67 64.3384 li
274.221 65.1074 li
276.772 66.0245 li
279.323 67.1105 li
281.875 68.3835 li
284.426 69.8505 li
286.977 71.5134 li
289.528 73.3685 li
292.079 75.4025 li
294.63 77.5975 li
297.182 79.9274 li
299.733 82.3665 li
302.284 84.8835 li
304.835 87.4495 li
307.386 90.0334 li
309.938 92.6094 li
312.489 95.1525 li
315.04 97.6415 li
317.591 100.063 li
320.143 102.405 li
322.694 104.661 li
325.245 106.829 li
327.796 108.911 li
330.347 110.908 li
332.898 112.828 li
335.45 114.677 li
228.707 55.1725 mo
228.707 55.1725 li
231.259 56.3705 li
233.81 57.5065 li
236.361 58.5765 li
238.912 59.5775 li
241.463 60.5054 li
244.014 61.3625 li
246.566 62.1525 li
249.117 62.8804 li
251.668 63.5594 li
254.219 64.2025 li
256.77 64.8275 li
259.321 65.4554 li
261.873 66.1094 li
264.424 66.8165 li
266.975 67.5995 li
269.526 68.4824 li
272.077 69.4875 li
274.629 70.6335 li
277.18 71.9344 li
279.731 73.3964 li
282.282 75.0234 li
284.833 76.8105 li
287.384 78.7475 li
289.936 80.8195 li
292.487 83.0065 li
295.038 85.2855 li
297.589 87.6315 li
300.14 90.0204 li
302.691 92.4255 li
305.243 94.8254 li
307.794 97.1984 li
310.345 99.5295 li
312.896 101.803 li
315.447 104.012 li
317.999 106.15 li
320.55 108.214 li
323.101 110.206 li
325.652 112.127 li
328.204 113.984 li
330.755 115.782 li
224.012 56.3364 mo
224.012 56.3364 li
226.564 57.5944 li
229.115 58.8035 li
231.666 59.9584 li
234.217 61.0565 li
236.768 62.0964 li
239.32 63.0765 li
241.871 64.0015 li
244.422 64.8765 li
246.973 65.7094 li
249.524 66.5114 li
252.075 67.2995 li
254.627 68.0864 li
257.178 68.8954 li
259.729 69.7435 li
262.28 70.6535 li
264.831 71.6445 li
267.382 72.7344 li
269.934 73.9374 li
272.485 75.2665 li
275.036 76.7285 li
277.587 78.3245 li
280.138 80.0515 li
282.689 81.9015 li
285.241 83.8635 li
287.792 85.9205 li
290.343 88.0544 li
292.894 90.2444 li
295.445 92.4705 li
297.996 94.7125 li
300.548 96.9504 li
303.099 99.1674 li
305.65 101.352 li
308.201 103.49 li
310.752 105.575 li
313.304 107.602 li
315.855 109.57 li
318.406 111.479 li
320.957 113.33 li
323.509 115.128 li
326.06 116.877 li
219.318 57.4675 mo
219.318 57.4675 li
221.869 58.7795 li
224.42 60.0515 li
226.971 61.2814 li
229.522 62.4655 li
232.073 63.6015 li
234.625 64.6915 li
237.176 65.7355 li
239.727 66.7394 li
242.278 67.7084 li
244.829 68.6535 li
247.38 69.5834 li
249.932 70.5145 li
252.483 71.4594 li
255.034 72.4365 li
257.585 73.4614 li
260.136 74.5495 li
262.688 75.7165 li
265.239 76.9745 li
267.79 78.3315 li
270.341 79.7944 li
272.892 81.3654 li
275.443 83.0424 li
277.995 84.8185 li
280.546 86.6844 li
283.097 88.6274 li
285.648 90.6335 li
288.199 92.6855 li
290.75 94.7675 li
293.302 96.8635 li
295.853 98.9575 li
298.404 101.035 li
300.955 103.088 li
303.506 105.104 li
306.057 107.079 li
308.609 109.007 li
311.16 110.888 li
313.711 112.721 li
316.262 114.509 li
318.813 116.253 li
321.364 117.958 li
214.623 58.5665 mo
214.623 58.5665 li
217.174 59.9235 li
219.725 61.2495 li
222.276 62.5414 li
224.827 63.7995 li
227.379 65.0185 li
229.93 66.2004 li
232.481 67.3475 li
235.032 68.4625 li
237.583 69.5495 li
240.134 70.6154 li
242.686 71.6705 li
245.237 72.7255 li
247.788 73.7905 li
250.339 74.8785 li
252.89 76.0035 li
255.441 77.1785 li
257.993 78.4135 li
260.544 79.7194 li
263.095 81.1035 li
265.646 82.5705 li
268.197 84.1225 li
270.748 85.7585 li
273.3 87.4714 li
275.851 89.2565 li
278.402 91.1025 li
280.953 92.9995 li
283.504 94.9335 li
286.055 96.8915 li
288.607 98.8615 li
291.158 100.83 li
293.709 102.788 li
296.26 104.727 li
298.811 106.636 li
301.362 108.514 li
303.914 110.356 li
306.465 112.161 li
309.016 113.928 li
311.567 115.659 li
314.118 117.356 li
316.67 119.022 li
209.928 59.6345 mo
209.928 59.6345 li
212.479 61.0285 li
215.03 62.3995 li
217.581 63.7435 li
220.132 65.0605 li
222.684 66.3495 li
225.235 67.6094 li
227.786 68.8415 li
230.337 70.0485 li
232.888 71.2335 li
235.439 72.4025 li
237.991 73.5624 li
240.542 74.7205 li
243.093 75.8864 li
245.644 77.0695 li
248.195 78.2805 li
250.746 79.5295 li
253.298 80.8234 li
255.849 82.1725 li
258.4 83.5815 li
260.951 85.0535 li
263.502 86.5915 li
266.054 88.1935 li
268.605 89.8564 li
271.156 91.5745 li
273.707 93.3415 li
276.258 95.1464 li
278.809 96.9814 li
281.361 98.8364 li
283.912 100.7 li
286.463 102.564 li
289.014 104.42 li
291.565 106.262 li
294.116 108.082 li
296.668 109.878 li
299.219 111.646 li
301.77 113.386 li
304.321 115.097 li
306.872 116.779 li
309.423 118.436 li
311.975 120.069 li
205.233 60.6735 mo
205.233 60.6735 li
207.784 62.0975 li
210.335 63.5035 li
212.886 64.8904 li
215.438 66.2565 li
217.989 67.6005 li
220.54 68.9235 li
223.091 70.2245 li
225.642 71.5065 li
228.193 72.7725 li
230.745 74.0255 li
233.296 75.2704 li
235.847 76.5145 li
238.398 77.7634 li
240.949 79.0255 li
243.5 80.3074 li
246.052 81.6174 li
248.603 82.9614 li
251.154 84.3475 li
253.705 85.7775 li
256.256 87.2554 li
258.807 88.7834 li
261.359 90.3605 li
263.91 91.9835 li
266.461 93.6484 li
269.012 95.3505 li
271.563 97.0825 li
274.114 98.8364 li
276.666 100.606 li
279.217 102.384 li
281.768 104.162 li
284.319 105.935 li
286.87 107.696 li
289.421 109.443 li
291.973 111.17 li
294.524 112.877 li
297.075 114.563 li
299.626 116.227 li
302.177 117.87 li
304.729 119.493 li
307.28 121.097 li
200.538 61.6884 mo
200.538 61.6884 li
203.089 63.1354 li
205.64 64.5695 li
208.191 65.9894 li
210.743 67.3935 li
213.294 68.7824 li
215.845 70.1545 li
218.396 71.5104 li
220.947 72.8525 li
223.498 74.1815 li
226.05 75.5015 li
228.601 76.8154 li
231.152 78.1274 li
233.703 79.4435 li
236.254 80.7685 li
238.805 82.1085 li
241.357 83.4684 li
243.908 84.8535 li
246.459 86.2695 li
249.01 87.7184 li
251.561 89.2025 li
254.112 90.7245 li
256.664 92.2814 li
259.215 93.8735 li
261.766 95.4975 li
264.317 97.1484 li
266.868 98.8215 li
269.42 100.512 li
271.971 102.215 li
274.522 103.924 li
277.073 105.633 li
279.624 107.338 li
282.175 109.036 li
284.727 110.723 li
287.278 112.395 li
289.829 114.053 li
292.38 115.695 li
294.931 117.321 li
297.482 118.931 li
300.034 120.526 li
302.585 122.108 li
195.843 62.6815 mo
195.843 62.6815 li
198.394 64.1475 li
200.945 65.6025 li
203.496 67.0485 li
206.047 68.4824 li
208.599 69.9045 li
211.15 71.3154 li
213.701 72.7134 li
216.252 74.1025 li
218.804 75.4814 li
221.355 76.8525 li
223.906 78.2194 li
226.457 79.5854 li
229.008 80.9545 li
231.559 82.3285 li
234.111 83.7134 li
236.662 85.1135 li
239.213 86.5324 li
241.764 87.9725 li
244.315 89.4365 li
246.866 90.9265 li
249.418 92.4435 li
251.969 93.9875 li
254.52 95.5565 li
257.071 97.1475 li
259.622 98.7595 li
262.173 100.388 li
264.725 102.03 li
267.276 103.68 li
269.827 105.335 li
272.378 106.991 li
274.929 108.643 li
277.48 110.291 li
280.032 111.931 li
282.583 113.56 li
285.134 115.179 li
287.685 116.786 li
290.236 118.382 li
292.788 119.966 li
295.339 121.539 li
297.89 123.102 li
191.148 63.6584 mo
191.148 63.6584 li
193.699 65.1375 li
196.25 66.6094 li
198.801 68.0734 li
201.352 69.5295 li
203.904 70.9775 li
206.455 72.4174 li
209.006 73.8484 li
211.557 75.2714 li
214.109 76.6884 li
216.66 78.0995 li
219.211 79.5074 li
221.762 80.9145 li
224.313 82.3234 li
226.864 83.7365 li
229.416 85.1564 li
231.967 86.5875 li
234.518 88.0314 li
237.069 89.4904 li
239.62 90.9675 li
242.171 92.4625 li
244.723 93.9775 li
247.274 95.5104 li
249.825 97.0615 li
252.376 98.6304 li
254.927 100.213 li
257.479 101.808 li
260.03 103.411 li
262.581 105.022 li
265.132 106.636 li
267.683 108.25 li
270.234 109.863 li
272.786 111.472 li
275.337 113.076 li
277.888 114.672 li
280.439 116.261 li
282.99 117.841 li
285.541 119.414 li
288.093 120.977 li
290.644 122.534 li
293.195 124.083 li
186.453 64.6215 mo
186.453 64.6215 li
189.004 66.1105 li
191.555 67.5944 li
194.106 69.0724 li
196.657 70.5455 li
199.209 72.0125 li
201.76 73.4734 li
204.311 74.9285 li
206.862 76.3774 li
209.413 77.8224 li
211.964 79.2634 li
214.516 80.7025 li
217.067 82.1395 li
219.618 83.5785 li
222.17 85.0204 li
224.721 86.4675 li
227.272 87.9214 li
229.823 89.3845 li
232.374 90.8585 li
234.925 92.3455 li
237.477 93.8444 li
240.028 95.3574 li
242.579 96.8845 li
245.13 98.4235 li
247.681 99.9745 li
250.232 101.535 li
252.784 103.105 li
255.335 104.681 li
257.886 106.262 li
260.437 107.845 li
262.988 109.429 li
265.539 111.013 li
268.091 112.593 li
270.642 114.169 li
273.193 115.74 li
275.744 117.306 li
278.295 118.867 li
280.846 120.421 li
283.398 121.97 li
285.949 123.513 li
288.5 125.051 li
181.758 65.5745 mo
181.758 65.5745 li
184.309 67.0705 li
186.86 68.5634 li
189.411 70.0515 li
191.962 71.5364 li
194.514 73.0175 li
197.065 74.4935 li
199.616 75.9665 li
202.167 77.4344 li
204.718 78.8995 li
207.27 80.3625 li
209.821 81.8234 li
212.372 83.2834 li
214.923 84.7444 li
217.474 86.2075 li
220.025 87.6735 li
222.577 89.1454 li
225.128 90.6235 li
227.679 92.1085 li
230.23 93.6025 li
232.782 95.1054 li
235.333 96.6174 li
237.884 98.1384 li
240.435 99.6694 li
242.986 101.207 li
245.538 102.753 li
248.089 104.305 li
250.64 105.861 li
253.191 107.42 li
255.742 108.981 li
258.293 110.543 li
260.845 112.104 li
263.396 113.663 li
265.947 115.219 li
268.498 116.772 li
271.049 118.322 li
273.6 119.867 li
276.152 121.408 li
278.703 122.945 li
281.254 124.479 li
283.805 126.009 li
177.063 66.5204 mo
177.063 66.5204 li
179.614 68.0204 li
182.165 69.5195 li
184.716 71.0154 li
187.268 72.5085 li
189.819 73.9995 li
192.37 75.4865 li
194.921 76.9714 li
197.472 78.4535 li
200.023 79.9335 li
202.575 81.4114 li
205.126 82.8884 li
207.677 84.3654 li
210.228 85.8415 li
212.779 87.3205 li
215.33 88.8005 li
217.882 90.2844 li
220.433 91.7734 li
222.984 93.2675 li
225.536 94.7665 li
228.087 96.2714 li
230.638 97.7834 li
233.189 99.3015 li
235.74 100.825 li
238.291 102.355 li
240.843 103.89 li
243.394 105.429 li
245.945 106.97 li
248.496 108.514 li
251.047 110.059 li
253.598 111.605 li
256.15 113.15 li
258.701 114.694 li
261.252 116.236 li
263.803 117.775 li
266.354 119.313 li
268.905 120.847 li
271.457 122.379 li
274.008 123.908 li
276.559 125.434 li
279.11 126.959 li
172.368 67.4594 mo
172.368 67.4594 li
174.919 68.9634 li
177.47 70.4675 li
180.021 71.9675 li
182.573 73.4675 li
185.124 74.9645 li
187.675 76.4594 li
190.226 77.9535 li
192.777 79.4455 li
195.329 80.9355 li
197.88 82.4245 li
200.431 83.9125 li
202.982 85.4005 li
205.533 86.8884 li
208.084 88.3774 li
210.636 89.8685 li
213.187 91.3615 li
215.738 92.8574 li
218.289 94.3564 li
220.84 95.8594 li
223.391 97.3674 li
225.943 98.8795 li
228.494 100.394 li
231.045 101.914 li
233.596 103.438 li
236.148 104.965 li
238.699 106.495 li
241.25 108.026 li
243.801 109.56 li
246.352 111.094 li
248.904 112.628 li
251.455 114.162 li
254.006 115.695 li
256.557 117.227 li
259.108 118.757 li
261.659 120.286 li
264.211 121.813 li
266.762 123.338 li
269.313 124.861 li
271.864 126.382 li
274.415 127.902 li
0.25 gry
@
360.166 30.3065 mo
360.166 30.3065 li
355.471 31.1904 li
350.776 32.0574 li
346.081 32.9055 li
341.386 33.7294 li
336.691 34.5255 li
331.996 35.2914 li
327.301 36.0245 li
322.606 36.7245 li
317.911 37.3945 li
313.216 38.0395 li
308.521 38.6674 li
303.827 39.2905 li
299.132 39.9205 li
294.437 40.5734 li
289.742 41.2645 li
285.047 42.0074 li
280.352 42.8134 li
275.657 43.6904 li
270.962 44.6425 li
266.267 45.6674 li
261.572 46.7574 li
256.877 47.9045 li
252.182 49.0934 li
247.487 50.3094 li
242.792 51.5385 li
238.097 52.7665 li
233.402 53.9804 li
228.707 55.1725 li
224.012 56.3364 li
219.318 57.4675 li
214.623 58.5665 li
209.928 59.6345 li
205.233 60.6735 li
200.538 61.6884 li
195.843 62.6815 li
191.148 63.6584 li
186.453 64.6215 li
181.758 65.5745 li
177.063 66.5204 li
172.368 67.4594 li
362.717 31.7955 mo
362.717 31.7955 li
358.022 32.6694 li
353.327 33.5234 li
348.632 34.3535 li
343.937 35.1535 li
339.242 35.9194 li
334.547 36.6464 li
329.852 37.3334 li
325.157 37.9785 li
320.462 38.5864 li
315.768 39.1614 li
311.073 39.7155 li
306.378 40.2614 li
301.683 40.8154 li
296.988 41.3984 li
292.293 42.0265 li
287.598 42.7194 li
282.903 43.4904 li
278.208 44.3505 li
273.513 45.3035 li
268.818 46.3475 li
264.123 47.4755 li
259.428 48.6735 li
254.733 49.9265 li
250.038 51.2145 li
245.343 52.5185 li
240.648 53.8224 li
235.954 55.1094 li
231.259 56.3705 li
226.564 57.5944 li
221.869 58.7795 li
217.174 59.9235 li
212.479 61.0285 li
207.784 62.0975 li
203.089 63.1354 li
198.394 64.1475 li
193.699 65.1375 li
189.004 66.1105 li
184.309 67.0705 li
179.614 68.0204 li
174.919 68.9634 li
365.268 33.2814 mo
365.268 33.2814 li
360.573 34.1435 li
355.879 34.9824 li
351.183 35.7905 li
346.488 36.5624 li
341.793 37.2924 li
337.098 37.9755 li
332.404 38.6074 li
327.709 39.1895 li
323.014 39.7234 li
318.319 40.2175 li
313.624 40.6844 li
308.929 41.1404 li
304.234 41.6054 li
299.539 42.1035 li
294.844 42.6574 li
290.149 43.2905 li
285.454 44.0195 li
280.759 44.8574 li
276.064 45.8105 li
271.369 46.8774 li
266.674 48.0475 li
261.979 49.3065 li
257.284 50.6335 li
252.589 52.0054 li
247.895 53.3984 li
243.2 54.7914 li
238.505 56.1655 li
233.81 57.5065 li
229.115 58.8035 li
224.42 60.0515 li
219.725 61.2495 li
215.03 62.3995 li
210.335 63.5035 li
205.64 64.5695 li
200.945 65.6025 li
196.25 66.6094 li
191.555 67.5944 li
186.86 68.5634 li
182.165 69.5195 li
177.47 70.4675 li
367.82 34.7634 mo
367.82 34.7634 li
363.125 35.6115 li
358.43 36.4324 li
353.734 37.2155 li
349.039 37.9565 li
344.345 38.6445 li
339.65 39.2765 li
334.955 39.8464 li
330.26 40.3544 li
325.565 40.8035 li
320.87 41.2045 li
316.175 41.5695 li
311.48 41.9205 li
306.785 42.2824 li
302.09 42.6824 li
297.395 43.1495 li
292.7 43.7114 li
288.005 44.3904 li
283.311 45.2025 li
278.616 46.1545 li
273.92 47.2455 li
269.225 48.4645 li
264.53 49.7924 li
259.836 51.2045 li
255.141 52.6735 li
250.446 54.1694 li
245.751 55.6674 li
241.056 57.1415 li
236.361 58.5765 li
231.666 59.9584 li
226.971 61.2814 li
222.276 62.5414 li
217.581 63.7435 li
212.886 64.8904 li
208.191 65.9894 li
203.496 67.0485 li
198.801 68.0734 li
194.106 69.0724 li
189.411 70.0515 li
184.716 71.0154 li
180.021 71.9675 li
370.371 36.2404 mo
370.371 36.2404 li
365.676 37.0745 li
360.981 37.8735 li
356.286 38.6295 li
351.591 39.3334 li
346.896 39.9755 li
342.201 40.5485 li
337.506 41.0475 li
332.811 41.4714 li
328.116 41.8245 li
323.421 42.1185 li
318.726 42.3685 li
314.031 42.5995 li
309.336 42.8425 li
304.641 43.1304 li
299.946 43.4975 li
295.252 43.9775 li
290.557 44.5975 li
285.862 45.3774 li
281.167 46.3275 li
276.471 47.4455 li
271.777 48.7184 li
267.082 50.1245 li
262.387 51.6345 li
257.692 53.2134 li
252.997 54.8275 li
248.302 56.4435 li
243.607 58.0344 li
238.912 59.5775 li
234.217 61.0565 li
229.522 62.4655 li
224.827 63.7995 li
220.132 65.0605 li
215.438 66.2565 li
210.743 67.3935 li
206.047 68.4824 li
201.352 69.5295 li
196.657 70.5455 li
191.962 71.5364 li
187.268 72.5085 li
182.573 73.4675 li
372.922 37.7134 mo
372.922 37.7134 li
368.227 38.5295 li
363.532 39.3054 li
358.837 40.0305 li
354.142 40.6935 li
349.447 41.2834 li
344.752 41.7905 li
340.057 42.2104 li
335.362 42.5414 li
330.667 42.7864 li
325.972 42.9594 li
321.277 43.0804 li
316.582 43.1774 li
311.888 43.2864 li
307.193 43.4474 li
302.498 43.7015 li
297.803 44.0884 li
293.108 44.6415 li
288.413 45.3845 li
283.718 46.3304 li
279.023 47.4765 li
274.328 48.8094 li
269.633 50.3015 li
264.938 51.9194 li
260.243 53.6225 li
255.548 55.3685 li
250.853 57.1185 li
246.158 58.8405 li
241.463 60.5054 li
236.768 62.0964 li
232.073 63.6015 li
227.379 65.0185 li
222.684 66.3495 li
217.989 67.6005 li
213.294 68.7824 li
208.599 69.9045 li
203.904 70.9775 li
199.209 72.0125 li
194.514 73.0175 li
189.819 73.9995 li
185.124 74.9645 li
375.473 39.1815 mo
375.473 39.1815 li
370.778 39.9794 li
366.083 40.7285 li
361.388 41.4185 li
356.693 42.0364 li
351.998 42.5685 li
347.303 43.0045 li
342.608 43.3375 li
337.913 43.5645 li
333.218 43.6915 li
328.523 43.7314 li
323.829 43.7094 li
319.134 43.6584 li
314.439 43.6194 li
309.744 43.6384 li
305.049 43.7675 li
300.354 44.0495 li
295.659 44.5275 li
290.964 45.2275 li
286.269 46.1674 li
281.574 47.3434 li
276.879 48.7404 li
272.184 50.3275 li
267.489 52.0634 li
262.794 53.9025 li
258.099 55.7955 li
253.404 57.6945 li
248.709 59.5615 li
244.014 61.3625 li
239.32 63.0765 li
234.625 64.6915 li
229.93 66.2004 li
225.235 67.6094 li
220.54 68.9235 li
215.845 70.1545 li
211.15 71.3154 li
206.455 72.4174 li
201.76 73.4734 li
197.065 74.4935 li
192.37 75.4865 li
187.675 76.4594 li
378.024 40.6445 mo
378.024 40.6445 li
373.329 41.4214 li
368.634 42.1435 li
363.939 42.7955 li
359.244 43.3644 li
354.549 43.8344 li
349.854 44.1924 li
345.159 44.4304 li
340.464 44.5455 li
335.77 44.5435 li
331.075 44.4395 li
326.38 44.2625 li
321.685 44.0495 li
316.99 43.8495 li
312.295 43.7155 li
307.6 43.7054 li
302.905 43.8745 li
298.21 44.2675 li
293.515 44.9205 li
288.82 45.8515 li
284.125 47.0585 li
279.43 48.5245 li
274.735 50.2125 li
270.04 52.0775 li
265.345 54.0634 li
260.65 56.1154 li
255.955 58.1765 li
251.261 60.2015 li
246.566 62.1525 li
241.871 64.0015 li
237.176 65.7355 li
232.481 67.3475 li
227.786 68.8415 li
223.091 70.2245 li
218.396 71.5104 li
213.701 72.7134 li
209.006 73.8484 li
204.311 74.9285 li
199.616 75.9665 li
194.921 76.9714 li
190.226 77.9535 li
380.575 42.1035 mo
380.575 42.1035 li
375.88 42.8585 li
371.186 43.5495 li
366.491 44.1625 li
361.796 44.6774 li
357.1 45.0815 li
352.405 45.3564 li
347.711 45.4924 li
343.016 45.4885 li
338.321 45.3495 li
333.626 45.0925 li
328.931 44.7504 li
324.236 44.3654 li
319.541 43.9924 li
314.846 43.6935 li
310.151 43.5364 li
305.456 43.5815 li
300.761 43.8845 li
296.066 44.4855 li
291.371 45.4045 li
286.677 46.6435 li
281.981 48.1794 li
277.286 49.9755 li
272.591 51.9765 li
267.896 54.1194 li
263.202 56.3405 li
258.507 58.5745 li
253.812 60.7695 li
249.117 62.8804 li
244.422 64.8765 li
239.727 66.7394 li
235.032 68.4625 li
230.337 70.0485 li
225.642 71.5065 li
220.947 72.8525 li
216.252 74.1025 li
211.557 75.2714 li
206.862 76.3774 li
202.167 77.4344 li
197.472 78.4535 li
192.777 79.4455 li
383.127 43.5594 mo
383.127 43.5594 li
378.432 44.2905 li
373.737 44.9495 li
369.042 45.5185 li
364.347 45.9794 li
359.652 46.3124 li
354.957 46.5004 li
350.262 46.5314 li
345.567 46.4025 li
340.872 46.1194 li
336.177 45.7035 li
331.482 45.1874 li
326.787 44.6225 li
322.092 44.0685 li
317.397 43.5975 li
312.702 43.2844 li
308.007 43.2004 li
303.312 43.4074 li
298.618 43.9504 li
293.923 44.8574 li
289.228 46.1265 li
284.532 47.7365 li
279.838 49.6425 li
275.143 51.7844 li
270.448 54.0915 li
265.753 56.4894 li
261.058 58.9064 li
256.363 61.2795 li
251.668 63.5594 li
246.973 65.7094 li
242.278 67.7084 li
237.583 69.5495 li
232.888 71.2335 li
228.193 72.7725 li
223.498 74.1815 li
218.804 75.4814 li
214.109 76.6884 li
209.413 77.8224 li
204.718 78.8995 li
200.023 79.9335 li
195.329 80.9355 li
385.678 45.0114 mo
385.678 45.0114 li
380.983 45.7175 li
376.288 46.3434 li
371.593 46.8694 li
366.898 47.2734 li
362.203 47.5334 li
357.508 47.6315 li
352.813 47.5544 li
348.118 47.2975 li
343.423 46.8674 li
338.728 46.2864 li
334.033 45.5944 li
329.338 44.8444 li
324.643 44.1054 li
319.948 43.4575 li
315.254 42.9835 li
310.559 42.7654 li
305.864 42.8725 li
301.169 43.3564 li
296.474 44.2475 li
291.779 45.5464 li
287.084 47.2294 li
282.389 49.2475 li
277.694 51.5334 li
272.999 54.0074 li
268.304 56.5864 li
263.609 59.1904 li
258.914 61.7475 li
254.219 64.2025 li
249.524 66.5114 li
244.829 68.6535 li
240.134 70.6154 li
235.439 72.4025 li
230.745 74.0255 li
226.05 75.5015 li
221.355 76.8525 li
216.66 78.0995 li
211.964 79.2634 li
207.27 80.3625 li
202.575 81.4114 li
197.88 82.4245 li
388.229 46.4604 mo
388.229 46.4604 li
383.534 47.1415 li
378.839 47.7344 li
374.144 48.2155 li
369.449 48.5615 li
364.754 48.7495 li
360.059 48.7574 li
355.364 48.5715 li
350.669 48.1855 li
345.974 47.6085 li
341.279 46.8635 li
336.584 45.9935 li
331.889 45.0585 li
327.195 44.1345 li
322.5 43.3085 li
317.805 42.6735 li
313.11 42.3195 li
308.415 42.3245 li
303.72 42.7475 li
299.025 43.6205 li
294.33 44.9484 li
289.635 46.7025 li
284.94 48.8315 li
280.245 51.2604 li
275.55 53.9015 li
270.855 56.6625 li
266.16 59.4535 li
261.465 62.1965 li
256.77 64.8275 li
252.075 67.2995 li
247.38 69.5834 li
242.686 71.6705 li
237.991 73.5624 li
233.296 75.2704 li
228.601 76.8154 li
223.906 78.2194 li
219.211 79.5074 li
214.516 80.7025 li
209.821 81.8234 li
205.126 82.8884 li
200.431 83.9125 li
390.78 47.9094 mo
390.78 47.9094 li
386.085 48.5654 li
381.39 49.1235 li
376.695 49.5605 li
372 49.8505 li
367.305 49.9655 li
362.61 49.8854 li
357.915 49.5925 li
353.22 49.0815 li
348.525 48.3594 li
343.83 47.4554 li
339.136 46.4114 li
334.441 45.2955 li
329.746 44.1904 li
325.051 43.1904 li
320.356 42.3975 li
315.661 41.9114 li
310.966 41.8154 li
306.271 42.1774 li
301.576 43.0314 li
296.881 44.3845 li
292.186 46.2065 li
287.491 48.4415 li
282.796 51.0095 li
278.101 53.8124 li
273.406 56.7515 li
268.711 59.7265 li
264.016 62.6515 li
259.321 65.4554 li
254.627 68.0864 li
249.932 70.5145 li
245.237 72.7255 li
240.542 74.7205 li
235.847 76.5145 li
231.152 78.1274 li
226.457 79.5854 li
221.762 80.9145 li
217.067 82.1395 li
212.372 83.2834 li
207.677 84.3654 li
202.982 85.4005 li
393.331 49.3585 mo
393.331 49.3585 li
388.636 49.9894 li
383.941 50.5154 li
379.246 50.9094 li
374.552 51.1435 li
369.857 51.1915 li
365.161 51.0255 li
360.466 50.6315 li
355.771 50.0004 li
351.077 49.1425 li
346.382 48.0854 li
341.687 46.8774 li
336.992 45.5905 li
332.297 44.3134 li
327.602 43.1484 li
322.907 42.2054 li
318.212 41.5915 li
313.517 41.4005 li
308.822 41.7015 li
304.127 42.5364 li
299.432 43.9114 li
294.738 45.7964 li
290.042 48.1315 li
285.347 50.8285 li
280.652 53.7844 li
275.957 56.8915 li
271.262 60.0414 li
266.568 63.1404 li
261.873 66.1094 li
257.178 68.8954 li
252.483 71.4594 li
247.788 73.7905 li
243.093 75.8864 li
238.398 77.7634 li
233.703 79.4435 li
229.008 80.9545 li
224.313 82.3234 li
219.618 83.5785 li
214.923 84.7444 li
210.228 85.8415 li
205.533 86.8884 li
395.882 50.8094 mo
395.882 50.8094 li
391.188 51.4174 li
386.493 51.9114 li
381.798 52.2654 li
377.103 52.4495 li
372.408 52.4324 li
367.712 52.1884 li
363.018 51.6995 li
358.323 50.9594 li
353.628 49.9755 li
348.933 48.7795 li
344.238 47.4214 li
339.543 45.9775 li
334.848 44.5424 li
330.153 43.2265 li
325.458 42.1464 li
320.763 41.4155 li
316.068 41.1345 li
311.373 41.3795 li
306.679 42.1955 li
301.984 43.5884 li
297.289 45.5285 li
292.594 47.9525 li
287.898 50.7675 li
283.204 53.8635 li
278.509 57.1235 li
273.814 60.4335 li
269.119 63.6924 li
264.424 66.8165 li
259.729 69.7435 li
255.034 72.4365 li
250.339 74.8785 li
245.644 77.0695 li
240.949 79.0255 li
236.254 80.7685 li
231.559 82.3285 li
226.864 83.7365 li
222.17 85.0204 li
217.474 86.2075 li
212.779 87.3205 li
208.084 88.3774 li
398.434 52.2645 mo
398.434 52.2645 li
393.739 52.8495 li
389.044 53.3165 li
384.349 53.6345 li
379.654 53.7714 li
374.959 53.6974 li
370.264 53.3835 li
365.569 52.8115 li
360.874 51.9745 li
356.179 50.8804 li
351.484 49.5615 li
346.789 48.0724 li
342.094 46.4915 li
337.399 44.9194 li
332.704 43.4705 li
328.009 42.2695 li
323.314 41.4365 li
318.62 41.0754 li
313.925 41.2695 li
309.23 42.0654 li
304.535 43.4725 li
299.84 45.4594 li
295.145 47.9594 li
290.45 50.8754 li
285.755 54.0925 li
281.06 57.4865 li
276.365 60.9384 li
271.67 64.3384 li
266.975 67.5995 li
262.28 70.6535 li
257.585 73.4614 li
252.89 76.0035 li
248.195 78.2805 li
243.5 80.3074 li
238.805 82.1085 li
234.111 83.7134 li
229.416 85.1564 li
224.721 86.4675 li
220.025 87.6735 li
215.33 88.8005 li
210.636 89.8685 li
400.985 53.7245 mo
400.985 53.7245 li
396.29 54.2905 li
391.595 54.7335 li
386.9 55.0185 li
382.205 55.1174 li
377.51 54.9935 li
372.815 54.6215 li
368.12 53.9804 li
363.425 53.0615 li
358.73 51.8765 li
354.035 50.4565 li
349.34 48.8594 li
344.645 47.1664 li
339.95 45.4804 li
335.255 43.9225 li
330.561 42.6215 li
325.866 41.7025 li
321.171 41.2755 li
316.476 41.4255 li
311.781 42.2045 li
307.086 43.6205 li
302.391 45.6425 li
297.696 48.2025 li
293.001 51.2004 li
288.306 54.5154 li
283.611 58.0204 li
278.916 61.5884 li
274.221 65.1074 li
269.526 68.4824 li
264.831 71.6445 li
260.136 74.5495 li
255.441 77.1785 li
250.746 79.5295 li
246.052 81.6174 li
241.357 83.4684 li
236.662 85.1135 li
231.967 86.5875 li
227.272 87.9214 li
222.577 89.1454 li
217.882 90.2844 li
213.187 91.3615 li
403.536 55.1904 mo
403.536 55.1904 li
398.841 55.7415 li
394.146 56.1635 li
389.451 56.4245 li
384.756 56.4915 li
380.061 56.3295 li
375.366 55.9114 li
370.671 55.2165 li
365.976 54.2365 li
361.281 52.9814 li
356.586 51.4855 li
351.891 49.8065 li
347.196 48.0295 li
342.502 46.2585 li
337.807 44.6185 li
333.112 43.2424 li
328.417 42.2585 li
323.722 41.7795 li
319.027 41.8954 li
314.332 42.6574 li
309.637 44.0775 li
304.942 46.1235 li
300.247 48.7255 li
295.552 51.7834 li
290.857 55.1714 li
286.162 58.7595 li
281.467 62.4155 li
276.772 66.0245 li
272.077 69.4875 li
267.382 72.7344 li
262.688 75.7165 li
257.993 78.4135 li
253.298 80.8234 li
248.603 82.9614 li
243.908 84.8535 li
239.213 86.5324 li
234.518 88.0314 li
229.823 89.3845 li
225.128 90.6235 li
220.433 91.7734 li
215.738 92.8574 li
406.087 56.6664 mo
406.087 56.6664 li
401.392 57.2054 li
396.697 57.6125 li
392.002 57.8544 li
387.307 57.8995 li
382.612 57.7104 li
377.918 57.2614 li
373.223 56.5305 li
368.527 55.5095 li
363.832 54.2094 li
359.138 52.6655 li
354.443 50.9355 li
349.748 49.1044 li
345.053 47.2805 li
340.358 45.5895 li
335.663 44.1655 li
330.968 43.1384 li
326.273 42.6254 li
321.578 42.7165 li
316.883 43.4655 li
312.188 44.8835 li
307.493 46.9404 li
302.798 49.5665 li
298.104 52.6584 li
293.408 56.0905 li
288.713 59.7294 li
284.018 63.4424 li
279.323 67.1105 li
274.629 70.6335 li
269.934 73.9374 li
265.239 76.9745 li
260.544 79.7194 li
255.849 82.1725 li
251.154 84.3475 li
246.459 86.2695 li
241.764 87.9725 li
237.069 89.4904 li
232.374 90.8585 li
227.679 92.1085 li
222.984 93.2675 li
218.289 94.3564 li
408.638 58.1525 mo
408.638 58.1525 li
403.943 58.6835 li
399.248 59.0815 li
394.554 59.3124 li
389.859 59.3444 li
385.164 59.1425 li
380.469 58.6774 li
375.774 57.9294 li
371.079 56.8904 li
366.384 55.5724 li
361.689 54.0085 li
356.994 52.2585 li
352.299 50.4084 li
347.604 48.5645 li
342.909 46.8544 li
338.214 45.4114 li
333.519 44.3665 li
328.824 43.8375 li
324.129 43.9155 li
319.434 44.6525 li
314.739 46.0645 li
310.045 48.1194 li
305.35 50.7485 li
300.655 53.8484 li
295.959 57.2955 li
291.264 60.9525 li
286.57 64.6895 li
281.875 68.3835 li
277.18 71.9344 li
272.485 75.2665 li
267.79 78.3315 li
263.095 81.1035 li
258.4 83.5815 li
253.705 85.7775 li
249.01 87.7184 li
244.315 89.4365 li
239.62 90.9675 li
234.925 92.3455 li
230.23 93.6025 li
225.536 94.7665 li
220.84 95.8594 li
411.189 59.6484 mo
411.189 59.6484 li
406.495 60.1774 li
401.8 60.5715 li
397.105 60.8005 li
392.41 60.8295 li
387.715 60.6274 li
383.02 60.1635 li
378.325 59.4185 li
373.63 58.3854 li
368.935 57.0754 li
364.24 55.5225 li
359.545 53.7864 li
354.85 51.9495 li
350.155 50.1205 li
345.46 48.4235 li
340.765 46.9915 li
336.07 45.9545 li
331.375 45.4285 li
326.68 45.5045 li
321.986 46.2344 li
317.291 47.6345 li
312.596 49.6745 li
307.901 52.2864 li
303.206 55.3674 li
298.511 58.7975 li
293.816 62.4404 li
289.121 66.1645 li
284.426 69.8505 li
279.731 73.3964 li
275.036 76.7285 li
270.341 79.7944 li
265.646 82.5705 li
260.951 85.0535 li
256.256 87.2554 li
251.561 89.2025 li
246.866 90.9265 li
242.171 92.4625 li
237.477 93.8444 li
232.782 95.1054 li
228.087 96.2714 li
223.391 97.3674 li
413.741 61.1564 mo
413.741 61.1564 li
409.046 61.6865 li
404.351 62.0844 li
399.656 62.3195 li
394.961 62.3574 li
390.266 62.1674 li
385.571 61.7205 li
380.876 60.9995 li
376.181 59.9955 li
371.486 58.7205 li
366.791 57.2084 li
362.096 55.5175 li
357.401 53.7285 li
352.706 51.9474 li
348.011 50.2975 li
343.316 48.9055 li
338.621 47.9005 li
333.927 47.3975 li
329.232 47.4814 li
324.537 48.2084 li
319.842 49.5915 li
315.147 51.6044 li
310.452 54.1785 li
305.757 57.2165 li
301.062 60.5975 li
296.367 64.1924 li
291.672 67.8705 li
286.977 71.5134 li
282.282 75.0234 li
277.587 78.3245 li
272.892 81.3654 li
268.197 84.1225 li
263.502 86.5915 li
258.807 88.7834 li
254.112 90.7245 li
249.418 92.4435 li
244.723 93.9775 li
240.028 95.3574 li
235.333 96.6174 li
230.638 97.7834 li
225.943 98.8795 li
416.292 62.6774 mo
416.292 62.6774 li
411.597 63.2134 li
406.902 63.6205 li
402.207 63.8685 li
397.512 63.9265 li
392.817 63.7614 li
388.122 63.3495 li
383.427 62.6694 li
378.732 61.7175 li
374.037 60.5035 li
369.342 59.0605 li
364.647 57.4455 li
359.952 55.7365 li
355.257 54.0364 li
350.562 52.4625 li
345.868 51.1395 li
341.173 50.1915 li
336.478 49.7275 li
331.783 49.8315 li
327.088 50.5585 li
322.393 51.9214 li
317.698 53.8935 li
313.003 56.4114 li
308.308 59.3815 li
303.613 62.6865 li
298.918 66.2015 li
294.223 69.8005 li
289.528 73.3685 li
284.833 76.8105 li
280.138 80.0515 li
275.443 83.0424 li
270.748 85.7585 li
266.054 88.1935 li
261.359 90.3605 li
256.664 92.2814 li
251.969 93.9875 li
247.274 95.5104 li
242.579 96.8845 li
237.884 98.1384 li
233.189 99.3015 li
228.494 100.394 li
418.843 64.2094 mo
418.843 64.2094 li
414.148 64.7565 li
409.453 65.1794 li
404.758 65.4495 li
400.063 65.5344 li
395.368 65.4084 li
390.673 65.0444 li
385.979 64.4245 li
381.284 63.5444 li
376.589 62.4155 li
371.893 61.0685 li
367.198 59.5565 li
362.504 57.9575 li
357.809 56.3674 li
353.114 54.8975 li
348.419 53.6694 li
343.724 52.7985 li
339.029 52.3904 li
334.334 52.5255 li
329.639 53.2565 li
324.944 54.5944 li
320.249 56.5165 li
315.554 58.9614 li
310.859 61.8405 li
306.164 65.0435 li
301.47 68.4495 li
296.774 71.9395 li
292.079 75.4025 li
287.384 78.7475 li
282.689 81.9015 li
277.995 84.8185 li
273.3 87.4714 li
268.605 89.8564 li
263.91 91.9835 li
259.215 93.8735 li
254.52 95.5565 li
249.825 97.0615 li
245.13 98.4235 li
240.435 99.6694 li
235.74 100.825 li
231.045 101.914 li
421.394 65.7524 mo
421.394 65.7524 li
416.699 66.3154 li
412.004 66.7585 li
407.309 67.0565 li
402.614 67.1804 li
397.92 67.1025 li
393.225 66.8005 li
388.53 66.2565 li
383.835 65.4675 li
379.14 64.4435 li
374.445 63.2145 li
369.75 61.8315 li
365.055 60.3674 li
360.36 58.9114 li
355.665 57.5715 li
350.97 56.4594 li
346.275 55.6844 li
341.58 55.3464 li
336.885 55.5225 li
332.19 56.2585 li
327.495 57.5695 li
322.8 59.4324 li
318.105 61.7905 li
313.411 64.5594 li
308.716 67.6375 li
304.021 70.9105 li
299.325 74.2645 li
294.63 77.5975 li
289.936 80.8195 li
285.241 83.8635 li
280.546 86.6844 li
275.851 89.2565 li
271.156 91.5745 li
266.461 93.6484 li
261.766 95.4975 li
257.071 97.1475 li
252.376 98.6304 li
247.681 99.9745 li
242.986 101.207 li
238.291 102.355 li
233.596 103.438 li
423.945 67.3065 mo
423.945 67.3065 li
419.25 67.8875 li
414.555 68.3564 li
409.861 68.6884 li
405.166 68.8585 li
400.471 68.8384 li
395.776 68.6094 li
391.081 68.1545 li
386.386 67.4714 li
381.691 66.5705 li
376.996 65.4785 li
372.301 64.2444 li
367.606 62.9355 li
362.911 61.6364 li
358.216 60.4455 li
353.521 59.4675 li
348.826 58.8044 li
344.131 58.5485 li
339.436 58.7704 li
334.741 59.5165 li
330.046 60.7975 li
325.352 62.5934 li
320.657 64.8535 li
315.962 67.4985 li
311.267 70.4324 li
306.572 73.5505 li
301.877 76.7485 li
297.182 79.9274 li
292.487 83.0065 li
287.792 85.9205 li
283.097 88.6274 li
278.402 91.1025 li
273.707 93.3415 li
269.012 95.3505 li
264.317 97.1484 li
259.622 98.7595 li
254.927 100.213 li
250.232 101.535 li
245.538 102.753 li
240.843 103.89 li
236.148 104.965 li
426.496 68.8685 mo
426.496 68.8685 li
421.802 69.4705 li
417.107 69.9705 li
412.412 70.3415 li
407.717 70.5634 li
403.022 70.6094 li
398.327 70.4614 li
393.632 70.1064 li
388.937 69.5414 li
384.242 68.7755 li
379.547 67.8364 li
374.852 66.7665 li
370.157 65.6285 li
365.462 64.5015 li
360.767 63.4745 li
356.072 62.6435 li
351.377 62.1044 li
346.682 61.9395 li
341.988 62.2155 li
337.293 62.9725 li
332.598 64.2225 li
327.903 65.9474 li
323.208 68.0995 li
318.513 70.6074 li
313.818 73.3845 li
309.123 76.3334 li
304.428 79.3564 li
299.733 82.3665 li
295.038 85.2855 li
290.343 88.0544 li
285.648 90.6335 li
280.953 92.9995 li
276.258 95.1464 li
271.563 97.0825 li
266.868 98.8215 li
262.173 100.388 li
257.479 101.808 li
252.784 103.105 li
248.089 104.305 li
243.394 105.429 li
238.699 106.495 li
429.048 70.4365 mo
429.048 70.4365 li
424.353 71.0645 li
419.658 71.5964 li
414.963 72.0114 li
410.268 72.2885 li
405.573 72.4064 li
400.878 72.3464 li
396.183 72.0995 li
391.488 71.6594 li
386.793 71.0395 li
382.098 70.2614 li
377.403 69.3665 li
372.708 68.4105 li
368.013 67.4655 li
363.318 66.6125 li
358.623 65.9384 li
353.929 65.5295 li
349.234 65.4614 li
344.539 65.7944 li
339.844 66.5645 li
335.149 67.7824 li
330.454 69.4335 li
325.759 71.4725 li
321.064 73.8375 li
316.369 76.4474 li
311.674 79.2165 li
306.979 82.0554 li
302.284 84.8835 li
297.589 87.6315 li
292.894 90.2444 li
288.199 92.6855 li
283.504 94.9335 li
278.809 96.9814 li
274.114 98.8364 li
269.42 100.512 li
264.725 102.03 li
260.03 103.411 li
255.335 104.681 li
250.64 105.861 li
245.945 106.97 li
241.25 108.026 li
431.599 72.0114 mo
431.599 72.0114 li
426.904 72.6645 li
422.209 73.2314 li
417.514 73.6915 li
412.819 74.0275 li
408.124 74.2205 li
403.429 74.2535 li
398.734 74.1174 li
394.039 73.8094 li
389.345 73.3384 li
384.65 72.7275 li
379.954 72.0125 li
375.259 71.2435 li
370.564 70.4855 li
365.87 69.8115 li
361.175 69.2995 li
356.48 69.0255 li
351.785 69.0574 li
347.09 69.4484 li
342.395 70.2324 li
337.7 71.4194 li
333.005 72.9935 li
328.31 74.9185 li
323.615 77.1364 li
318.92 79.5765 li
314.225 82.1594 li
309.53 84.8085 li
304.835 87.4495 li
300.14 90.0204 li
295.445 92.4705 li
290.75 94.7675 li
286.055 96.8915 li
281.361 98.8364 li
276.666 100.606 li
271.971 102.215 li
267.276 103.68 li
262.581 105.022 li
257.886 106.262 li
253.191 107.42 li
248.496 108.514 li
243.801 109.56 li
434.15 73.5884 mo
434.15 73.5884 li
429.455 74.2685 li
424.76 74.8705 li
420.065 75.3795 li
415.37 75.7755 li
410.675 76.0435 li
405.98 76.1705 li
401.286 76.1475 li
396.591 75.9714 li
391.896 75.6525 li
387.201 75.2084 li
382.505 74.6745 li
377.811 74.0925 li
373.116 73.5225 li
368.421 73.0275 li
363.726 72.6765 li
359.031 72.5364 li
354.336 72.6685 li
349.641 73.1205 li
344.946 73.9185 li
340.251 75.0745 li
335.556 76.5745 li
330.861 78.3845 li
326.166 80.4565 li
321.471 82.7255 li
316.777 85.1235 li
312.082 87.5815 li
307.386 90.0334 li
302.691 92.4255 li
297.996 94.7125 li
293.302 96.8635 li
288.607 98.8615 li
283.912 100.7 li
279.217 102.384 li
274.522 103.924 li
269.827 105.335 li
265.132 106.636 li
260.437 107.845 li
255.742 108.981 li
251.047 110.059 li
246.352 111.094 li
436.701 75.1674 mo
436.701 75.1674 li
432.006 75.8745 li
427.311 76.5125 li
422.616 77.0674 li
417.921 77.5245 li
413.227 77.8685 li
408.532 78.0875 li
403.837 78.1755 li
399.142 78.1295 li
394.447 77.9594 li
389.752 77.6804 li
385.057 77.3224 li
380.362 76.9255 li
375.667 76.5385 li
370.972 76.2175 li
366.277 76.0245 li
361.582 76.0165 li
356.887 76.2465 li
352.192 76.7565 li
347.497 77.5695 li
342.802 78.6955 li
338.107 80.1225 li
333.412 81.8224 li
328.718 83.7504 li
324.023 85.8535 li
319.328 88.0705 li
314.633 90.3415 li
309.938 92.6094 li
305.243 94.8254 li
300.548 96.9504 li
295.853 98.9575 li
291.158 100.83 li
286.463 102.564 li
281.768 104.162 li
277.073 105.633 li
272.378 106.991 li
267.683 108.25 li
262.988 109.429 li
258.293 110.543 li
253.598 111.605 li
248.904 112.628 li
439.252 76.7455 mo
439.252 76.7455 li
434.557 77.4794 li
429.862 78.1525 li
425.168 78.7535 li
420.473 79.2685 li
415.778 79.6855 li
411.083 79.9955 li
406.388 80.1904 li
401.693 80.2704 li
396.998 80.2424 li
392.303 80.1225 li
387.608 79.9335 li
382.913 79.7114 li
378.218 79.5004 li
373.523 79.3475 li
368.828 79.3044 li
364.133 79.4225 li
359.438 79.7455 li
354.743 80.3115 li
350.048 81.1395 li
345.354 82.2375 li
340.659 83.5955 li
335.964 85.1895 li
331.269 86.9814 li
326.574 88.9255 li
321.879 90.9705 li
317.184 93.0615 li
312.489 95.1525 li
307.794 97.1984 li
303.099 99.1674 li
298.404 101.035 li
293.709 102.788 li
289.014 104.42 li
284.319 105.935 li
279.624 107.338 li
274.929 108.643 li
270.234 109.863 li
265.539 111.013 li
260.845 112.104 li
256.15 113.15 li
251.455 114.162 li
441.804 78.3215 mo
441.804 78.3215 li
437.109 79.0804 li
432.414 79.7885 li
427.719 80.4324 li
423.024 81.0035 li
418.329 81.4904 li
413.634 81.8845 li
408.939 82.1815 li
404.244 82.3804 li
399.549 82.4875 li
394.854 82.5154 li
390.159 82.4865 li
385.464 82.4294 li
380.769 82.3815 li
376.074 82.3845 li
371.379 82.4835 li
366.684 82.7184 li
361.989 83.1304 li
357.295 83.7475 li
352.6 84.5905 li
347.905 85.6614 li
343.21 86.9565 li
338.515 88.4525 li
333.82 90.1174 li
329.125 91.9125 li
324.43 93.7944 li
319.735 95.7184 li
315.04 97.6415 li
310.345 99.5295 li
305.65 101.352 li
300.955 103.088 li
296.26 104.727 li
291.565 106.262 li
286.87 107.696 li
282.175 109.036 li
277.48 110.291 li
272.786 111.472 li
268.091 112.593 li
263.396 113.663 li
258.701 114.694 li
254.006 115.695 li
444.355 79.8945 mo
444.355 79.8945 li
439.66 80.6774 li
434.965 81.4164 li
430.27 82.1025 li
425.575 82.7255 li
420.88 83.2775 li
416.185 83.7504 li
411.49 84.1415 li
406.795 84.4504 li
402.1 84.6815 li
397.405 84.8464 li
392.711 84.9645 li
388.015 85.0594 li
383.32 85.1625 li
378.625 85.3094 li
373.93 85.5364 li
369.236 85.8804 li
364.541 86.3725 li
359.846 87.0385 li
355.151 87.8935 li
350.456 88.9415 li
345.761 90.1774 li
341.066 91.5834 li
336.371 93.1324 li
331.676 94.7914 li
326.981 96.5245 li
322.286 98.2935 li
317.591 100.063 li
312.896 101.803 li
308.201 103.49 li
303.506 105.104 li
298.811 106.636 li
294.116 108.082 li
289.421 109.443 li
284.727 110.723 li
280.032 111.931 li
275.337 113.076 li
270.642 114.169 li
265.947 115.219 li
261.252 116.236 li
256.557 117.227 li
446.906 81.4634 mo
446.906 81.4634 li
442.211 82.2685 li
437.516 83.0364 li
432.821 83.7595 li
428.126 84.4304 li
423.431 85.0414 li
418.736 85.5875 li
414.041 86.0645 li
409.346 86.4725 li
404.652 86.8174 li
399.957 87.1064 li
395.262 87.3564 li
390.567 87.5884 li
385.871 87.8285 li
381.177 88.1054 li
376.482 88.4495 li
371.787 88.8904 li
367.092 89.4554 li
362.397 90.1645 li
357.702 91.0305 li
353.007 92.0585 li
348.312 93.2415 li
343.617 94.5665 li
338.922 96.0104 li
334.227 97.5475 li
329.532 99.1454 li
324.838 100.774 li
320.143 102.405 li
315.447 104.012 li
310.752 105.575 li
306.057 107.079 li
301.362 108.514 li
296.668 109.878 li
291.973 111.17 li
287.278 112.395 li
282.583 113.56 li
277.888 114.672 li
273.193 115.74 li
268.498 116.772 li
263.803 117.775 li
259.108 118.757 li
449.457 83.0265 mo
449.457 83.0265 li
444.762 83.8525 li
440.067 84.6464 li
435.372 85.4035 li
430.677 86.1174 li
425.982 86.7824 li
421.288 87.3925 li
416.593 87.9465 li
411.898 88.4435 li
407.203 88.8884 li
402.508 89.2885 li
397.813 89.6574 li
393.118 90.0114 li
388.423 90.3715 li
383.728 90.7634 li
379.033 91.2104 li
374.338 91.7375 li
369.643 92.3674 li
364.948 93.1144 li
360.253 93.9915 li
355.558 95.0004 li
350.863 96.1375 li
346.168 97.3904 li
341.473 98.7424 li
336.779 100.17 li
332.084 101.649 li
327.389 103.154 li
322.694 104.661 li
317.999 106.15 li
313.304 107.602 li
308.609 109.007 li
303.914 110.356 li
299.219 111.646 li
294.524 112.877 li
289.829 114.053 li
285.134 115.179 li
280.439 116.261 li
275.744 117.306 li
271.049 118.322 li
266.354 119.313 li
261.659 120.286 li
452.008 84.5844 mo
452.008 84.5844 li
447.313 85.4274 li
442.618 86.2455 li
437.923 87.0334 li
433.229 87.7844 li
428.534 88.4965 li
423.839 89.1645 li
419.144 89.7855 li
414.449 90.3615 li
409.754 90.8935 li
405.059 91.3915 li
400.364 91.8625 li
395.669 92.3234 li
390.974 92.7895 li
386.279 93.2805 li
381.584 93.8174 li
376.889 94.4205 li
372.194 95.1054 li
367.499 95.8864 li
362.804 96.7725 li
358.109 97.7665 li
353.414 98.8635 li
348.72 100.054 li
344.025 101.325 li
339.33 102.658 li
334.635 104.033 li
329.94 105.43 li
325.245 106.829 li
320.55 108.214 li
315.855 109.57 li
311.16 110.888 li
306.465 112.161 li
301.77 113.386 li
297.075 114.563 li
292.38 115.695 li
287.685 116.786 li
282.99 117.841 li
278.295 118.867 li
273.6 119.867 li
268.905 120.847 li
264.211 121.813 li
454.559 86.1364 mo
454.559 86.1364 li
449.864 86.9955 li
445.17 87.8344 li
440.475 88.6475 li
435.78 89.4324 li
431.085 90.1844 li
426.39 90.9025 li
421.695 91.5815 li
417 92.2255 li
412.305 92.8344 li
407.61 93.4145 li
402.915 93.9755 li
398.22 94.5265 li
393.525 95.0834 li
388.83 95.6614 li
384.135 96.2755 li
379.44 96.9415 li
374.745 97.6745 li
370.05 98.4844 li
365.355 99.3785 li
360.661 100.358 li
355.966 101.421 li
351.271 102.559 li
346.576 103.761 li
341.881 105.013 li
337.186 106.3 li
332.491 107.604 li
327.796 108.911 li
323.101 110.206 li
318.406 111.479 li
313.711 112.721 li
309.016 113.928 li
304.321 115.097 li
299.626 116.227 li
294.931 117.321 li
290.236 118.382 li
285.541 119.414 li
280.846 120.421 li
276.152 121.408 li
271.457 122.379 li
266.762 123.338 li
457.111 87.6835 mo
457.111 87.6835 li
452.416 88.5565 li
447.721 89.4114 li
443.026 90.2475 li
438.331 91.0615 li
433.636 91.8484 li
428.941 92.6074 li
424.246 93.3375 li
419.551 94.0385 li
414.856 94.7114 li
410.161 95.3635 li
405.466 95.9985 li
400.771 96.6274 li
396.076 97.2604 li
391.381 97.9105 li
386.686 98.5895 li
381.991 99.3105 li
377.296 100.083 li
372.602 100.918 li
367.907 101.818 li
363.212 102.787 li
358.517 103.82 li
353.822 104.914 li
349.127 106.059 li
344.432 107.243 li
339.737 108.454 li
335.042 109.68 li
330.347 110.908 li
325.652 112.127 li
320.957 113.33 li
316.262 114.509 li
311.567 115.659 li
306.872 116.779 li
302.177 117.87 li
297.482 118.931 li
292.788 119.966 li
288.093 120.977 li
283.398 121.97 li
278.703 122.945 li
274.008 123.908 li
269.313 124.861 li
459.662 89.2255 mo
459.662 89.2255 li
454.967 90.1085 li
450.272 90.9794 li
445.577 91.8344 li
440.882 92.6714 li
436.187 93.4885 li
431.492 94.2824 li
426.797 95.0544 li
422.102 95.8024 li
417.407 96.5305 li
412.712 97.2404 li
408.018 97.9384 li
403.323 98.6324 li
398.628 99.3295 li
393.932 100.038 li
389.238 100.772 li
384.543 101.538 li
379.848 102.344 li
375.153 103.199 li
370.458 104.105 li
365.763 105.064 li
361.068 106.074 li
356.373 107.131 li
351.678 108.227 li
346.983 109.355 li
342.288 110.504 li
337.593 111.665 li
332.898 112.828 li
328.204 113.984 li
323.509 115.128 li
318.813 116.253 li
314.118 117.356 li
309.423 118.436 li
304.729 119.493 li
300.034 120.526 li
295.339 121.539 li
290.644 122.534 li
285.949 123.513 li
281.254 124.479 li
276.559 125.434 li
271.864 126.382 li
462.213 90.7614 mo
462.213 90.7614 li
457.518 91.6545 li
452.823 92.5375 li
448.128 93.4084 li
443.433 94.2654 li
438.738 95.1064 li
434.043 95.9294 li
429.348 96.7355 li
424.654 97.5245 li
419.959 98.2964 li
415.264 99.0544 li
410.569 99.8044 li
405.874 100.55 li
401.179 101.299 li
396.484 102.058 li
391.789 102.835 li
387.094 103.638 li
382.399 104.472 li
377.704 105.343 li
373.009 106.254 li
368.314 107.206 li
363.619 108.196 li
358.924 109.223 li
354.229 110.281 li
349.534 111.362 li
344.839 112.46 li
340.145 113.568 li
335.45 114.677 li
330.755 115.782 li
326.06 116.877 li
321.364 117.958 li
316.67 119.022 li
311.975 120.069 li
307.28 121.097 li
302.585 122.108 li
297.89 123.102 li
293.195 124.083 li
288.5 125.051 li
283.805 126.009 li
279.11 126.959 li
274.415 127.902 li
@
0 gry
true set_gvm
%ADOBeginSubsetFont: BRUPMX+SFBMR9 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /BRUPMX+SFBMR9 def/FontInfo 5 dict dup begin/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdup 58 /colon putdup 73 /I putdup 97 /a putdup 101 /e putdup 105 /i putdup 110 /n putdup 111 /o putdup 114 /r putdup 116 /t putdef/FontBBox {0 -222 497 751} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-14 1 473 485 664 671 693 710] def/OtherBlues [-174 -166] def/BlueScale 0.03963 def/StdHW [100] def/StdVW [50] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings12 dict dup begin/parenleft <1C60D8A8C9B08A95BF0CDA3233059611B921B8F58187DBAFB56F3B8677F51309E28DD1EF5C55C979338B4EA6C1CFF2647F06834C4B8B307049E9AFB4A05E0A0BD57E02BF5520B649018E74BEFCF18114D24E846067ADF935F0F099A090362D4059607B8B165AB71F2892> |-/parenright <1C60D8A8C9B08A95BF0CDA3233059611B921B8F58187C441EC279878988B083D59136B94272CECC3AC5F0E7422C8F1B13FB7F0B978ECFC2C183467C4F2B897F55F519204E74A329DB2AF52BA0DD35150139D57E66D19A67150A9C3B73A4E3230073EBBA134EE0C72155D73BE> |-/colon <1C60D8A8C9B08A95687D368BB817D7C434780375DB12D12D8F34C6E906E1918DFC21B5577C48ACE03379A16CB81152F44D> |-/I <1C60D8A8C9B08A957761BED022D6A215AA35D502DDAC3C89AA943C3F144F6A02C19DAC18B598> |-/a <1C60D8A8C9B08A95D993508332BEB93532617328D4AA16A21126FD4339A7267BAB4BFC54B21F9F687FBBE353114866D2425D3AC8DB437E88FD8AA9D44B2FF6AF54D5A44B5A2CDF1541284A28FCF23AD24DDC10AEE0F02A41D60CA60EC76922C1629B8749DC9522D24F3EDA487162593CB59BBAA8C4B9E13A584EBC9E8B8809A9F53C637114D2C41C063580A066FFA9FD6AC68EA0871B753623> |-/e <1C60D8A8C9B08A95A742A9906DE57A70B7BD3C73C800745B0159652D5EEF4A756A3818601914B41167B2B3888A88CF3D423F8C863B547082CB6DD6BC7298824D46B274D6EE96FCA994E01C6AA0E19D9B26CDE986B77F7B8806E9861B5B10E69345C2DB0CF58A50C7CB9526A505ABFD67D5C1413AB3C1CCF653297C6B1B7BFB94DCB7C2A7745F18F04BBFCB7D15EE8501E011> |-/i <1C60D8A8C9B08A9546498690C450B690C1FF0A57966B345C6386397A9684730BE2C90A13E624FD1336D0137C0EB4B16F52> |-/n <1C60D8A8C9B08A95D388AD7207A1C39FD8645930F4B1A54C61E395EBD035086EA4FD3273213B7014C5C3D164D08EA8CA84B9D0CE6957EC2BDF01D7C9E86F6905BA8D5CB223D1F9DBD0489B0DFFBD2CA8FA2AA2F084614FFE6592879BC1E6A8D0A04ADC93ACB0> |-/o <1C60D8A8C9B08A95CE4E96CBBF9FDFCE091CB0601A08D671588DA4A1114EDFF39A4073ECEA4440F3094D8A68EEED786BFF5A9452680A29A1E05D2CA82CE3D547073682B87D96E6424DE5A06C11C9F3AD69F5565A9CD8F1959F084DCA075E4D80A1B14A8FB896A53D53C6FAC141A870AAC975F181FB> |-/r <1C60D8A8C9B08A9596623DC7B1EE45266C70823FA15F61F016F87CEBFF83BBDC4903D1627D6886C45C164EF7B754301E17ECEEF0FBC8FE65CB1B43CB> |-/t <1C60D8A8C9B08A951331D9FB130300BB857E1F82E68390D7DA4E3F419B2ECA13F5D05C9DDC67DADB5795185AEC8D0353507930A7E9B01D2C6ABAF3F6AE96FB760A320C7FDD1B1F25E383A590D26AB7C5D3866C287EFEA4C191> |-/.notdef <1C60D8A8C9B08A95113D511DE30953> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/ZRVCLC+SFBMR9 /BRUPMX+SFBMR9 findfont ct_VMDictPut/ZRVCLC+SFBMR9*1 [40{/.notdef}rp /parenleft /parenright 16{/.notdef}rp /colon 14{/.notdef}rp /I 23{/.notdef}rp /a 3{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]ZRVCLC+SFBMR9 nfZRVCLC+SFBMR9*1 [8.96638 0 0 -8.96638 0 0 ]msf269.28 140.659 mo(\(a\)Iteration:)[3.71884 4.56058 7.55869 2.52066 3.4783 4.31989 3.23773 4.56058 3.4783 2.03564 4.80096 4.80124 0 ]xshtrue set_gvm
%ADOBeginSubsetFont: NOGAAA+HFBRMI9 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /NOGAAA+HFBRMI9 def/FontInfo 6 dict dup begin/Notice (Part of the hfbright font family by Harald Harders, h.harders@tu-bs.de) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 116 /t putdef/FontBBox {0 -8 440 608} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/StdHW [56] def/StdVW [53] def/StemSnapH [20 43 56 65] def/StemSnapV [43 47 53 61 67 72 79 86] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/t <1C60D8A8C9B7361F0DA76049CFDA7DEC855197158B8CE0946B9DD13CEEEF43E5F5BE9251BF38700208855E1C146C49FB04A8DA46293A20B080FF073A08E1BB0A5A64EAC0F9409E62B85EF8BA4C89129476E3436E3003A341EA4016474F5F3C4FA4E4489D8B391691AD8DCB7E8C8E8BEBC7A49668D3FD7BD2BAB4815BBC04F614230065FD264A36FDC79C5B1427C07286A012DBC283B6D5400233C2EE6A8F31544D5D7497D3AEFF8FA6B28BAC41235830BD61A5> |-/.notdef <1C60D8A8C9B5EE31F4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/ZRVCLD+HFBRMI9 /NOGAAA+HFBRMI9 findfont ct_VMDictPut/ZRVCLD+HFBRMI9*1 [116{/.notdef}rp /t 139{/.notdef}rp]ZRVCLD+HFBRMI9 nfZRVCLD+HFBRMI9*1 [8.96638 0 0 -8.96638 0 0 ]msf325.08 140.659 mo(t)shtrue set_gvm
%ADOBeginSubsetFont: OIHRMX+HFBR9 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /OIHRMX+HFBR9 def/FontInfo 6 dict dup begin/Notice (Part of the hfbright font family by Harald Harders, h.harders@tu-bs.de) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 49 /one putdup 61 /equal putdef/FontBBox {0 -32 747 679} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/StdHW [56] def/StdVW [66] def/StemSnapH [21 32 37 41 49 52 56 60 67 80] def/StemSnapV [28 41 53 60 66 70 80 255] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/one <1C60D8A8C9B780B36597A08AF47E34E7C1E1F681570A58EF4F56D20931E5E5D78376A6BA0B59A23FAE66F2956BF52F6B743A650B5E25FB2B34093C28F7F8043557AEE2DAD674389D6C485B6E60B14C7B3EFE> |-/equal <1C60D8A8C9B6D24F7363ECD96CAD9362FC526B23FCAAAE84AABEABA552D038EB6F56BA276AE19498D06B5CF8B267E4BACE3349FA8A02A6053B7A384A15D4E3DAAFFDC55A1A93C8B58C50243C28A81F14141933C03FE9844AC657CD389922342A84B3F8B41D216238A6C07A0FB67B5006FC76104932BC09BFFD4646> |-/.notdef <1C60D8A8C9B5EE31F4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/ZRVCLE+HFBR9 /OIHRMX+HFBR9 findfont ct_VMDictPut/ZRVCLE+HFBR9*1 [49{/.notdef}rp /one 11{/.notdef}rp /equal 194{/.notdef}rp]ZRVCLE+HFBR9 nfZRVCLE+HFBR9*1 [8.96638 0 0 -8.96638 0 0 ]msf331.8 140.659 mo(=1)[9.71988 0 ]xsh159.936 217.878 mo
154.579 220.577 li
160.434 221.881 li
157.943 220.159 li
f
0.672478 lw
370.339 193.718 mo
157.943 220.158 li
@
377.973 254.684 mo
383.471 257.082 li
380.736 251.744 li
381.001 254.761 li
f
309.304 187.388 mo
381.001 254.761 li
@
324.409 157.389 mo
322.392 151.74 li
320.375 157.389 li
322.392 155.13 li
f
322.392 199.687 mo
322.392 155.13 li
@
ZRVCKZ+HFBRMI10*1 [6.45581 0 0 -6.45581 0 0 ]msf147.138 222.846 mo(X)sh385.695 259.351 mo(Y)sh319.963 149.526 mo(Z)sh309.969 200.769 mo
310.842 201.589 li
@
297.982 202.261 mo
298.855 203.081 li
@
285.996 203.754 mo
286.868 204.574 li
@
274.009 205.246 mo
274.882 206.066 li
@
262.023 206.738 mo
262.895 207.558 li
@
250.036 208.23 mo
250.909 209.05 li
@
238.049 209.722 mo
238.922 210.542 li
@
226.063 211.214 mo
226.935 212.034 li
@
214.076 212.706 mo
214.949 213.526 li
@
202.089 214.199 mo
202.962 215.018 li
@
190.103 215.691 mo
190.975 216.511 li
@
178.116 217.183 mo
178.989 218.003 li
@
166.13 218.675 mo
167.002 219.495 li
@
333.942 197.785 mo
334.815 198.605 li
@
345.929 196.293 mo
346.802 197.113 li
@
357.916 194.8 mo
358.788 195.62 li
@
369.902 193.308 mo
370.775 194.128 li
@
327.954 203.638 mo
325.556 203.936 li
@
332.316 207.737 mo
329.919 208.036 li
@
336.679 211.837 mo
334.282 212.135 li
@
341.042 215.936 mo
338.645 216.235 li
@
345.405 220.036 mo
343.007 220.334 li
@
349.767 224.136 mo
347.37 224.434 li
@
354.13 228.235 mo
351.733 228.534 li
@
358.493 232.335 mo
356.096 232.634 li
@
362.855 236.435 mo
360.458 236.733 li
@
367.218 240.534 mo
364.821 240.833 li
@
371.581 244.634 mo
369.184 244.933 li
@
375.944 248.734 mo
373.546 249.032 li
@
380.307 252.833 mo
377.909 253.132 li
@
319.228 195.438 mo
316.83 195.736 li
@
314.865 191.338 mo
312.468 191.637 li
@
310.502 187.239 mo
308.105 187.537 li
@
321.956 199.277 mo
322.828 200.097 li
@
321.956 187.29 mo
322.828 188.11 li
@
321.956 175.304 mo
322.828 176.124 li
@
0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf246.387 222.282 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf246.387 222.282 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf272.714 242.357 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf272.714 242.357 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf263.493 227.201 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf263.493 227.201 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf255.87 240.163 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf255.87 240.163 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf218.759 239.046 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf218.759 239.046 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf254.252 240.983 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf254.252 240.983 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf225.746 222.48 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf225.746 222.48 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf229.259 237.069 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf229.259 237.069 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf277.136 227.613 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf277.136 227.613 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf237.115 252.633 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf237.115 252.633 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf238.096 238.423 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf238.096 238.423 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf239.953 253.242 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf239.953 253.242 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf228.645 241.564 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf228.645 241.564 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf273.93 246.529 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf273.93 246.529 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf266.053 242.552 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf266.053 242.552 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf260.941 237.044 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf260.941 237.044 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf211.921 231.524 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf211.921 231.524 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf242.497 232.459 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf242.497 232.459 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf233.282 235.191 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf233.282 235.191 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf236.645 247.396 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf236.645 247.396 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf255.994 249.184 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf255.994 249.184 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf261.105 248.694 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf261.105 248.694 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf215.923 239.704 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf215.923 239.704 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf278.245 236.065 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf278.245 236.065 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf246.314 223.859 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf246.314 223.859 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf268.275 245.574 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf268.275 245.574 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf216.505 245.156 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf216.505 245.156 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf237.918 241.25 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf237.918 241.25 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf254.669 245.331 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf254.669 245.331 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf238.881 241.897 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf238.881 241.897 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf247.139 231.907 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf247.139 231.907 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf235.442 233.624 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf235.442 233.624 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf234.637 237.103 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf234.637 237.103 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf333.482 228.756 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf333.482 228.756 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf339.325 241.001 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf339.325 241.001 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf337.671 254.857 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf337.671 254.857 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf327.648 233.345 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf327.648 233.345 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf331.611 255.098 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf331.611 255.098 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf369.995 242.495 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf369.995 242.495 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf356.691 241.603 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf356.691 241.603 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf361.852 237.452 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf361.852 237.452 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf334.513 235.125 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf334.513 235.125 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf351.01 242.865 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf351.01 242.865 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf352.377 227.084 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf352.377 227.084 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf375.702 254.37 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf375.702 254.37 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf367.809 242.613 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf367.809 242.613 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf353.036 246.81 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf353.036 246.81 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf333.138 241.559 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf333.138 241.559 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf316.878 245.156 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf316.878 245.156 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf378.275 222.824 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf378.275 222.824 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf341.084 240.451 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf341.084 240.451 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf307.04 237.594 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf307.04 237.594 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf332.325 231.667 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf332.325 231.667 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf341.946 243.742 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf341.946 243.742 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf318.149 233.434 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf318.149 233.434 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf321.859 230.875 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf321.859 230.875 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf349.235 237.559 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf349.235 237.559 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf303.198 227.029 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf303.198 227.029 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf373.326 233.829 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf373.326 233.829 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf326.468 232.146 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf326.468 232.146 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf342.519 233.867 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf342.519 233.867 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf367.919 244.13 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf367.919 244.13 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf324.062 233.591 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf324.062 233.591 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf364.746 239.854 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf364.746 239.854 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf334.32 237.701 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf334.32 237.701 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf330.25 235.512 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf330.25 235.512 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf361.654 230.014 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf361.654 230.014 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf374.829 233.949 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf374.829 233.949 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf335.586 219.706 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf335.586 219.706 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf353.518 245.741 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf353.518 245.741 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf341.363 236.115 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf341.363 236.115 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf351.971 235.589 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf351.971 235.589 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf294.699 236.113 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf294.699 236.113 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf358.954 236.449 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf358.954 236.449 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf338.718 245.863 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf338.718 245.863 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf295.816 202.482 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf295.816 202.482 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf287.728 206.432 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf287.728 206.432 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf287.361 208.383 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf287.361 208.383 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf282.714 206.701 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf282.714 206.701 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf286.028 208.182 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf286.028 208.182 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf296.694 206.313 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf296.694 206.313 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.3 211.539 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.3 211.539 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf278.563 208.695 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf278.563 208.695 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf311.178 213.792 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf311.178 213.792 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf285.591 211.341 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf285.591 211.341 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf269.937 210.958 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf269.937 210.958 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf292.595 206.388 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf292.595 206.388 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf294.338 204.836 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf294.338 204.836 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf282.318 204.44 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf282.318 204.44 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.873 215.065 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.873 215.065 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf280.15 214.117 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf280.15 214.117 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf289.865 208.935 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf289.865 208.935 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.129 209.068 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.129 209.068 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.521 203.68 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.521 203.68 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf296.356 217.953 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf296.356 217.953 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf279.285 213.334 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf279.285 213.334 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf303.875 210.701 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf303.875 210.701 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf288.241 207.086 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf288.241 207.086 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf303.795 211.326 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf303.795 211.326 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf297.675 215.172 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf297.675 215.172 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf283.932 208.423 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf283.932 208.423 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.569 206.307 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.569 206.307 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.238 203.1 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.238 203.1 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf284.016 210.107 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf284.016 210.107 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf289.23 210.779 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf289.23 210.779 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.928 207.297 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.928 207.297 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.033 204.716 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.033 204.716 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.477 214.923 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.477 214.923 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf294.533 210.135 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf294.533 210.135 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf290.593 214.475 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf290.593 214.475 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.175 214.834 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.175 214.834 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.245 215.17 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.245 215.17 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf269.958 208.742 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf269.958 208.742 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf297.55 209.237 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf297.55 209.237 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf288.621 210.607 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf288.621 210.607 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf290.696 208.847 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf290.696 208.847 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf281.519 199.49 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf281.519 199.49 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf295.027 209.997 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf295.027 209.997 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf297.658 210.798 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf297.658 210.798 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf292.562 208.131 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf292.562 208.131 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf294.579 214.376 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf294.579 214.376 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf297.638 211.768 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf297.638 211.768 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf290.674 209.919 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf290.674 209.919 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.639 207.935 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.639 207.935 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf287.643 210.753 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf287.643 210.753 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.107 209.784 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.107 209.784 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf272.795 200.492 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf272.795 200.492 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf290.515 205.164 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf290.515 205.164 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.943 211.073 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.943 211.073 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf287.966 205.477 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf287.966 205.477 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf289.493 218.589 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf289.493 218.589 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf282.769 208.661 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf282.769 208.661 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf295.118 214.359 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf295.118 214.359 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf296.646 208.409 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf296.646 208.409 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.222 212.281 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.222 212.281 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf289.28 204.427 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf289.28 204.427 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf285.948 209.902 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf285.948 209.902 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf289.902 216.959 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf289.902 216.959 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.782 211.693 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.782 211.693 mo(!)shZRVCLB+*1 [5.64882 0 0 -5.64882 0 0 ]msf296.25 212.63 mo( !)[0 0 ]xsh255.25 226.03 mo("#)[0 0 ]xsh316.75 240.13 mo($%)[0 0 ]xsh0.11208 lw
357.25 181.409 mo
357.25 181.409 li
358.995 183.051 li
360.74 184.693 li
362.486 186.335 li
364.23 187.977 li
365.976 189.618 li
367.721 191.258 li
369.466 192.898 li
371.211 194.538 li
372.956 196.178 li
374.701 197.818 li
376.446 199.458 li
378.191 201.098 li
379.937 202.738 li
381.682 204.377 li
383.427 206.017 li
385.172 207.656 li
386.917 209.295 li
388.662 210.932 li
390.407 212.567 li
392.152 214.197 li
393.898 215.82 li
395.643 217.431 li
397.388 219.026 li
399.133 220.6 li
400.878 222.149 li
402.623 223.672 li
404.368 225.174 li
406.113 226.663 li
407.858 228.154 li
409.604 229.664 li
411.348 231.212 li
413.094 232.811 li
414.839 234.467 li
416.584 236.178 li
418.329 237.934 li
420.074 239.717 li
421.819 241.508 li
423.564 243.293 li
425.309 245.06 li
427.055 246.802 li
352.156 182.034 mo
352.156 182.034 li
353.901 183.677 li
355.646 185.321 li
357.391 186.965 li
359.136 188.608 li
360.881 190.25 li
362.627 191.891 li
364.371 193.532 li
366.117 195.172 li
367.862 196.812 li
369.607 198.452 li
371.352 200.092 li
373.097 201.732 li
374.842 203.372 li
376.588 205.011 li
378.332 206.651 li
380.078 208.29 li
381.823 209.928 li
383.568 211.564 li
385.313 213.197 li
387.058 214.823 li
388.803 216.439 li
390.548 218.04 li
392.293 219.618 li
394.039 221.17 li
395.784 222.689 li
397.529 224.177 li
399.274 225.639 li
401.019 227.087 li
402.764 228.542 li
404.509 230.026 li
406.254 231.561 li
407.999 233.162 li
409.745 234.836 li
411.489 236.578 li
413.235 238.371 li
414.98 240.195 li
416.725 242.026 li
418.47 243.845 li
420.215 245.639 li
421.96 247.401 li
347.062 182.654 mo
347.062 182.654 li
348.807 184.297 li
350.552 185.942 li
352.297 187.588 li
354.042 189.234 li
355.787 190.879 li
357.532 192.522 li
359.277 194.165 li
361.022 195.806 li
362.768 197.446 li
364.512 199.086 li
366.258 200.727 li
368.003 202.366 li
369.748 204.006 li
371.493 205.645 li
373.238 207.285 li
374.983 208.924 li
376.729 210.561 li
378.473 212.195 li
380.219 213.825 li
381.964 215.446 li
383.709 217.054 li
385.454 218.64 li
387.199 220.198 li
388.944 221.721 li
390.689 223.204 li
392.434 224.648 li
394.18 226.062 li
395.925 227.464 li
397.67 228.878 li
399.415 230.334 li
401.16 231.858 li
402.905 233.467 li
404.65 235.165 li
406.395 236.945 li
408.14 238.784 li
409.886 240.657 li
411.63 242.533 li
413.376 244.391 li
415.121 246.215 li
416.866 247.999 li
341.967 183.266 mo
341.967 183.266 li
343.712 184.907 li
345.457 186.552 li
347.203 188.202 li
348.948 189.852 li
350.693 191.502 li
352.438 193.149 li
354.183 194.795 li
355.928 196.438 li
357.673 198.079 li
359.418 199.72 li
361.163 201.36 li
362.909 203 li
364.654 204.64 li
366.399 206.279 li
368.144 207.919 li
369.889 209.557 li
371.634 211.193 li
373.379 212.826 li
375.124 214.452 li
376.87 216.066 li
378.614 217.661 li
380.36 219.23 li
382.105 220.763 li
383.85 222.25 li
385.595 223.688 li
387.34 225.08 li
389.085 226.438 li
390.83 227.787 li
392.575 229.157 li
394.321 230.585 li
396.066 232.1 li
397.811 233.722 li
399.556 235.454 li
401.301 237.281 li
403.046 239.176 li
404.791 241.104 li
406.536 243.032 li
408.281 244.932 li
410.027 246.79 li
411.771 248.597 li
336.873 183.871 mo
336.873 183.871 li
338.618 185.506 li
340.363 187.149 li
342.108 188.8 li
343.854 190.456 li
345.598 192.113 li
347.344 193.768 li
349.089 195.419 li
350.834 197.067 li
352.579 198.711 li
354.324 200.353 li
356.069 201.994 li
357.814 203.634 li
359.559 205.274 li
361.304 206.913 li
363.05 208.552 li
364.795 210.19 li
366.54 211.825 li
368.285 213.455 li
370.03 215.075 li
371.775 216.681 li
373.52 218.262 li
375.265 219.809 li
377.011 221.309 li
378.755 222.754 li
380.501 224.138 li
382.246 225.469 li
383.991 226.763 li
385.736 228.053 li
387.481 229.376 li
389.226 230.777 li
390.971 232.289 li
392.716 233.932 li
394.462 235.707 li
396.207 237.591 li
397.952 239.55 li
399.697 241.541 li
401.442 243.525 li
403.187 245.472 li
404.932 247.364 li
406.677 249.195 li
331.779 184.468 mo
331.779 184.468 li
333.524 186.091 li
335.269 187.727 li
337.014 189.376 li
338.759 191.036 li
340.504 192.702 li
342.249 194.369 li
343.995 196.031 li
345.739 197.687 li
347.485 199.338 li
349.23 200.984 li
350.975 202.626 li
352.72 204.268 li
354.465 205.908 li
356.21 207.547 li
357.955 209.186 li
359.7 210.822 li
361.445 212.456 li
363.191 214.082 li
364.936 215.696 li
366.681 217.29 li
368.426 218.854 li
370.171 220.373 li
371.916 221.834 li
373.661 223.228 li
375.406 224.55 li
377.152 225.811 li
378.896 227.034 li
380.642 228.259 li
382.387 229.535 li
384.132 230.911 li
385.877 232.426 li
387.622 234.1 li
389.367 235.928 li
391.112 237.88 li
392.857 239.912 li
394.603 241.973 li
396.348 244.017 li
398.093 246.012 li
399.838 247.94 li
401.583 249.796 li
326.684 185.063 mo
326.684 185.063 li
328.429 186.667 li
330.175 188.286 li
331.92 189.924 li
333.665 191.584 li
335.41 193.259 li
337.155 194.94 li
338.9 196.62 li
340.645 198.292 li
342.39 199.954 li
344.136 201.609 li
345.88 203.256 li
347.626 204.9 li
349.371 206.541 li
351.116 208.181 li
352.861 209.819 li
354.606 211.455 li
356.351 213.085 li
358.096 214.707 li
359.841 216.313 li
361.586 217.894 li
363.332 219.435 li
365.077 220.921 li
366.822 222.337 li
368.567 223.671 li
370.312 224.922 li
372.057 226.104 li
373.802 227.25 li
375.547 228.408 li
377.293 229.636 li
379.038 230.992 li
380.783 232.519 li
382.528 234.234 li
384.273 236.125 li
386.018 238.155 li
387.763 240.268 li
389.508 242.404 li
391.254 244.512 li
392.998 246.557 li
394.743 248.52 li
396.489 250.4 li
321.59 185.661 mo
321.59 185.661 li
323.335 187.239 li
325.08 188.829 li
326.825 190.443 li
328.57 192.09 li
330.316 193.767 li
332.061 195.464 li
333.806 197.167 li
335.551 198.865 li
337.296 200.55 li
339.041 202.221 li
340.786 203.879 li
342.531 205.529 li
344.277 207.173 li
346.021 208.814 li
347.767 210.452 li
349.512 212.086 li
351.257 213.714 li
353.002 215.33 li
354.747 216.926 li
356.492 218.49 li
358.237 220.005 li
359.982 221.452 li
361.727 222.815 li
363.473 224.081 li
365.218 225.252 li
366.963 226.348 li
368.708 227.411 li
370.453 228.5 li
372.198 229.684 li
373.943 231.029 li
375.688 232.577 li
377.434 234.345 li
379.179 236.311 li
380.924 238.427 li
382.669 240.627 li
384.414 242.841 li
386.159 245.015 li
387.904 247.108 li
389.649 249.106 li
391.395 251.008 li
316.496 186.268 mo
316.496 186.268 li
318.241 187.815 li
319.986 189.365 li
321.731 190.939 li
323.476 192.554 li
325.221 194.217 li
326.966 195.921 li
328.711 197.65 li
330.457 199.383 li
332.202 201.104 li
333.947 202.806 li
335.692 204.486 li
337.437 206.149 li
339.182 207.8 li
340.927 209.445 li
342.672 211.083 li
344.418 212.717 li
346.162 214.341 li
347.908 215.95 li
349.653 217.534 li
351.398 219.078 li
353.143 220.561 li
354.888 221.964 li
356.633 223.265 li
358.378 224.456 li
360.123 225.539 li
361.868 226.544 li
363.614 227.522 li
365.359 228.545 li
367.104 229.691 li
368.849 231.032 li
370.594 232.613 li
372.339 234.445 li
374.084 236.496 li
375.829 238.706 li
377.575 240.997 li
379.32 243.292 li
381.065 245.529 li
382.81 247.67 li
384.555 249.699 li
386.3 251.621 li
311.401 186.889 mo
311.401 186.889 li
313.146 188.406 li
314.891 189.909 li
316.637 191.425 li
318.382 192.983 li
320.127 194.605 li
321.872 196.295 li
323.617 198.041 li
325.362 199.815 li
327.107 201.588 li
328.852 203.339 li
330.598 205.059 li
332.343 206.75 li
334.088 208.418 li
335.833 210.071 li
337.578 211.713 li
339.323 213.345 li
341.068 214.966 li
342.813 216.567 li
344.559 218.137 li
346.304 219.657 li
348.049 221.105 li
349.794 222.456 li
351.539 223.69 li
353.284 224.797 li
355.029 225.788 li
356.774 226.698 li
358.519 227.591 li
360.264 228.551 li
362.009 229.667 li
363.755 231.017 li
365.5 232.644 li
367.245 234.55 li
368.99 236.696 li
370.735 239.005 li
372.48 241.389 li
374.225 243.763 li
375.97 246.061 li
377.716 248.245 li
379.461 250.302 li
381.206 252.241 li
306.307 187.529 mo
306.307 187.529 li
308.052 189.02 li
309.797 190.477 li
311.542 191.923 li
313.288 193.399 li
315.032 194.944 li
316.778 196.585 li
318.523 198.321 li
320.268 200.126 li
322.013 201.959 li
323.758 203.782 li
325.503 205.568 li
327.248 207.311 li
328.993 209.013 li
330.739 210.685 li
332.484 212.336 li
334.229 213.971 li
335.974 215.588 li
337.719 217.18 li
339.464 218.733 li
341.209 220.225 li
342.954 221.632 li
344.7 222.927 li
346.445 224.087 li
348.19 225.106 li
349.935 225.999 li
351.68 226.814 li
353.425 227.626 li
355.17 228.532 li
356.915 229.63 li
358.66 231.001 li
360.405 232.686 li
362.15 234.679 li
363.896 236.924 li
365.641 239.335 li
367.386 241.811 li
369.131 244.261 li
370.876 246.615 li
372.621 248.836 li
374.366 250.917 li
376.111 252.867 li
301.213 188.183 mo
301.213 188.183 li
302.958 189.662 li
304.703 191.081 li
306.448 192.457 li
308.193 193.833 li
309.938 195.265 li
311.683 196.807 li
313.429 198.485 li
315.173 200.288 li
316.919 202.174 li
318.664 204.083 li
320.409 205.965 li
322.154 207.791 li
323.899 209.555 li
325.644 211.265 li
327.389 212.934 li
329.134 214.573 li
330.88 216.184 li
332.625 217.762 li
334.37 219.292 li
336.115 220.75 li
337.86 222.11 li
339.605 223.342 li
341.35 224.424 li
343.095 225.353 li
344.841 226.152 li
346.586 226.879 li
348.331 227.621 li
350.076 228.488 li
351.821 229.585 li
353.566 230.995 li
355.311 232.753 li
357.056 234.842 li
358.801 237.194 li
360.546 239.707 li
362.291 242.272 li
364.037 244.79 li
365.782 247.193 li
367.527 249.445 li
369.272 251.542 li
371.017 253.501 li
296.118 188.85 mo
296.118 188.85 li
297.864 190.33 li
299.609 191.728 li
301.354 193.047 li
303.099 194.321 li
304.844 195.612 li
306.589 197 li
308.334 198.549 li
310.079 200.282 li
311.824 202.17 li
313.57 204.144 li
315.314 206.123 li
317.06 208.045 li
318.805 209.879 li
320.55 211.622 li
322.295 213.289 li
324.04 214.901 li
325.785 216.47 li
327.53 218 li
329.275 219.48 li
331.021 220.89 li
332.766 222.202 li
334.511 223.384 li
336.256 224.415 li
338.001 225.293 li
339.746 226.044 li
341.491 226.735 li
343.236 227.462 li
344.982 228.342 li
346.727 229.486 li
348.472 230.974 li
350.217 232.836 li
351.962 235.041 li
353.707 237.508 li
355.452 240.125 li
357.197 242.774 li
358.942 245.353 li
360.688 247.797 li
362.432 250.072 li
364.178 252.18 li
365.923 254.142 li
291.024 189.52 mo
291.024 189.52 li
292.769 191.011 li
294.514 192.405 li
296.259 193.683 li
298.005 194.855 li
299.75 195.974 li
301.495 197.128 li
303.24 198.412 li
304.985 199.895 li
306.73 201.582 li
308.475 203.411 li
310.22 205.281 li
311.965 207.093 li
313.711 208.784 li
315.455 210.343 li
317.201 211.798 li
318.946 213.199 li
320.691 214.595 li
322.436 216.018 li
324.181 217.474 li
325.926 218.947 li
327.671 220.394 li
329.416 221.766 li
331.162 223.016 li
332.907 224.118 li
334.652 225.085 li
336.397 225.975 li
338.142 226.887 li
339.887 227.94 li
341.632 229.252 li
343.377 230.905 li
345.123 232.926 li
346.868 235.279 li
348.613 237.876 li
350.358 240.598 li
352.103 243.324 li
353.848 245.955 li
355.593 248.428 li
357.338 250.718 li
359.083 252.83 li
360.829 254.791 li
285.93 190.152 mo
285.93 190.152 li
287.675 191.631 li
289.42 192.983 li
291.165 194.157 li
292.91 195.116 li
294.655 195.864 li
296.4 196.454 li
298.146 196.982 li
299.891 197.552 li
301.636 198.229 li
303.381 199.013 li
305.126 199.852 li
306.871 200.682 li
308.616 201.477 li
310.361 202.275 li
312.106 203.178 li
313.852 204.306 li
315.596 205.758 li
317.342 207.58 li
319.087 209.743 li
320.832 212.155 li
322.577 214.675 li
324.322 217.149 li
326.067 219.44 li
327.812 221.458 li
329.557 223.184 li
331.303 224.676 li
333.048 226.049 li
334.793 227.456 li
336.538 229.043 li
338.283 230.917 li
340.028 233.121 li
341.773 235.624 li
343.518 238.34 li
345.264 241.151 li
347.009 243.936 li
348.754 246.602 li
350.499 249.091 li
352.244 251.383 li
353.989 253.491 li
355.734 255.445 li
280.836 190.523 mo
280.836 190.523 li
282.58 191.807 li
284.326 192.84 li
286.071 193.503 li
287.816 193.675 li
289.561 193.269 li
291.306 192.268 li
293.051 190.758 li
294.796 188.923 li
296.541 186.998 li
298.287 185.222 li
300.032 183.794 li
301.777 182.875 li
303.522 182.6 li
305.267 183.105 li
307.012 184.506 li
308.757 186.871 li
310.502 190.172 li
312.247 194.267 li
313.993 198.906 li
315.738 203.774 li
317.483 208.539 li
319.228 212.918 li
320.973 216.711 li
322.718 219.833 li
324.463 222.315 li
326.208 224.292 li
327.954 225.965 li
329.698 227.561 li
331.444 229.28 li
333.189 231.262 li
334.934 233.562 li
336.679 236.151 li
338.424 238.938 li
340.169 241.8 li
341.914 244.617 li
343.659 247.295 li
345.405 249.783 li
347.15 252.067 li
348.895 254.163 li
350.64 256.106 li
275.741 190.099 mo
275.741 190.099 li
277.486 190.749 li
279.231 190.87 li
280.977 190.284 li
282.721 188.813 li
284.467 186.341 li
286.212 182.879 li
287.957 178.629 li
289.702 173.997 li
291.447 169.547 li
293.192 165.891 li
294.938 163.562 li
296.682 162.913 li
298.428 164.083 li
300.173 167.016 li
301.918 171.506 li
303.663 177.238 li
305.408 183.82 li
307.153 190.815 li
308.898 197.782 li
310.643 204.321 li
312.388 210.12 li
314.134 214.984 li
315.879 218.852 li
317.624 221.784 li
319.369 223.95 li
321.114 225.588 li
322.859 226.972 li
324.604 228.361 li
326.349 229.961 li
328.095 231.898 li
329.839 234.203 li
331.585 236.822 li
333.33 239.641 li
335.075 242.527 li
336.82 245.353 li
338.565 248.027 li
340.31 250.5 li
342.055 252.765 li
343.8 254.843 li
345.546 256.771 li
270.647 188.988 mo
270.647 188.988 li
272.392 188.879 li
274.137 188.087 li
275.882 186.486 li
277.627 183.991 li
279.372 180.611 li
281.118 176.495 li
282.862 171.986 li
284.608 167.623 li
286.353 164.083 li
288.098 162.047 li
289.843 162.024 li
291.588 164.215 li
293.333 168.47 li
295.079 174.349 li
296.823 181.26 li
298.569 188.6 li
300.314 195.849 li
302.059 202.612 li
303.804 208.624 li
305.549 213.731 li
307.294 217.871 li
309.039 221.07 li
310.784 223.422 li
312.529 225.083 li
314.275 226.26 li
316.02 227.187 li
317.765 228.103 li
319.51 229.222 li
321.255 230.695 li
323 232.599 li
324.745 234.919 li
326.49 237.57 li
328.236 240.417 li
329.98 243.314 li
331.726 246.134 li
333.471 248.789 li
335.216 251.237 li
336.961 253.477 li
338.706 255.53 li
340.451 257.439 li
265.552 189.008 mo
265.552 189.008 li
267.298 188.987 li
269.043 188.522 li
270.788 187.607 li
272.533 186.268 li
274.278 184.58 li
276.023 182.675 li
277.768 180.771 li
279.513 179.187 li
281.259 178.328 li
283.004 178.619 li
284.749 180.378 li
286.494 183.695 li
288.239 188.364 li
289.984 193.933 li
291.729 199.833 li
293.474 205.538 li
295.22 210.674 li
296.964 215.052 li
298.71 218.627 li
300.455 221.447 li
302.2 223.593 li
303.945 225.163 li
305.69 226.263 li
307.435 227.02 li
309.18 227.587 li
310.925 228.14 li
312.67 228.858 li
314.416 229.902 li
316.161 231.38 li
317.906 233.327 li
319.651 235.7 li
321.396 238.393 li
323.141 241.261 li
324.886 244.157 li
326.631 246.956 li
328.377 249.579 li
330.121 251.991 li
331.867 254.195 li
333.612 256.221 li
335.357 258.109 li
260.458 191.025 mo
260.458 191.025 li
262.203 191.846 li
263.948 192.542 li
265.693 193.131 li
267.439 193.628 li
269.184 194.027 li
270.929 194.308 li
272.674 194.46 li
274.419 194.525 li
276.164 194.651 li
277.909 195.102 li
279.654 196.193 li
281.4 198.181 li
283.145 201.125 li
284.89 204.842 li
286.635 208.958 li
288.38 213.04 li
290.125 216.736 li
291.87 219.848 li
293.615 222.329 li
295.361 224.228 li
297.105 225.634 li
298.851 226.64 li
300.596 227.338 li
302.341 227.833 li
304.086 228.253 li
305.831 228.748 li
307.576 229.475 li
309.321 230.573 li
311.066 232.124 li
312.811 234.146 li
314.557 236.578 li
316.302 239.305 li
318.047 242.177 li
319.792 245.052 li
321.537 247.814 li
323.282 250.391 li
325.027 252.757 li
326.772 254.921 li
328.518 256.915 li
330.262 258.779 li
255.364 193.268 mo
255.364 193.268 li
257.109 194.702 li
258.854 196.123 li
260.599 197.527 li
262.344 198.888 li
264.089 200.145 li
265.834 201.205 li
267.58 201.953 li
269.325 202.31 li
271.07 202.301 li
272.815 202.114 li
274.56 202.099 li
276.305 202.669 li
278.05 204.144 li
279.795 206.606 li
281.541 209.854 li
283.286 213.484 li
285.031 217.054 li
286.776 220.217 li
288.521 222.798 li
290.266 224.772 li
292.011 226.205 li
293.756 227.205 li
295.502 227.887 li
297.246 228.377 li
298.992 228.818 li
300.737 229.362 li
302.482 230.163 li
304.227 231.347 li
305.972 232.986 li
307.717 235.08 li
309.462 237.559 li
311.207 240.299 li
312.952 243.156 li
314.698 245.991 li
316.443 248.699 li
318.188 251.218 li
319.933 253.53 li
321.678 255.649 li
323.423 257.609 li
325.168 259.45 li
250.27 194.584 mo
250.27 194.584 li
252.015 196.197 li
253.76 197.806 li
255.505 199.401 li
257.25 200.952 li
258.995 202.405 li
260.74 203.665 li
262.485 204.604 li
264.23 205.097 li
265.975 205.08 li
267.721 204.637 li
269.466 204.047 li
271.211 203.756 li
272.956 204.233 li
274.701 205.791 li
276.446 208.445 li
278.191 211.894 li
279.936 215.654 li
281.682 219.232 li
283.427 222.286 li
285.172 224.668 li
286.917 226.395 li
288.662 227.577 li
290.407 228.368 li
292.152 228.935 li
293.897 229.447 li
295.643 230.073 li
297.388 230.967 li
299.133 232.245 li
300.878 233.968 li
302.623 236.122 li
304.368 238.629 li
306.113 241.364 li
307.858 244.184 li
309.603 246.961 li
311.348 249.602 li
313.093 252.054 li
314.839 254.306 li
316.584 256.378 li
318.329 258.302 li
320.074 260.118 li
245.175 195.356 mo
245.175 195.356 li
246.92 196.993 li
248.666 198.627 li
250.411 200.25 li
252.156 201.844 li
253.901 203.37 li
255.646 204.756 li
257.391 205.887 li
259.136 206.62 li
260.881 206.828 li
262.626 206.479 li
264.371 205.72 li
266.116 204.919 li
267.862 204.588 li
269.607 205.218 li
271.352 207.073 li
273.097 210.067 li
274.842 213.792 li
276.587 217.69 li
278.332 221.253 li
280.077 224.163 li
281.823 226.327 li
283.568 227.822 li
285.313 228.82 li
287.058 229.529 li
288.803 230.154 li
290.548 230.885 li
292.293 231.883 li
294.038 233.257 li
295.784 235.056 li
297.529 237.256 li
299.274 239.772 li
301.019 242.48 li
302.764 245.246 li
304.509 247.951 li
306.254 250.513 li
307.999 252.891 li
309.744 255.081 li
311.489 257.104 li
313.234 258.993 li
314.98 260.785 li
240.081 196.004 mo
240.081 196.004 li
241.826 197.643 li
243.571 199.281 li
245.316 200.913 li
247.061 202.529 li
248.807 204.105 li
250.552 205.59 li
252.297 206.895 li
254.042 207.887 li
255.787 208.411 li
257.532 208.346 li
259.277 207.701 li
261.022 206.697 li
262.767 205.783 li
264.512 205.522 li
266.257 206.396 li
268.003 208.59 li
269.748 211.906 li
271.493 215.836 li
273.238 219.776 li
274.983 223.229 li
276.728 225.934 li
278.473 227.872 li
280.218 229.193 li
281.964 230.127 li
283.709 230.917 li
285.454 231.783 li
287.199 232.896 li
288.944 234.365 li
290.689 236.23 li
292.434 238.46 li
294.179 240.967 li
295.925 243.631 li
297.67 246.326 li
299.415 248.948 li
301.16 251.425 li
302.905 253.725 li
304.65 255.852 li
306.395 257.824 li
308.14 259.679 li
309.885 261.449 li
234.987 196.639 mo
234.987 196.639 li
236.732 198.279 li
238.477 199.918 li
240.222 201.554 li
241.967 203.183 li
243.712 204.789 li
245.457 206.343 li
247.202 207.781 li
248.948 208.996 li
250.693 209.838 li
252.438 210.146 li
254.183 209.818 li
255.928 208.917 li
257.673 207.739 li
259.418 206.804 li
261.163 206.703 li
262.908 207.875 li
264.654 210.405 li
266.398 213.98 li
268.144 218.017 li
269.889 221.894 li
271.634 225.165 li
273.379 227.651 li
275.124 229.417 li
276.869 230.678 li
278.614 231.704 li
280.359 232.743 li
282.105 233.986 li
283.85 235.549 li
285.595 237.469 li
287.34 239.713 li
289.085 242.193 li
290.83 244.797 li
292.575 247.411 li
294.32 249.94 li
296.066 252.328 li
297.811 254.55 li
299.555 256.612 li
301.301 258.539 li
303.046 260.361 li
304.791 262.11 li
229.892 197.274 mo
229.892 197.274 li
231.638 198.913 li
233.382 200.553 li
235.128 202.191 li
236.873 203.826 li
238.618 205.45 li
240.363 207.045 li
242.108 208.573 li
243.853 209.956 li
245.598 211.072 li
247.343 211.759 li
249.089 211.856 li
250.834 211.293 li
252.579 210.191 li
254.324 208.925 li
256.069 208.065 li
257.814 208.199 li
259.559 209.694 li
261.304 212.523 li
263.049 216.271 li
264.795 220.31 li
266.539 224.046 li
268.285 227.111 li
270.03 229.42 li
271.775 231.118 li
273.52 232.464 li
275.265 233.727 li
277.01 235.122 li
278.755 236.781 li
280.5 238.747 li
282.246 240.991 li
283.991 243.431 li
285.736 245.963 li
287.481 248.486 li
289.226 250.919 li
290.971 253.217 li
292.716 255.361 li
294.461 257.363 li
296.207 259.245 li
297.952 261.038 li
299.696 262.768 li
224.798 197.908 mo
224.798 197.908 li
226.543 199.547 li
228.288 201.187 li
230.033 202.827 li
231.779 204.465 li
233.523 206.097 li
235.269 207.716 li
237.014 209.298 li
238.759 210.795 li
240.504 212.118 li
242.249 213.131 li
243.994 213.663 li
245.739 213.568 li
247.484 212.814 li
249.23 211.588 li
250.975 210.326 li
252.72 209.629 li
254.465 210.05 li
256.21 211.861 li
257.955 214.927 li
259.7 218.756 li
261.445 222.715 li
263.19 226.273 li
264.936 229.16 li
266.68 231.382 li
268.426 233.136 li
270.171 234.686 li
271.916 236.267 li
273.661 238.031 li
275.406 240.04 li
277.151 242.273 li
278.896 244.661 li
280.641 247.113 li
282.387 249.541 li
284.132 251.877 li
285.877 254.086 li
287.622 256.157 li
289.367 258.102 li
291.112 259.943 li
292.857 261.709 li
294.602 263.422 li
219.704 198.542 mo
219.704 198.542 li
221.449 200.182 li
223.194 201.822 li
224.939 203.461 li
226.684 205.1 li
228.429 206.737 li
230.174 208.368 li
231.92 209.98 li
233.664 211.546 li
235.41 213.009 li
237.155 214.27 li
238.9 215.18 li
240.645 215.571 li
242.39 215.315 li
244.135 214.428 li
245.88 213.16 li
247.625 211.995 li
249.371 211.533 li
251.116 212.266 li
252.861 214.365 li
254.606 217.597 li
256.351 221.428 li
258.096 225.261 li
259.841 228.651 li
261.586 231.426 li
263.331 233.66 li
265.077 235.566 li
266.821 237.377 li
268.567 239.267 li
270.312 241.32 li
272.057 243.537 li
273.802 245.868 li
275.547 248.235 li
277.292 250.567 li
279.038 252.808 li
280.782 254.932 li
282.528 256.934 li
284.273 258.827 li
286.018 260.633 li
287.763 262.375 li
289.508 264.074 li
214.609 199.176 mo
214.609 199.176 li
216.354 200.816 li
218.1 202.456 li
219.845 204.095 li
221.59 205.735 li
223.335 207.374 li
225.08 209.01 li
226.825 210.638 li
228.57 212.242 li
230.315 213.791 li
232.061 215.219 li
233.805 216.417 li
235.551 217.231 li
237.296 217.5 li
239.041 217.125 li
240.786 216.175 li
242.531 214.95 li
244.276 213.963 li
246.021 213.788 li
247.766 214.838 li
249.512 217.182 li
251.257 220.514 li
253.002 224.299 li
254.747 227.998 li
256.492 231.261 li
258.237 233.997 li
259.982 236.313 li
261.727 238.404 li
263.472 240.449 li
265.218 242.559 li
266.962 244.764 li
268.708 247.035 li
270.453 249.318 li
272.198 251.556 li
273.943 253.708 li
275.688 255.754 li
277.433 257.694 li
279.179 259.541 li
280.923 261.315 li
282.669 263.036 li
284.414 264.722 li
209.515 199.81 mo
209.515 199.81 li
211.26 201.45 li
213.005 203.09 li
214.75 204.73 li
216.495 206.37 li
218.241 208.009 li
219.986 209.647 li
221.731 211.282 li
223.476 212.907 li
225.221 214.503 li
226.966 216.033 li
228.711 217.425 li
230.456 218.563 li
232.202 219.293 li
233.946 219.469 li
235.692 219.027 li
237.437 218.084 li
239.182 216.983 li
240.927 216.241 li
242.672 216.387 li
244.417 217.743 li
246.162 220.288 li
247.907 223.675 li
249.653 227.391 li
251.398 230.971 li
253.143 234.152 li
254.888 236.891 li
256.633 239.301 li
258.378 241.539 li
260.123 243.73 li
261.868 245.934 li
263.613 248.152 li
265.359 250.356 li
267.104 252.507 li
268.849 254.575 li
270.594 256.551 li
272.339 258.435 li
274.084 260.241 li
275.829 261.988 li
277.574 263.692 li
279.32 265.368 li
204.421 200.444 mo
204.421 200.444 li
206.166 202.084 li
207.911 203.724 li
209.656 205.364 li
211.401 207.004 li
213.146 208.643 li
214.891 210.283 li
216.636 211.921 li
218.382 213.554 li
220.127 215.175 li
221.872 216.762 li
223.617 218.273 li
225.362 219.63 li
227.107 220.714 li
228.852 221.378 li
230.597 221.495 li
232.343 221.04 li
234.088 220.175 li
235.833 219.27 li
237.578 218.826 li
239.323 219.309 li
241.068 220.953 li
242.813 223.665 li
244.558 227.075 li
246.304 230.713 li
248.048 234.189 li
249.794 237.303 li
251.539 240.043 li
253.284 242.504 li
255.029 244.805 li
256.774 247.029 li
258.519 249.208 li
260.264 251.343 li
262.009 253.415 li
263.754 255.41 li
265.5 257.323 li
267.245 259.159 li
268.99 260.931 li
270.735 262.654 li
272.48 264.344 li
274.225 266.011 li
199.327 201.079 mo
199.327 201.079 li
201.071 202.718 li
202.817 204.358 li
204.562 205.998 li
206.307 207.638 li
208.052 209.279 li
209.797 210.918 li
211.542 212.557 li
213.287 214.194 li
215.032 215.825 li
216.777 217.442 li
218.523 219.019 li
220.268 220.511 li
222.013 221.836 li
223.758 222.875 li
225.503 223.492 li
227.248 223.588 li
228.993 223.177 li
230.738 222.456 li
232.484 221.807 li
234.229 221.701 li
235.974 222.529 li
237.719 224.438 li
239.464 227.282 li
241.209 230.69 li
242.954 234.237 li
244.699 237.602 li
246.445 240.63 li
248.189 243.324 li
249.935 245.762 li
251.68 248.031 li
253.425 250.193 li
255.17 252.274 li
256.915 254.281 li
258.66 256.213 li
260.405 258.072 li
262.15 259.867 li
263.895 261.61 li
265.641 263.314 li
267.386 264.992 li
269.131 266.654 li
194.232 201.713 mo
194.232 201.713 li
195.977 203.352 li
197.722 204.992 li
199.468 206.632 li
201.212 208.272 li
202.958 209.912 li
204.703 211.552 li
206.448 213.191 li
208.193 214.83 li
209.938 216.467 li
211.683 218.096 li
213.428 219.708 li
215.173 221.274 li
216.918 222.747 li
218.664 224.043 li
220.409 225.049 li
222.154 225.644 li
223.899 225.759 li
225.644 225.445 li
227.389 224.929 li
229.134 224.586 li
230.879 224.842 li
232.625 226.007 li
234.37 228.154 li
236.115 231.091 li
237.86 234.46 li
239.605 237.887 li
241.35 241.106 li
243.095 244.004 li
244.84 246.59 li
246.586 248.931 li
248.33 251.1 li
250.076 253.148 li
251.821 255.104 li
253.566 256.984 li
255.311 258.799 li
257.056 260.561 li
258.801 262.28 li
260.546 263.969 li
262.291 265.637 li
264.036 267.292 li
189.138 202.347 mo
189.138 202.347 li
190.883 203.987 li
192.628 205.627 li
194.373 207.267 li
196.118 208.906 li
197.863 210.546 li
199.609 212.186 li
201.354 213.826 li
203.099 215.465 li
204.844 217.104 li
206.589 218.739 li
208.334 220.366 li
210.079 221.971 li
211.824 223.527 li
213.569 224.981 li
215.314 226.254 li
217.059 227.239 li
218.805 227.838 li
220.55 228.013 li
222.295 227.85 li
224.04 227.589 li
225.785 227.588 li
227.53 228.213 li
229.275 229.695 li
231.02 232.034 li
232.766 235.012 li
234.511 238.292 li
236.256 241.551 li
238.001 244.579 li
239.746 247.297 li
241.491 249.724 li
243.236 251.924 li
244.981 253.961 li
246.727 255.884 li
248.471 257.727 li
250.217 259.507 li
251.962 261.241 li
253.707 262.942 li
255.452 264.619 li
257.197 266.279 li
258.942 267.931 li
184.043 202.981 mo
184.043 202.981 li
185.789 204.621 li
187.534 206.261 li
189.279 207.9 li
191.024 209.54 li
192.769 211.18 li
194.514 212.82 li
196.259 214.46 li
198.004 216.1 li
199.75 217.739 li
201.495 219.376 li
203.24 221.01 li
204.985 222.633 li
206.73 224.231 li
208.475 225.775 li
210.22 227.213 li
211.965 228.469 li
213.71 229.45 li
215.455 230.082 li
217.2 230.359 li
218.946 230.392 li
220.691 230.425 li
222.436 230.784 li
224.181 231.764 li
225.926 233.516 li
227.671 235.985 li
229.416 238.938 li
231.161 242.07 li
232.907 245.115 li
234.652 247.913 li
236.397 250.419 li
238.142 252.665 li
239.887 254.713 li
241.632 256.623 li
243.377 258.441 li
245.122 260.197 li
246.868 261.911 li
248.612 263.597 li
250.357 265.265 li
252.103 266.92 li
253.848 268.568 li
178.949 203.615 mo
178.949 203.615 li
180.694 205.255 li
182.439 206.895 li
184.184 208.535 li
185.93 210.175 li
187.675 211.815 li
189.42 213.454 li
191.165 215.094 li
192.91 216.734 li
194.655 218.373 li
196.4 220.012 li
198.145 221.648 li
199.891 223.279 li
201.636 224.897 li
203.381 226.488 li
205.126 228.02 li
206.871 229.444 li
208.616 230.692 li
210.361 231.688 li
212.106 232.384 li
213.851 232.801 li
215.596 233.067 li
217.341 233.416 li
219.087 234.125 li
220.832 235.42 li
222.577 237.377 li
224.322 239.9 li
226.067 242.76 li
227.812 245.693 li
229.557 248.49 li
231.302 251.042 li
233.048 253.334 li
234.793 255.407 li
236.538 257.321 li
238.283 259.129 li
240.028 260.871 li
241.773 262.572 li
243.518 264.247 li
245.263 265.908 li
247.009 267.559 li
248.754 269.204 li
173.855 204.249 mo
173.855 204.249 li
175.6 205.889 li
177.345 207.529 li
179.09 209.169 li
180.835 210.809 li
182.58 212.449 li
184.325 214.088 li
186.071 215.728 li
187.816 217.368 li
189.561 219.008 li
191.306 220.646 li
193.051 222.284 li
194.796 223.918 li
196.541 225.546 li
198.286 227.158 li
200.032 228.74 li
201.777 230.261 li
203.522 231.677 li
205.267 232.93 li
207.012 233.963 li
208.757 234.752 li
210.502 235.34 li
212.247 235.859 li
213.992 236.521 li
215.738 237.547 li
217.482 239.093 li
219.228 241.178 li
220.973 243.679 li
222.718 246.388 li
224.463 249.089 li
226.208 251.631 li
227.953 253.95 li
229.698 256.052 li
231.443 257.981 li
233.189 259.792 li
234.934 261.529 li
236.679 263.223 li
238.424 264.892 li
240.169 266.548 li
241.914 268.196 li
243.659 269.84 li
168.761 204.884 mo
168.761 204.884 li
170.505 206.524 li
172.251 208.163 li
173.996 209.803 li
175.741 211.443 li
177.486 213.083 li
179.231 214.723 li
180.976 216.363 li
182.721 218.002 li
184.466 219.642 li
186.212 221.281 li
187.957 222.919 li
189.702 224.555 li
191.447 226.186 li
193.192 227.809 li
194.937 229.415 li
196.682 230.988 li
198.427 232.502 li
200.173 233.918 li
201.918 235.191 li
203.663 236.283 li
205.408 237.188 li
207.153 237.964 li
208.898 238.738 li
210.643 239.685 li
212.388 240.973 li
214.133 242.695 li
215.879 244.828 li
217.623 247.245 li
219.369 249.768 li
221.114 252.235 li
222.859 254.543 li
224.604 256.661 li
226.349 258.61 li
228.094 260.433 li
229.839 262.174 li
231.584 263.867 li
233.33 265.533 li
235.075 267.186 li
236.82 268.833 li
238.565 270.475 li
163.666 205.518 mo
163.666 205.518 li
165.411 207.158 li
167.156 208.797 li
168.902 210.437 li
170.646 212.077 li
172.392 213.717 li
174.137 215.357 li
175.882 216.997 li
177.627 218.636 li
179.372 220.276 li
181.117 221.915 li
182.862 223.554 li
184.607 225.19 li
186.353 226.824 li
188.098 228.452 li
189.843 230.07 li
191.588 231.67 li
193.333 233.236 li
195.078 234.749 li
196.823 236.175 li
198.568 237.484 li
200.314 238.651 li
202.059 239.687 li
203.804 240.654 li
205.549 241.66 li
207.294 242.847 li
209.039 244.329 li
210.784 246.151 li
212.529 248.268 li
214.274 250.563 li
216.02 252.894 li
217.764 255.145 li
219.51 257.257 li
221.255 259.218 li
223 261.056 li
224.745 262.806 li
226.49 264.502 li
228.235 266.17 li
229.98 267.823 li
231.725 269.468 li
233.471 271.111 li
158.572 206.152 mo
158.572 206.152 li
160.317 207.792 li
162.062 209.432 li
163.807 211.072 li
165.552 212.711 li
167.297 214.352 li
169.043 215.991 li
170.788 217.631 li
172.533 219.27 li
174.278 220.91 li
176.023 222.549 li
177.768 224.188 li
179.513 225.825 li
181.258 227.46 li
183.004 229.091 li
184.748 230.715 li
186.494 232.329 li
188.239 233.924 li
189.984 235.489 li
191.729 237.007 li
193.474 238.454 li
195.219 239.81 li
196.964 241.063 li
198.709 242.232 li
200.455 243.372 li
202.2 244.577 li
203.945 245.946 li
205.69 247.554 li
207.435 249.415 li
209.18 251.475 li
210.925 253.633 li
212.67 255.788 li
214.415 257.86 li
216.161 259.818 li
217.905 261.666 li
219.651 263.428 li
221.396 265.132 li
223.141 266.803 li
224.886 268.457 li
226.631 270.103 li
228.376 271.745 li
153.478 206.786 mo
153.478 206.786 li
155.223 208.426 li
156.968 210.066 li
158.713 211.706 li
160.458 213.345 li
162.203 214.985 li
163.948 216.625 li
165.693 218.265 li
167.438 219.905 li
169.184 221.544 li
170.929 223.184 li
172.674 224.822 li
174.419 226.46 li
176.164 228.096 li
177.909 229.729 li
179.654 231.357 li
181.399 232.978 li
183.145 234.588 li
184.889 236.182 li
186.635 237.75 li
188.38 239.281 li
190.125 240.759 li
191.87 242.168 li
193.615 243.508 li
195.36 244.798 li
197.105 246.086 li
198.85 247.443 li
200.596 248.94 li
202.341 250.618 li
204.086 252.474 li
205.831 254.456 li
207.576 256.486 li
209.321 258.492 li
211.066 260.426 li
212.811 262.274 li
214.556 264.043 li
216.302 265.756 li
218.046 267.433 li
219.792 269.09 li
221.537 270.736 li
223.282 272.379 li
0.25 gry
@
357.25 181.409 mo
357.25 181.409 li
352.156 182.034 li
347.062 182.654 li
341.967 183.266 li
336.873 183.871 li
331.779 184.468 li
326.684 185.063 li
321.59 185.661 li
316.496 186.268 li
311.401 186.889 li
306.307 187.529 li
301.213 188.183 li
296.118 188.85 li
291.024 189.52 li
285.93 190.152 li
280.836 190.523 li
275.741 190.099 li
270.647 188.988 li
265.552 189.008 li
260.458 191.025 li
255.364 193.268 li
250.27 194.584 li
245.175 195.356 li
240.081 196.004 li
234.987 196.639 li
229.892 197.274 li
224.798 197.908 li
219.704 198.542 li
214.609 199.176 li
209.515 199.81 li
204.421 200.444 li
199.327 201.079 li
194.232 201.713 li
189.138 202.347 li
184.043 202.981 li
178.949 203.615 li
173.855 204.249 li
168.761 204.884 li
163.666 205.518 li
158.572 206.152 li
153.478 206.786 li
358.995 183.051 mo
358.995 183.051 li
353.901 183.677 li
348.807 184.297 li
343.712 184.907 li
338.618 185.506 li
333.524 186.091 li
328.429 186.667 li
323.335 187.239 li
318.241 187.815 li
313.146 188.406 li
308.052 189.02 li
302.958 189.662 li
297.864 190.33 li
292.769 191.011 li
287.675 191.631 li
282.58 191.807 li
277.486 190.749 li
272.392 188.879 li
267.298 188.987 li
262.203 191.846 li
257.109 194.702 li
252.015 196.197 li
246.92 196.993 li
241.826 197.643 li
236.732 198.279 li
231.638 198.913 li
226.543 199.547 li
221.449 200.182 li
216.354 200.816 li
211.26 201.45 li
206.166 202.084 li
201.071 202.718 li
195.977 203.352 li
190.883 203.987 li
185.789 204.621 li
180.694 205.255 li
175.6 205.889 li
170.505 206.524 li
165.411 207.158 li
160.317 207.792 li
155.223 208.426 li
360.74 184.693 mo
360.74 184.693 li
355.646 185.321 li
350.552 185.942 li
345.457 186.552 li
340.363 187.149 li
335.269 187.727 li
330.175 188.286 li
325.08 188.829 li
319.986 189.365 li
314.891 189.909 li
309.797 190.477 li
304.703 191.081 li
299.609 191.728 li
294.514 192.405 li
289.42 192.983 li
284.326 192.84 li
279.231 190.87 li
274.137 188.087 li
269.043 188.522 li
263.948 192.542 li
258.854 196.123 li
253.76 197.806 li
248.666 198.627 li
243.571 199.281 li
238.477 199.918 li
233.382 200.553 li
228.288 201.187 li
223.194 201.822 li
218.1 202.456 li
213.005 203.09 li
207.911 203.724 li
202.817 204.358 li
197.722 204.992 li
192.628 205.627 li
187.534 206.261 li
182.439 206.895 li
177.345 207.529 li
172.251 208.163 li
167.156 208.797 li
162.062 209.432 li
156.968 210.066 li
362.486 186.335 mo
362.486 186.335 li
357.391 186.965 li
352.297 187.588 li
347.203 188.202 li
342.108 188.8 li
337.014 189.376 li
331.92 189.924 li
326.825 190.443 li
321.731 190.939 li
316.637 191.425 li
311.542 191.923 li
306.448 192.457 li
301.354 193.047 li
296.259 193.683 li
291.165 194.157 li
286.071 193.503 li
280.977 190.284 li
275.882 186.486 li
270.788 187.607 li
265.693 193.131 li
260.599 197.527 li
255.505 199.401 li
250.411 200.25 li
245.316 200.913 li
240.222 201.554 li
235.128 202.191 li
230.033 202.827 li
224.939 203.461 li
219.845 204.095 li
214.75 204.73 li
209.656 205.364 li
204.562 205.998 li
199.468 206.632 li
194.373 207.267 li
189.279 207.9 li
184.184 208.535 li
179.09 209.169 li
173.996 209.803 li
168.902 210.437 li
163.807 211.072 li
158.713 211.706 li
364.23 187.977 mo
364.23 187.977 li
359.136 188.608 li
354.042 189.234 li
348.948 189.852 li
343.854 190.456 li
338.759 191.036 li
333.665 191.584 li
328.57 192.09 li
323.476 192.554 li
318.382 192.983 li
313.288 193.399 li
308.193 193.833 li
303.099 194.321 li
298.005 194.855 li
292.91 195.116 li
287.816 193.675 li
282.721 188.813 li
277.627 183.991 li
272.533 186.268 li
267.439 193.628 li
262.344 198.888 li
257.25 200.952 li
252.156 201.844 li
247.061 202.529 li
241.967 203.183 li
236.873 203.826 li
231.779 204.465 li
226.684 205.1 li
221.59 205.735 li
216.495 206.37 li
211.401 207.004 li
206.307 207.638 li
201.212 208.272 li
196.118 208.906 li
191.024 209.54 li
185.93 210.175 li
180.835 210.809 li
175.741 211.443 li
170.646 212.077 li
165.552 212.711 li
160.458 213.345 li
365.976 189.618 mo
365.976 189.618 li
360.881 190.25 li
355.787 190.879 li
350.693 191.502 li
345.598 192.113 li
340.504 192.702 li
335.41 193.259 li
330.316 193.767 li
325.221 194.217 li
320.127 194.605 li
315.032 194.944 li
309.938 195.265 li
304.844 195.612 li
299.75 195.974 li
294.655 195.864 li
289.561 193.269 li
284.467 186.341 li
279.372 180.611 li
274.278 184.58 li
269.184 194.027 li
264.089 200.145 li
258.995 202.405 li
253.901 203.37 li
248.807 204.105 li
243.712 204.789 li
238.618 205.45 li
233.523 206.097 li
228.429 206.737 li
223.335 207.374 li
218.241 208.009 li
213.146 208.643 li
208.052 209.279 li
202.958 209.912 li
197.863 210.546 li
192.769 211.18 li
187.675 211.815 li
182.58 212.449 li
177.486 213.083 li
172.392 213.717 li
167.297 214.352 li
162.203 214.985 li
367.721 191.258 mo
367.721 191.258 li
362.627 191.891 li
357.532 192.522 li
352.438 193.149 li
347.344 193.768 li
342.249 194.369 li
337.155 194.94 li
332.061 195.464 li
326.966 195.921 li
321.872 196.295 li
316.778 196.585 li
311.683 196.807 li
306.589 197 li
301.495 197.128 li
296.4 196.454 li
291.306 192.268 li
286.212 182.879 li
281.118 176.495 li
276.023 182.675 li
270.929 194.308 li
265.834 201.205 li
260.74 203.665 li
255.646 204.756 li
250.552 205.59 li
245.457 206.343 li
240.363 207.045 li
235.269 207.716 li
230.174 208.368 li
225.08 209.01 li
219.986 209.647 li
214.891 210.283 li
209.797 210.918 li
204.703 211.552 li
199.609 212.186 li
194.514 212.82 li
189.42 213.454 li
184.325 214.088 li
179.231 214.723 li
174.137 215.357 li
169.043 215.991 li
163.948 216.625 li
369.466 192.898 mo
369.466 192.898 li
364.371 193.532 li
359.277 194.165 li
354.183 194.795 li
349.089 195.419 li
343.995 196.031 li
338.9 196.62 li
333.806 197.167 li
328.711 197.65 li
323.617 198.041 li
318.523 198.321 li
313.429 198.485 li
308.334 198.549 li
303.24 198.412 li
298.146 196.982 li
293.051 190.758 li
287.957 178.629 li
282.862 171.986 li
277.768 180.771 li
272.674 194.46 li
267.58 201.953 li
262.485 204.604 li
257.391 205.887 li
252.297 206.895 li
247.202 207.781 li
242.108 208.573 li
237.014 209.298 li
231.92 209.98 li
226.825 210.638 li
221.731 211.282 li
216.636 211.921 li
211.542 212.557 li
206.448 213.191 li
201.354 213.826 li
196.259 214.46 li
191.165 215.094 li
186.071 215.728 li
180.976 216.363 li
175.882 216.997 li
170.788 217.631 li
165.693 218.265 li
371.211 194.538 mo
371.211 194.538 li
366.117 195.172 li
361.022 195.806 li
355.928 196.438 li
350.834 197.067 li
345.739 197.687 li
340.645 198.292 li
335.551 198.865 li
330.457 199.383 li
325.362 199.815 li
320.268 200.126 li
315.173 200.288 li
310.079 200.282 li
304.985 199.895 li
299.891 197.552 li
294.796 188.923 li
289.702 173.997 li
284.608 167.623 li
279.513 179.187 li
274.419 194.525 li
269.325 202.31 li
264.23 205.097 li
259.136 206.62 li
254.042 207.887 li
248.948 208.996 li
243.853 209.956 li
238.759 210.795 li
233.664 211.546 li
228.57 212.242 li
223.476 212.907 li
218.382 213.554 li
213.287 214.194 li
208.193 214.83 li
203.099 215.465 li
198.004 216.1 li
192.91 216.734 li
187.816 217.368 li
182.721 218.002 li
177.627 218.636 li
172.533 219.27 li
167.438 219.905 li
372.956 196.178 mo
372.956 196.178 li
367.862 196.812 li
362.768 197.446 li
357.673 198.079 li
352.579 198.711 li
347.485 199.338 li
342.39 199.954 li
337.296 200.55 li
332.202 201.104 li
327.107 201.588 li
322.013 201.959 li
316.919 202.174 li
311.824 202.17 li
306.73 201.582 li
301.636 198.229 li
296.541 186.998 li
291.447 169.547 li
286.353 164.083 li
281.259 178.328 li
276.164 194.651 li
271.07 202.301 li
265.975 205.08 li
260.881 206.828 li
255.787 208.411 li
250.693 209.838 li
245.598 211.072 li
240.504 212.118 li
235.41 213.009 li
230.315 213.791 li
225.221 214.503 li
220.127 215.175 li
215.032 215.825 li
209.938 216.467 li
204.844 217.104 li
199.75 217.739 li
194.655 218.373 li
189.561 219.008 li
184.466 219.642 li
179.372 220.276 li
174.278 220.91 li
169.184 221.544 li
374.701 197.818 mo
374.701 197.818 li
369.607 198.452 li
364.512 199.086 li
359.418 199.72 li
354.324 200.353 li
349.23 200.984 li
344.136 201.609 li
339.041 202.221 li
333.947 202.806 li
328.852 203.339 li
323.758 203.782 li
318.664 204.083 li
313.57 204.144 li
308.475 203.411 li
303.381 199.013 li
298.287 185.222 li
293.192 165.891 li
288.098 162.047 li
283.004 178.619 li
277.909 195.102 li
272.815 202.114 li
267.721 204.637 li
262.626 206.479 li
257.532 208.346 li
252.438 210.146 li
247.343 211.759 li
242.249 213.131 li
237.155 214.27 li
232.061 215.219 li
226.966 216.033 li
221.872 216.762 li
216.777 217.442 li
211.683 218.096 li
206.589 218.739 li
201.495 219.376 li
196.4 220.012 li
191.306 220.646 li
186.212 221.281 li
181.117 221.915 li
176.023 222.549 li
170.929 223.184 li
376.446 199.458 mo
376.446 199.458 li
371.352 200.092 li
366.258 200.727 li
361.163 201.36 li
356.069 201.994 li
350.975 202.626 li
345.88 203.256 li
340.786 203.879 li
335.692 204.486 li
330.598 205.059 li
325.503 205.568 li
320.409 205.965 li
315.314 206.123 li
310.22 205.281 li
305.126 199.852 li
300.032 183.794 li
294.938 163.562 li
289.843 162.024 li
284.749 180.378 li
279.654 196.193 li
274.56 202.099 li
269.466 204.047 li
264.371 205.72 li
259.277 207.701 li
254.183 209.818 li
249.089 211.856 li
243.994 213.663 li
238.9 215.18 li
233.805 216.417 li
228.711 217.425 li
223.617 218.273 li
218.523 219.019 li
213.428 219.708 li
208.334 220.366 li
203.24 221.01 li
198.145 221.648 li
193.051 222.284 li
187.957 222.919 li
182.862 223.554 li
177.768 224.188 li
172.674 224.822 li
378.191 201.098 mo
378.191 201.098 li
373.097 201.732 li
368.003 202.366 li
362.909 203 li
357.814 203.634 li
352.72 204.268 li
347.626 204.9 li
342.531 205.529 li
337.437 206.149 li
332.343 206.75 li
327.248 207.311 li
322.154 207.791 li
317.06 208.045 li
311.965 207.093 li
306.871 200.682 li
301.777 182.875 li
296.682 162.913 li
291.588 164.215 li
286.494 183.695 li
281.4 198.181 li
276.305 202.669 li
271.211 203.756 li
266.116 204.919 li
261.022 206.697 li
255.928 208.917 li
250.834 211.293 li
245.739 213.568 li
240.645 215.571 li
235.551 217.231 li
230.456 218.563 li
225.362 219.63 li
220.268 220.511 li
215.173 221.274 li
210.079 221.971 li
204.985 222.633 li
199.891 223.279 li
194.796 223.918 li
189.702 224.555 li
184.607 225.19 li
179.513 225.825 li
174.419 226.46 li
379.937 202.738 mo
379.937 202.738 li
374.842 203.372 li
369.748 204.006 li
364.654 204.64 li
359.559 205.274 li
354.465 205.908 li
349.371 206.541 li
344.277 207.173 li
339.182 207.8 li
334.088 208.418 li
328.993 209.013 li
323.899 209.555 li
318.805 209.879 li
313.711 208.784 li
308.616 201.477 li
303.522 182.6 li
298.428 164.083 li
293.333 168.47 li
288.239 188.364 li
283.145 201.125 li
278.05 204.144 li
272.956 204.233 li
267.862 204.588 li
262.767 205.783 li
257.673 207.739 li
252.579 210.191 li
247.484 212.814 li
242.39 215.315 li
237.296 217.5 li
232.202 219.293 li
227.107 220.714 li
222.013 221.836 li
216.918 222.747 li
211.824 223.527 li
206.73 224.231 li
201.636 224.897 li
196.541 225.546 li
191.447 226.186 li
186.353 226.824 li
181.258 227.46 li
176.164 228.096 li
381.682 204.377 mo
381.682 204.377 li
376.588 205.011 li
371.493 205.645 li
366.399 206.279 li
361.304 206.913 li
356.21 207.547 li
351.116 208.181 li
346.021 208.814 li
340.927 209.445 li
335.833 210.071 li
330.739 210.685 li
325.644 211.265 li
320.55 211.622 li
315.455 210.343 li
310.361 202.275 li
305.267 183.105 li
300.173 167.016 li
295.079 174.349 li
289.984 193.933 li
284.89 204.842 li
279.795 206.606 li
274.701 205.791 li
269.607 205.218 li
264.512 205.522 li
259.418 206.804 li
254.324 208.925 li
249.23 211.588 li
244.135 214.428 li
239.041 217.125 li
233.946 219.469 li
228.852 221.378 li
223.758 222.875 li
218.664 224.043 li
213.569 224.981 li
208.475 225.775 li
203.381 226.488 li
198.286 227.158 li
193.192 227.809 li
188.098 228.452 li
183.004 229.091 li
177.909 229.729 li
383.427 206.017 mo
383.427 206.017 li
378.332 206.651 li
373.238 207.285 li
368.144 207.919 li
363.05 208.552 li
357.955 209.186 li
352.861 209.819 li
347.767 210.452 li
342.672 211.083 li
337.578 211.713 li
332.484 212.336 li
327.389 212.934 li
322.295 213.289 li
317.201 211.798 li
312.106 203.178 li
307.012 184.506 li
301.918 171.506 li
296.823 181.26 li
291.729 199.833 li
286.635 208.958 li
281.541 209.854 li
276.446 208.445 li
271.352 207.073 li
266.257 206.396 li
261.163 206.703 li
256.069 208.065 li
250.975 210.326 li
245.88 213.16 li
240.786 216.175 li
235.692 219.027 li
230.597 221.495 li
225.503 223.492 li
220.409 225.049 li
215.314 226.254 li
210.22 227.213 li
205.126 228.02 li
200.032 228.74 li
194.937 229.415 li
189.843 230.07 li
184.748 230.715 li
179.654 231.357 li
385.172 207.656 mo
385.172 207.656 li
380.078 208.29 li
374.983 208.924 li
369.889 209.557 li
364.795 210.19 li
359.7 210.822 li
354.606 211.455 li
349.512 212.086 li
344.418 212.717 li
339.323 213.345 li
334.229 213.971 li
329.134 214.573 li
324.04 214.901 li
318.946 213.199 li
313.852 204.306 li
308.757 186.871 li
303.663 177.238 li
298.569 188.6 li
293.474 205.538 li
288.38 213.04 li
283.286 213.484 li
278.191 211.894 li
273.097 210.067 li
268.003 208.59 li
262.908 207.875 li
257.814 208.199 li
252.72 209.629 li
247.625 211.995 li
242.531 214.95 li
237.437 218.084 li
232.343 221.04 li
227.248 223.588 li
222.154 225.644 li
217.059 227.239 li
211.965 228.469 li
206.871 229.444 li
201.777 230.261 li
196.682 230.988 li
191.588 231.67 li
186.494 232.329 li
181.399 232.978 li
386.917 209.295 mo
386.917 209.295 li
381.823 209.928 li
376.729 210.561 li
371.634 211.193 li
366.54 211.825 li
361.445 212.456 li
356.351 213.085 li
351.257 213.714 li
346.162 214.341 li
341.068 214.966 li
335.974 215.588 li
330.88 216.184 li
325.785 216.47 li
320.691 214.595 li
315.596 205.758 li
310.502 190.172 li
305.408 183.82 li
300.314 195.849 li
295.22 210.674 li
290.125 216.736 li
285.031 217.054 li
279.936 215.654 li
274.842 213.792 li
269.748 211.906 li
264.654 210.405 li
259.559 209.694 li
254.465 210.05 li
249.371 211.533 li
244.276 213.963 li
239.182 216.983 li
234.088 220.175 li
228.993 223.177 li
223.899 225.759 li
218.805 227.838 li
213.71 229.45 li
208.616 230.692 li
203.522 231.677 li
198.427 232.502 li
193.333 233.236 li
188.239 233.924 li
183.145 234.588 li
388.662 210.932 mo
388.662 210.932 li
383.568 211.564 li
378.473 212.195 li
373.379 212.826 li
368.285 213.455 li
363.191 214.082 li
358.096 214.707 li
353.002 215.33 li
347.908 215.95 li
342.813 216.567 li
337.719 217.18 li
332.625 217.762 li
327.53 218 li
322.436 216.018 li
317.342 207.58 li
312.247 194.267 li
307.153 190.815 li
302.059 202.612 li
296.964 215.052 li
291.87 219.848 li
286.776 220.217 li
281.682 219.232 li
276.587 217.69 li
271.493 215.836 li
266.398 213.98 li
261.304 212.523 li
256.21 211.861 li
251.116 212.266 li
246.021 213.788 li
240.927 216.241 li
235.833 219.27 li
230.738 222.456 li
225.644 225.445 li
220.55 228.013 li
215.455 230.082 li
210.361 231.688 li
205.267 232.93 li
200.173 233.918 li
195.078 234.749 li
189.984 235.489 li
184.889 236.182 li
390.407 212.567 mo
390.407 212.567 li
385.313 213.197 li
380.219 213.825 li
375.124 214.452 li
370.03 215.075 li
364.936 215.696 li
359.841 216.313 li
354.747 216.926 li
349.653 217.534 li
344.559 218.137 li
339.464 218.733 li
334.37 219.292 li
329.275 219.48 li
324.181 217.474 li
319.087 209.743 li
313.993 198.906 li
308.898 197.782 li
303.804 208.624 li
298.71 218.627 li
293.615 222.329 li
288.521 222.798 li
283.427 222.286 li
278.332 221.253 li
273.238 219.776 li
268.144 218.017 li
263.049 216.271 li
257.955 214.927 li
252.861 214.365 li
247.766 214.838 li
242.672 216.387 li
237.578 218.826 li
232.484 221.807 li
227.389 224.929 li
222.295 227.85 li
217.2 230.359 li
212.106 232.384 li
207.012 233.963 li
201.918 235.191 li
196.823 236.175 li
191.729 237.007 li
186.635 237.75 li
392.152 214.197 mo
392.152 214.197 li
387.058 214.823 li
381.964 215.446 li
376.87 216.066 li
371.775 216.681 li
366.681 217.29 li
361.586 217.894 li
356.492 218.49 li
351.398 219.078 li
346.304 219.657 li
341.209 220.225 li
336.115 220.75 li
331.021 220.89 li
325.926 218.947 li
320.832 212.155 li
315.738 203.774 li
310.643 204.321 li
305.549 213.731 li
300.455 221.447 li
295.361 224.228 li
290.266 224.772 li
285.172 224.668 li
280.077 224.163 li
274.983 223.229 li
269.889 221.894 li
264.795 220.31 li
259.7 218.756 li
254.606 217.597 li
249.512 217.182 li
244.417 217.743 li
239.323 219.309 li
234.229 221.701 li
229.134 224.586 li
224.04 227.589 li
218.946 230.392 li
213.851 232.801 li
208.757 234.752 li
203.663 236.283 li
198.568 237.484 li
193.474 238.454 li
188.38 239.281 li
393.898 215.82 mo
393.898 215.82 li
388.803 216.439 li
383.709 217.054 li
378.614 217.661 li
373.52 218.262 li
368.426 218.854 li
363.332 219.435 li
358.237 220.005 li
353.143 220.561 li
348.049 221.105 li
342.954 221.632 li
337.86 222.11 li
332.766 222.202 li
327.671 220.394 li
322.577 214.675 li
317.483 208.539 li
312.388 210.12 li
307.294 217.871 li
302.2 223.593 li
297.105 225.634 li
292.011 226.205 li
286.917 226.395 li
281.823 226.327 li
276.728 225.934 li
271.634 225.165 li
266.539 224.046 li
261.445 222.715 li
256.351 221.428 li
251.257 220.514 li
246.162 220.288 li
241.068 220.953 li
235.974 222.529 li
230.879 224.842 li
225.785 227.588 li
220.691 230.425 li
215.596 233.067 li
210.502 235.34 li
205.408 237.188 li
200.314 238.651 li
195.219 239.81 li
190.125 240.759 li
395.643 217.431 mo
395.643 217.431 li
390.548 218.04 li
385.454 218.64 li
380.36 219.23 li
375.265 219.809 li
370.171 220.373 li
365.077 220.921 li
359.982 221.452 li
354.888 221.964 li
349.794 222.456 li
344.7 222.927 li
339.605 223.342 li
334.511 223.384 li
329.416 221.766 li
324.322 217.149 li
319.228 212.918 li
314.134 214.984 li
309.039 221.07 li
303.945 225.163 li
298.851 226.64 li
293.756 227.205 li
288.662 227.577 li
283.568 227.822 li
278.473 227.872 li
273.379 227.651 li
268.285 227.111 li
263.19 226.273 li
258.096 225.261 li
253.002 224.299 li
247.907 223.675 li
242.813 223.665 li
237.719 224.438 li
232.625 226.007 li
227.53 228.213 li
222.436 230.784 li
217.341 233.416 li
212.247 235.859 li
207.153 237.964 li
202.059 239.687 li
196.964 241.063 li
191.87 242.168 li
397.388 219.026 mo
397.388 219.026 li
392.293 219.618 li
387.199 220.198 li
382.105 220.763 li
377.011 221.309 li
371.916 221.834 li
366.822 222.337 li
361.727 222.815 li
356.633 223.265 li
351.539 223.69 li
346.445 224.087 li
341.35 224.424 li
336.256 224.415 li
331.162 223.016 li
326.067 219.44 li
320.973 216.711 li
315.879 218.852 li
310.784 223.422 li
305.69 226.263 li
300.596 227.338 li
295.502 227.887 li
290.407 228.368 li
285.313 228.82 li
280.218 229.193 li
275.124 229.417 li
270.03 229.42 li
264.936 229.16 li
259.841 228.651 li
254.747 227.998 li
249.653 227.391 li
244.558 227.075 li
239.464 227.282 li
234.37 228.154 li
229.275 229.695 li
224.181 231.764 li
219.087 234.125 li
213.992 236.521 li
208.898 238.738 li
203.804 240.654 li
198.709 242.232 li
193.615 243.508 li
399.133 220.6 mo
399.133 220.6 li
394.039 221.17 li
388.944 221.721 li
383.85 222.25 li
378.755 222.754 li
373.661 223.228 li
368.567 223.671 li
363.473 224.081 li
358.378 224.456 li
353.284 224.797 li
348.19 225.106 li
343.095 225.353 li
338.001 225.293 li
332.907 224.118 li
327.812 221.458 li
322.718 219.833 li
317.624 221.784 li
312.529 225.083 li
307.435 227.02 li
302.341 227.833 li
297.246 228.377 li
292.152 228.935 li
287.058 229.529 li
281.964 230.127 li
276.869 230.678 li
271.775 231.118 li
266.68 231.382 li
261.586 231.426 li
256.492 231.261 li
251.398 230.971 li
246.304 230.713 li
241.209 230.69 li
236.115 231.091 li
231.02 232.034 li
225.926 233.516 li
220.832 235.42 li
215.738 237.547 li
210.643 239.685 li
205.549 241.66 li
200.455 243.372 li
195.36 244.798 li
400.878 222.149 mo
400.878 222.149 li
395.784 222.689 li
390.689 223.204 li
385.595 223.688 li
380.501 224.138 li
375.406 224.55 li
370.312 224.922 li
365.218 225.252 li
360.123 225.539 li
355.029 225.788 li
349.935 225.999 li
344.841 226.152 li
339.746 226.044 li
334.652 225.085 li
329.557 223.184 li
324.463 222.315 li
319.369 223.95 li
314.275 226.26 li
309.18 227.587 li
304.086 228.253 li
298.992 228.818 li
293.897 229.447 li
288.803 230.154 li
283.709 230.917 li
278.614 231.704 li
273.52 232.464 li
268.426 233.136 li
263.331 233.66 li
258.237 233.997 li
253.143 234.152 li
248.048 234.189 li
242.954 234.237 li
237.86 234.46 li
232.766 235.012 li
227.671 235.985 li
222.577 237.377 li
217.482 239.093 li
212.388 240.973 li
207.294 242.847 li
202.2 244.577 li
197.105 246.086 li
402.623 223.672 mo
402.623 223.672 li
397.529 224.177 li
392.434 224.648 li
387.34 225.08 li
382.246 225.469 li
377.152 225.811 li
372.057 226.104 li
366.963 226.348 li
361.868 226.544 li
356.774 226.698 li
351.68 226.814 li
346.586 226.879 li
341.491 226.735 li
336.397 225.975 li
331.303 224.676 li
326.208 224.292 li
321.114 225.588 li
316.02 227.187 li
310.925 228.14 li
305.831 228.748 li
300.737 229.362 li
295.643 230.073 li
290.548 230.885 li
285.454 231.783 li
280.359 232.743 li
275.265 233.727 li
270.171 234.686 li
265.077 235.566 li
259.982 236.313 li
254.888 236.891 li
249.794 237.303 li
244.699 237.602 li
239.605 237.887 li
234.511 238.292 li
229.416 238.938 li
224.322 239.9 li
219.228 241.178 li
214.133 242.695 li
209.039 244.329 li
203.945 245.946 li
198.85 247.443 li
404.368 225.174 mo
404.368 225.174 li
399.274 225.639 li
394.18 226.062 li
389.085 226.438 li
383.991 226.763 li
378.896 227.034 li
373.802 227.25 li
368.708 227.411 li
363.614 227.522 li
358.519 227.591 li
353.425 227.626 li
348.331 227.621 li
343.236 227.462 li
338.142 226.887 li
333.048 226.049 li
327.954 225.965 li
322.859 226.972 li
317.765 228.103 li
312.67 228.858 li
307.576 229.475 li
302.482 230.163 li
297.388 230.967 li
292.293 231.883 li
287.199 232.896 li
282.105 233.986 li
277.01 235.122 li
271.916 236.267 li
266.821 237.377 li
261.727 238.404 li
256.633 239.301 li
251.539 240.043 li
246.445 240.63 li
241.35 241.106 li
236.256 241.551 li
231.161 242.07 li
226.067 242.76 li
220.973 243.679 li
215.879 244.828 li
210.784 246.151 li
205.69 247.554 li
200.596 248.94 li
406.113 226.663 mo
406.113 226.663 li
401.019 227.087 li
395.925 227.464 li
390.83 227.787 li
385.736 228.053 li
380.642 228.259 li
375.547 228.408 li
370.453 228.5 li
365.359 228.545 li
360.264 228.551 li
355.17 228.532 li
350.076 228.488 li
344.982 228.342 li
339.887 227.94 li
334.793 227.456 li
329.698 227.561 li
324.604 228.361 li
319.51 229.222 li
314.416 229.902 li
309.321 230.573 li
304.227 231.347 li
299.133 232.245 li
294.038 233.257 li
288.944 234.365 li
283.85 235.549 li
278.755 236.781 li
273.661 238.031 li
268.567 239.267 li
263.472 240.449 li
258.378 241.539 li
253.284 242.504 li
248.189 243.324 li
243.095 244.004 li
238.001 244.579 li
232.907 245.115 li
227.812 245.693 li
222.718 246.388 li
217.623 247.245 li
212.529 248.268 li
207.435 249.415 li
202.341 250.618 li
407.858 228.154 mo
407.858 228.154 li
402.764 228.542 li
397.67 228.878 li
392.575 229.157 li
387.481 229.376 li
382.387 229.535 li
377.293 229.636 li
372.198 229.684 li
367.104 229.691 li
362.009 229.667 li
356.915 229.63 li
351.821 229.585 li
346.727 229.486 li
341.632 229.252 li
336.538 229.043 li
331.444 229.28 li
326.349 229.961 li
321.255 230.695 li
316.161 231.38 li
311.066 232.124 li
305.972 232.986 li
300.878 233.968 li
295.784 235.056 li
290.689 236.23 li
285.595 237.469 li
280.5 238.747 li
275.406 240.04 li
270.312 241.32 li
265.218 242.559 li
260.123 243.73 li
255.029 244.805 li
249.935 245.762 li
244.84 246.59 li
239.746 247.297 li
234.652 247.913 li
229.557 248.49 li
224.463 249.089 li
219.369 249.768 li
214.274 250.563 li
209.18 251.475 li
204.086 252.474 li
409.604 229.664 mo
409.604 229.664 li
404.509 230.026 li
399.415 230.334 li
394.321 230.585 li
389.226 230.777 li
384.132 230.911 li
379.038 230.992 li
373.943 231.029 li
368.849 231.032 li
363.755 231.017 li
358.66 231.001 li
353.566 230.995 li
348.472 230.974 li
343.377 230.905 li
338.283 230.917 li
333.189 231.262 li
328.095 231.898 li
323 232.599 li
317.906 233.327 li
312.811 234.146 li
307.717 235.08 li
302.623 236.122 li
297.529 237.256 li
292.434 238.46 li
287.34 239.713 li
282.246 240.991 li
277.151 242.273 li
272.057 243.537 li
266.962 244.764 li
261.868 245.934 li
256.774 247.029 li
251.68 248.031 li
246.586 248.931 li
241.491 249.724 li
236.397 250.419 li
231.302 251.042 li
226.208 251.631 li
221.114 252.235 li
216.02 252.894 li
210.925 253.633 li
205.831 254.456 li
411.348 231.212 mo
411.348 231.212 li
406.254 231.561 li
401.16 231.858 li
396.066 232.1 li
390.971 232.289 li
385.877 232.426 li
380.783 232.519 li
375.688 232.577 li
370.594 232.613 li
365.5 232.644 li
360.405 232.686 li
355.311 232.753 li
350.217 232.836 li
345.123 232.926 li
340.028 233.121 li
334.934 233.562 li
329.839 234.203 li
324.745 234.919 li
319.651 235.7 li
314.557 236.578 li
309.462 237.559 li
304.368 238.629 li
299.274 239.772 li
294.179 240.967 li
289.085 242.193 li
283.991 243.431 li
278.896 244.661 li
273.802 245.868 li
268.708 247.035 li
263.613 248.152 li
258.519 249.208 li
253.425 250.193 li
248.33 251.1 li
243.236 251.924 li
238.142 252.665 li
233.048 253.334 li
227.953 253.95 li
222.859 254.543 li
217.764 255.145 li
212.67 255.788 li
207.576 256.486 li
413.094 232.811 mo
413.094 232.811 li
407.999 233.162 li
402.905 233.467 li
397.811 233.722 li
392.716 233.932 li
387.622 234.1 li
382.528 234.234 li
377.434 234.345 li
372.339 234.445 li
367.245 234.55 li
362.15 234.679 li
357.056 234.842 li
351.962 235.041 li
346.868 235.279 li
341.773 235.624 li
336.679 236.151 li
331.585 236.822 li
326.49 237.57 li
321.396 238.393 li
316.302 239.305 li
311.207 240.299 li
306.113 241.364 li
301.019 242.48 li
295.925 243.631 li
290.83 244.797 li
285.736 245.963 li
280.641 247.113 li
275.547 248.235 li
270.453 249.318 li
265.359 250.356 li
260.264 251.343 li
255.17 252.274 li
250.076 253.148 li
244.981 253.961 li
239.887 254.713 li
234.793 255.407 li
229.698 256.052 li
224.604 256.661 li
219.51 257.257 li
214.415 257.86 li
209.321 258.492 li
414.839 234.467 mo
414.839 234.467 li
409.745 234.836 li
404.65 235.165 li
399.556 235.454 li
394.462 235.707 li
389.367 235.928 li
384.273 236.125 li
379.179 236.311 li
374.084 236.496 li
368.99 236.696 li
363.896 236.924 li
358.801 237.194 li
353.707 237.508 li
348.613 237.876 li
343.518 238.34 li
338.424 238.938 li
333.33 239.641 li
328.236 240.417 li
323.141 241.261 li
318.047 242.177 li
312.952 243.156 li
307.858 244.184 li
302.764 245.246 li
297.67 246.326 li
292.575 247.411 li
287.481 248.486 li
282.387 249.541 li
277.292 250.567 li
272.198 251.556 li
267.104 252.507 li
262.009 253.415 li
256.915 254.281 li
251.821 255.104 li
246.727 255.884 li
241.632 256.623 li
236.538 257.321 li
231.443 257.981 li
226.349 258.61 li
221.255 259.218 li
216.161 259.818 li
211.066 260.426 li
416.584 236.178 mo
416.584 236.178 li
411.489 236.578 li
406.395 236.945 li
401.301 237.281 li
396.207 237.591 li
391.112 237.88 li
386.018 238.155 li
380.924 238.427 li
375.829 238.706 li
370.735 239.005 li
365.641 239.335 li
360.546 239.707 li
355.452 240.125 li
350.358 240.598 li
345.264 241.151 li
340.169 241.8 li
335.075 242.527 li
329.98 243.314 li
324.886 244.157 li
319.792 245.052 li
314.698 245.991 li
309.603 246.961 li
304.509 247.951 li
299.415 248.948 li
294.32 249.94 li
289.226 250.919 li
284.132 251.877 li
279.038 252.808 li
273.943 253.708 li
268.849 254.575 li
263.754 255.41 li
258.66 256.213 li
253.566 256.984 li
248.471 257.727 li
243.377 258.441 li
238.283 259.129 li
233.189 259.792 li
228.094 260.433 li
223 261.056 li
217.905 261.666 li
212.811 262.274 li
418.329 237.934 mo
418.329 237.934 li
413.235 238.371 li
408.14 238.784 li
403.046 239.176 li
397.952 239.55 li
392.857 239.912 li
387.763 240.268 li
382.669 240.627 li
377.575 240.997 li
372.48 241.389 li
367.386 241.811 li
362.291 242.272 li
357.197 242.774 li
352.103 243.324 li
347.009 243.936 li
341.914 244.617 li
336.82 245.353 li
331.726 246.134 li
326.631 246.956 li
321.537 247.814 li
316.443 248.699 li
311.348 249.602 li
306.254 250.513 li
301.16 251.425 li
296.066 252.328 li
290.971 253.217 li
285.877 254.086 li
280.782 254.932 li
275.688 255.754 li
270.594 256.551 li
265.5 257.323 li
260.405 258.072 li
255.311 258.799 li
250.217 259.507 li
245.122 260.197 li
240.028 260.871 li
234.934 261.529 li
229.839 262.174 li
224.745 262.806 li
219.651 263.428 li
214.556 264.043 li
420.074 239.717 mo
420.074 239.717 li
414.98 240.195 li
409.886 240.657 li
404.791 241.104 li
399.697 241.541 li
394.603 241.973 li
389.508 242.404 li
384.414 242.841 li
379.32 243.292 li
374.225 243.763 li
369.131 244.261 li
364.037 244.79 li
358.942 245.353 li
353.848 245.955 li
348.754 246.602 li
343.659 247.295 li
338.565 248.027 li
333.471 248.789 li
328.377 249.579 li
323.282 250.391 li
318.188 251.218 li
313.093 252.054 li
307.999 252.891 li
302.905 253.725 li
297.811 254.55 li
292.716 255.361 li
287.622 256.157 li
282.528 256.934 li
277.433 257.694 li
272.339 258.435 li
267.245 259.159 li
262.15 259.867 li
257.056 260.561 li
251.962 261.241 li
246.868 261.911 li
241.773 262.572 li
236.679 263.223 li
231.584 263.867 li
226.49 264.502 li
221.396 265.132 li
216.302 265.756 li
421.819 241.508 mo
421.819 241.508 li
416.725 242.026 li
411.63 242.533 li
406.536 243.032 li
401.442 243.525 li
396.348 244.017 li
391.254 244.512 li
386.159 245.015 li
381.065 245.529 li
375.97 246.061 li
370.876 246.615 li
365.782 247.193 li
360.688 247.797 li
355.593 248.428 li
350.499 249.091 li
345.405 249.783 li
340.31 250.5 li
335.216 251.237 li
330.121 251.991 li
325.027 252.757 li
319.933 253.53 li
314.839 254.306 li
309.744 255.081 li
304.65 255.852 li
299.555 256.612 li
294.461 257.363 li
289.367 258.102 li
284.273 258.827 li
279.179 259.541 li
274.084 260.241 li
268.99 260.931 li
263.895 261.61 li
258.801 262.28 li
253.707 262.942 li
248.612 263.597 li
243.518 264.247 li
238.424 264.892 li
233.33 265.533 li
228.235 266.17 li
223.141 266.803 li
218.046 267.433 li
423.564 243.293 mo
423.564 243.293 li
418.47 243.845 li
413.376 244.391 li
408.281 244.932 li
403.187 245.472 li
398.093 246.012 li
392.998 246.557 li
387.904 247.108 li
382.81 247.67 li
377.716 248.245 li
372.621 248.836 li
367.527 249.445 li
362.432 250.072 li
357.338 250.718 li
352.244 251.383 li
347.15 252.067 li
342.055 252.765 li
336.961 253.477 li
331.867 254.195 li
326.772 254.921 li
321.678 255.649 li
316.584 256.378 li
311.489 257.104 li
306.395 257.824 li
301.301 258.539 li
296.207 259.245 li
291.112 259.943 li
286.018 260.633 li
280.923 261.315 li
275.829 261.988 li
270.735 262.654 li
265.641 263.314 li
260.546 263.969 li
255.452 264.619 li
250.357 265.265 li
245.263 265.908 li
240.169 266.548 li
235.075 267.186 li
229.98 267.823 li
224.886 268.457 li
219.792 269.09 li
425.309 245.06 mo
425.309 245.06 li
420.215 245.639 li
415.121 246.215 li
410.027 246.79 li
404.932 247.364 li
399.838 247.94 li
394.743 248.52 li
389.649 249.106 li
384.555 249.699 li
379.461 250.302 li
374.366 250.917 li
369.272 251.542 li
364.178 252.18 li
359.083 252.83 li
353.989 253.491 li
348.895 254.163 li
343.8 254.843 li
338.706 255.53 li
333.612 256.221 li
328.518 256.915 li
323.423 257.609 li
318.329 258.302 li
313.234 258.993 li
308.14 259.679 li
303.046 260.361 li
297.952 261.038 li
292.857 261.709 li
287.763 262.375 li
282.669 263.036 li
277.574 263.692 li
272.48 264.344 li
267.386 264.992 li
262.291 265.637 li
257.197 266.279 li
252.103 266.92 li
247.009 267.559 li
241.914 268.196 li
236.82 268.833 li
231.725 269.468 li
226.631 270.103 li
221.537 270.736 li
427.055 246.802 mo
427.055 246.802 li
421.96 247.401 li
416.866 247.999 li
411.771 248.597 li
406.677 249.195 li
401.583 249.796 li
396.489 250.4 li
391.395 251.008 li
386.3 251.621 li
381.206 252.241 li
376.111 252.867 li
371.017 253.501 li
365.923 254.142 li
360.829 254.791 li
355.734 255.445 li
350.64 256.106 li
345.546 256.771 li
340.451 257.439 li
335.357 258.109 li
330.262 258.779 li
325.168 259.45 li
320.074 260.118 li
314.98 260.785 li
309.885 261.449 li
304.791 262.11 li
299.696 262.768 li
294.602 263.422 li
289.508 264.074 li
284.414 264.722 li
279.32 265.368 li
274.225 266.011 li
269.131 266.654 li
264.036 267.292 li
258.942 267.931 li
253.848 268.568 li
248.754 269.204 li
243.659 269.84 li
238.565 270.475 li
233.471 271.111 li
228.376 271.745 li
223.282 272.379 li
@
0 gry
true set_gvm
%ADOBeginSubsetFont: BRUPMX+SFBMR9 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginZRVCLC+SFBMR9 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/b <1C60D8A8C9B08A95D388AD7207A1E6E2FDD0839A2DBE8CA1586E0F0A1FA7B75B822A15DE30AC3B1FE2515DD6B9DC5E0B0F16164E446901AB57665A0A3D5C8B393E1CD0144C000171538D27FED24733470107B60613FA25FA6512A4DE4F4A9B767D2548DF83E2FE1EEE1D9C47D95759155C7C5E364CA48EA307AFC9F7CA6E36> |-systemdict /gcheck known {setglobal} if end {end} ifendZRVCLC+SFBMR9 /Encoding getdup 98 /b putpop%ADOEndSubsetFont
reset_gvm
/ZRVCLC+SFBMR9*1 [40{/.notdef}rp /parenleft /parenright 16{/.notdef}rp /colon 14{/.notdef}rp /I 23{/.notdef}rp /a /b 2{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]ZRVCLC+SFBMR9 nfZRVCLC+SFBMR9*1 [8.96638 0 0 -8.96638 0 0 ]msf266.76 289.819 mo(\(b\)Iteration:)[3.71884 4.80124 7.55893 2.52066 3.4783 4.31989 3.23773 4.56058 3.47827 2.03568 4.80096 4.80124 0 ]xshZRVCLD+HFBRMI9*1 [8.96638 0 0 -8.96638 0 0 ]msf322.68 289.819 mo(t)shtrue set_gvm
%ADOBeginSubsetFont: OIHRMX+HFBR9 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginZRVCLE+HFBR9 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B780B392613AB42D12A7E870288A2AA7B2F1E3FCA8C959F5E840C702AECB39696C8F82EBC32572C8EA21021B83E9F1EBE2E1FCB9955F483425E02C32869FB11297A3036F6403D2E5BDC9749242C7E9A666AC411DF98147FCB821FCB1C86F8C517EE193774AFDFC0398244666F085D16E8E2A032B8521023A68C64A92003D70DA970462BB91571939A2C0803114> |-systemdict /gcheck known {setglobal} if end {end} ifendZRVCLE+HFBR9 /Encoding getdup 53 /five putpop%ADOEndSubsetFont
reset_gvm
/ZRVCLE+HFBR9*1 [49{/.notdef}rp /one 3{/.notdef}rp /five 7{/.notdef}rp /equal 194{/.notdef}rp]ZRVCLE+HFBR9 nfZRVCLE+HFBR9*1 [8.96638 0 0 -8.96638 0 0 ]msf329.52 289.819 mo(=15)[9.71988 4.80002 0 ]xsh178.993 428.292 mo
174.125 431.797 li
180.112 432.168 li
177.381 430.857 li
f
0.672478 lw
372.97 374.395 mo
177.381 430.857 li
@
412.482 462.306 mo
418.073 464.479 li
415.124 459.257 li
415.511 462.262 li
f
309.648 370.581 mo
415.511 462.261 li
@
330.8 304.424 mo
328.782 298.775 li
326.764 304.424 li
328.782 302.165 li
f
328.782 387.151 mo
328.782 302.165 li
@
ZRVCKZ+HFBRMI10*1 [6.45581 0 0 -6.45581 0 0 ]msf166.683 434.012 mo(X)sh420.296 466.694 mo(Y)sh326.352 296.507 mo(Z)sh317.097 389.788 mo
318.373 390.892 li
@
306.05 392.977 mo
307.326 394.081 li
@
295.004 396.166 mo
296.279 397.27 li
@
283.957 399.354 mo
285.232 400.459 li
@
272.909 402.543 mo
274.185 403.648 li
@
261.862 405.733 mo
263.138 406.837 li
@
250.816 408.922 mo
252.091 410.026 li
@
239.769 412.11 mo
241.045 413.215 li
@
228.722 415.299 mo
229.997 416.404 li
@
217.675 418.488 mo
218.95 419.593 li
@
206.628 421.677 mo
207.904 422.782 li
@
195.581 424.867 mo
196.857 425.971 li
@
184.534 428.055 mo
185.81 429.16 li
@
339.191 383.409 mo
340.467 384.515 li
@
350.238 380.221 mo
351.514 381.325 li
@
361.285 377.032 mo
362.561 378.136 li
@
372.332 373.843 mo
373.607 374.947 li
@
336.264 392.356 mo
334.055 392.993 li
@
342.643 397.879 mo
340.433 398.517 li
@
349.021 403.402 mo
346.811 404.04 li
@
355.398 408.926 mo
353.189 409.564 li
@
361.777 414.449 mo
359.567 415.087 li
@
368.154 419.973 mo
365.945 420.611 li
@
374.532 425.496 mo
372.323 426.134 li
@
380.91 431.02 mo
378.701 431.658 li
@
387.288 436.543 mo
385.079 437.181 li
@
393.666 442.067 mo
391.457 442.704 li
@
400.044 447.59 mo
397.835 448.228 li
@
406.422 453.114 mo
404.212 453.752 li
@
412.8 458.637 mo
410.591 459.275 li
@
323.509 381.309 mo
321.299 381.947 li
@
317.131 375.785 mo
314.921 376.423 li
@
310.753 370.262 mo
308.543 370.899 li
@
328.144 386.599 mo
329.42 387.703 li
@
328.144 375.552 mo
329.42 376.656 li
@
328.144 364.505 mo
329.42 365.609 li
@
328.144 353.458 mo
329.42 354.563 li
@
328.144 342.411 mo
329.42 343.516 li
@
328.144 331.364 mo
329.42 332.469 li
@
328.144 320.317 mo
329.42 321.422 li
@
0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf265.404 426.28 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf265.404 426.28 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf301.523 452.895 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf301.523 452.895 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf284.747 431.876 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf284.747 431.876 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf283.821 451.201 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf283.821 451.201 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf246.706 452.814 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf246.706 452.814 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf282.644 452.521 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf282.644 452.521 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf245.177 428.358 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf245.177 428.358 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf256.043 449.056 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf256.043 449.056 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.391 431.285 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.391 431.285 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf271.682 470.781 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf271.682 470.781 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf265.434 450.237 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf265.434 450.237 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf274.786 471.411 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf274.786 471.411 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf257.721 455.581 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf257.721 455.581 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.839 458.797 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.839 458.797 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf295.062 453.755 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf295.062 453.755 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf287.231 446.27 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf287.231 446.27 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf236.153 442.578 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf236.153 442.578 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf266.739 441.27 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf266.739 441.27 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf259.052 446.003 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf259.052 446.003 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf268.561 463.283 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf268.561 463.283 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf288.522 464.176 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf288.522 464.176 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.307 463.027 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.307 463.027 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf244.248 454.008 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf244.248 454.008 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf303.775 443.357 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf303.775 443.357 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf266.132 428.556 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf266.132 428.556 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.785 457.913 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.785 457.913 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf247.589 461.806 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf247.589 461.806 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf266.694 454.323 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf266.694 454.323 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf285.262 458.743 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf285.262 458.743 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf267.97 455.171 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf267.97 455.171 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf271.03 440.072 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf271.03 440.072 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf260.383 443.559 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf260.383 443.559 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf261.357 448.638 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf261.357 448.638 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf354.463 428.039 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf354.463 428.039 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf366.433 445.16 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf366.433 445.16 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf371.839 465.253 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf371.839 465.253 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf351.047 435.152 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf351.047 435.152 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf365.994 466.124 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf365.994 466.124 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf397.396 444.648 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf397.396 444.648 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf383.841 444.52 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf383.841 444.52 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf386.816 438.095 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf386.816 438.095 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf358.711 437.118 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf358.711 437.118 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf378.888 446.831 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf378.888 446.831 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf372.221 423.991 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf372.221 423.991 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf409.045 461.25 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf409.045 461.25 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf395.303 445.008 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf395.303 445.008 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf382.886 452.335 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf382.886 452.335 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf360.624 446.501 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf360.624 446.501 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf346.437 453.092 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf346.437 453.092 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf395.563 415.611 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf395.563 415.611 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf367.887 444.215 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf367.887 444.215 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf332.909 443.059 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf332.909 443.059 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf354.801 432.329 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf354.801 432.329 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf370.406 448.879 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf370.406 448.879 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf341.737 436.104 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf341.737 436.104 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf344.091 432.098 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf344.091 432.098 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf374.445 439.344 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf374.445 439.344 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf323.762 428.182 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf323.762 428.182 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf396.276 431.883 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf396.276 431.883 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf349.276 433.529 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf349.276 433.529 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf365.957 434.613 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf365.957 434.613 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf396.182 447.184 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf396.182 447.184 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf347.64 435.818 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf347.64 435.818 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf390.886 441.302 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf390.886 441.302 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf359.829 440.844 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf359.829 440.844 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf354.71 438.046 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf354.71 438.046 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf382.845 427.404 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf382.845 427.404 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf397.818 431.926 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf397.818 431.926 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf351.94 414.827 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf351.94 414.827 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf382.818 450.753 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf382.818 450.753 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf365.96 437.948 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf365.96 437.948 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf376.139 436.27 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf376.139 436.27 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf320.004 441.999 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf320.004 441.999 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf383.454 436.902 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf383.454 436.902 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf368.304 452.212 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf368.304 452.212 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.029 393.482 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.029 393.482 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.069 399.87 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.069 399.87 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.698 402.711 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.698 402.711 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.268 400.693 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.268 400.693 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf297.283 402.538 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf297.283 402.538 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf306.838 398.921 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf306.838 398.921 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf306.148 406.74 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf306.148 406.74 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf290.193 403.926 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf290.193 403.926 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf324.899 408.431 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf324.899 408.431 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.457 407.125 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.457 407.125 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf282.846 407.932 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf282.846 407.932 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf302.84 399.385 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf302.84 399.385 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf303.768 397 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf303.768 397 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.73 397.474 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf291.73 397.474 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf308.504 411.766 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf308.504 411.766 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf294.508 411.592 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf294.508 411.592 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf301.445 403.29 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf301.445 403.29 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf302.756 403.37 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf302.756 403.37 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf307.3 394.97 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf307.3 394.97 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf312.415 415.708 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf312.415 415.708 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.259 410.54 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf293.259 410.54 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf316.138 404.615 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf316.138 404.615 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.905 400.768 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.905 400.768 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf316.377 405.522 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf316.377 405.522 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf312.302 411.59 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf312.302 411.59 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf295.342 403.068 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf295.342 403.068 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf303.758 399.184 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf303.758 399.184 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf306.728 394.161 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf306.728 394.161 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf296.279 405.483 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf296.279 405.483 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf301.756 406 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf301.756 406 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf302.644 400.753 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf302.644 400.753 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf300.452 397.112 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf300.452 397.112 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf308.041 411.596 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf308.041 411.596 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf306.651 404.612 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf306.651 404.612 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.975 411.202 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.975 411.202 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf305.73 411.668 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf305.73 411.668 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf305.969 412.146 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf305.969 412.146 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf281.741 404.74 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf281.741 404.74 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf309.166 403.055 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf309.166 403.055 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf301.068 405.805 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf301.068 405.805 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf302.218 403.09 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf302.218 403.09 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf288.43 390.417 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf288.43 390.417 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf307.067 404.371 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf307.067 404.371 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf310.065 405.296 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf310.065 405.296 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf303.692 401.898 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf303.692 401.898 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf308.849 410.714 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf308.849 410.714 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf310.538 406.691 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf310.538 406.691 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf302.741 404.634 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf302.741 404.634 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.652 401.52 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.652 401.52 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf300.179 406.099 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf300.179 406.099 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf305.068 404.23 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf305.068 404.23 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf280.346 392.615 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf280.346 392.615 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf300.17 397.805 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf300.17 397.805 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.576 406.186 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.576 406.186 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf297.819 398.477 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf297.819 398.477 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf305.979 417.219 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf305.979 417.219 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf294.317 403.512 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf294.317 403.512 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf309.371 410.642 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf309.371 410.642 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf307.854 401.941 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf307.854 401.941 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf317.282 406.859 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf317.282 406.859 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.579 396.849 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.579 396.849 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.078 405.021 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf298.078 405.021 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf305.555 414.839 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf305.555 414.839 mo(!)sh0.75 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.732 407.094 mo( )sh0 gry
ZRVCLB+*1 [4.03487 0 0 -4.03487 0 0 ]msf304.732 407.094 mo(!)shZRVCLB+*1 [5.64882 0 0 -5.64882 0 0 ]msf302.55 404.229 mo( !)[0 0 ]xsh273.55 449.829 mo("#)[0 0 ]xsh368.85 440.129 mo($%)[0 0 ]xsh0.11208 lw
353.836 357.825 mo
353.836 357.825 li
356.387 360.034 li
358.938 362.243 li
361.489 364.453 li
364.041 366.662 li
366.592 368.872 li
369.143 371.081 li
371.694 373.29 li
374.245 375.5 li
376.796 377.709 li
379.348 379.918 li
381.899 382.128 li
384.45 384.337 li
387.001 386.547 li
389.552 388.756 li
392.104 390.965 li
394.655 393.175 li
397.206 395.384 li
399.757 397.593 li
402.308 399.802 li
404.859 402.01 li
407.411 404.218 li
409.962 406.425 li
412.513 408.632 li
415.064 410.839 li
417.615 413.045 li
420.166 415.25 li
422.718 417.457 li
425.269 419.663 li
427.82 421.871 li
430.371 424.08 li
432.922 426.29 li
435.473 428.501 li
438.025 430.713 li
440.576 432.926 li
443.127 435.139 li
445.679 437.352 li
448.23 439.564 li
450.781 441.776 li
453.332 443.987 li
455.883 446.198 li
349.141 359.18 mo
349.141 359.18 li
351.692 361.39 li
354.243 363.599 li
356.795 365.808 li
359.346 368.018 li
361.897 370.227 li
364.448 372.436 li
366.999 374.646 li
369.55 376.855 li
372.102 379.065 li
374.653 381.274 li
377.204 383.483 li
379.755 385.693 li
382.306 387.902 li
384.857 390.111 li
387.409 392.32 li
389.96 394.529 li
392.511 396.738 li
395.062 398.947 li
397.613 401.154 li
400.164 403.361 li
402.716 405.567 li
405.267 407.77 li
407.818 409.973 li
410.369 412.174 li
412.92 414.375 li
415.471 416.575 li
418.023 418.775 li
420.574 420.978 li
423.125 423.183 li
425.676 425.391 li
428.227 427.602 li
430.779 429.817 li
433.33 432.033 li
435.881 434.252 li
438.432 436.47 li
440.983 438.689 li
443.534 440.906 li
446.086 443.122 li
448.637 445.336 li
451.188 447.549 li
344.446 360.535 mo
344.446 360.535 li
346.997 362.745 li
349.548 364.954 li
352.1 367.163 li
354.651 369.373 li
357.202 371.582 li
359.753 373.791 li
362.304 376.001 li
364.855 378.21 li
367.407 380.42 li
369.958 382.629 li
372.509 384.838 li
375.06 387.048 li
377.611 389.257 li
380.162 391.466 li
382.714 393.675 li
385.265 395.884 li
387.816 398.091 li
390.367 400.298 li
392.918 402.503 li
395.47 404.706 li
398.021 406.905 li
400.572 409.101 li
403.123 411.294 li
405.674 413.483 li
408.225 415.67 li
410.777 417.856 li
413.328 420.044 li
415.879 422.236 li
418.43 424.434 li
420.981 426.641 li
423.532 428.856 li
426.084 431.078 li
428.635 433.306 li
431.186 435.538 li
433.737 437.77 li
436.288 440.002 li
438.839 442.231 li
441.391 444.456 li
443.942 446.677 li
446.493 448.895 li
339.751 361.891 mo
339.751 361.891 li
342.302 364.1 li
344.854 366.309 li
347.405 368.519 li
349.956 370.728 li
352.507 372.938 li
355.058 375.147 li
357.609 377.356 li
360.161 379.566 li
362.712 381.775 li
365.263 383.984 li
367.814 386.194 li
370.365 388.403 li
372.916 390.612 li
375.468 392.821 li
378.019 395.029 li
380.57 397.236 li
383.121 399.442 li
385.672 401.645 li
388.223 403.844 li
390.775 406.038 li
393.326 408.224 li
395.877 410.403 li
398.428 412.573 li
400.979 414.735 li
403.53 416.893 li
406.082 419.049 li
408.633 421.21 li
411.184 423.38 li
413.735 425.565 li
416.286 427.769 li
418.838 429.991 li
421.389 432.231 li
423.94 434.483 li
426.491 436.744 li
429.042 439.006 li
431.593 441.267 li
434.145 443.52 li
436.696 445.765 li
439.247 448.002 li
441.798 450.232 li
335.056 363.246 mo
335.056 363.246 li
337.607 365.455 li
340.159 367.665 li
342.71 369.874 li
345.261 372.084 li
347.812 374.293 li
350.363 376.502 li
352.914 378.712 li
355.466 380.921 li
358.017 383.131 li
360.568 385.34 li
363.119 387.549 li
365.67 389.758 li
368.221 391.967 li
370.773 394.175 li
373.324 396.382 li
375.875 398.587 li
378.426 400.788 li
380.977 402.983 li
383.529 405.17 li
386.08 407.346 li
388.631 409.506 li
391.182 411.65 li
393.733 413.775 li
396.284 415.885 li
398.836 417.984 li
401.387 420.081 li
403.938 422.188 li
406.489 424.316 li
409.04 426.476 li
411.591 428.674 li
414.143 430.913 li
416.694 433.188 li
419.245 435.489 li
421.796 437.807 li
424.347 440.129 li
426.898 442.445 li
429.45 444.747 li
432.001 447.033 li
434.552 449.3 li
437.103 451.551 li
330.361 364.601 mo
330.361 364.601 li
332.912 366.811 li
335.464 369.02 li
338.015 371.229 li
340.566 373.439 li
343.117 375.648 li
345.668 377.858 li
348.22 380.067 li
350.771 382.276 li
353.322 384.486 li
355.873 386.695 li
358.424 388.904 li
360.975 391.113 li
363.527 393.321 li
366.078 395.528 li
368.629 397.733 li
371.18 399.933 li
373.731 402.126 li
376.282 404.307 li
378.834 406.472 li
381.385 408.614 li
383.936 410.727 li
386.487 412.806 li
389.038 414.85 li
391.589 416.864 li
394.141 418.857 li
396.692 420.848 li
399.243 422.858 li
401.794 424.911 li
404.345 427.027 li
406.896 429.218 li
409.448 431.488 li
411.999 433.827 li
414.55 436.219 li
417.101 438.641 li
419.652 441.07 li
422.204 443.486 li
424.755 445.875 li
427.306 448.231 li
429.857 450.552 li
432.408 452.841 li
325.666 365.957 mo
325.666 365.957 li
328.217 368.166 li
330.769 370.375 li
333.32 372.585 li
335.871 374.794 li
338.422 377.004 li
340.973 379.213 li
343.525 381.422 li
346.076 383.632 li
348.627 385.841 li
351.178 388.05 li
353.729 390.259 li
356.28 392.467 li
358.832 394.675 li
361.383 396.879 li
363.934 399.08 li
366.485 401.272 li
369.036 403.451 li
371.588 405.609 li
374.139 407.737 li
376.69 409.823 li
379.241 411.856 li
381.792 413.828 li
384.343 415.738 li
386.895 417.592 li
389.446 419.412 li
391.997 421.229 li
394.548 423.082 li
397.099 425.014 li
399.65 427.06 li
402.202 429.243 li
404.753 431.566 li
407.304 434.014 li
409.855 436.555 li
412.406 439.148 li
414.957 441.752 li
417.509 444.333 li
420.06 446.864 li
422.611 449.334 li
425.162 451.742 li
427.713 454.094 li
320.971 367.312 mo
320.971 367.312 li
323.522 369.521 li
326.073 371.731 li
328.625 373.94 li
331.176 376.149 li
333.727 378.359 li
336.279 380.568 li
338.83 382.777 li
341.381 384.987 li
343.932 387.196 li
346.483 389.405 li
349.034 391.614 li
351.586 393.822 li
354.137 396.027 li
356.688 398.229 li
359.239 400.422 li
361.79 402.603 li
364.341 404.761 li
366.893 406.884 li
369.444 408.955 li
371.995 410.956 li
374.546 412.868 li
377.097 414.679 li
379.648 416.386 li
382.2 418.003 li
384.751 419.564 li
387.302 421.122 li
389.853 422.744 li
392.404 424.499 li
394.955 426.447 li
397.507 428.622 li
400.058 431.03 li
402.609 433.643 li
405.16 436.408 li
407.711 439.258 li
410.262 442.122 li
412.814 444.945 li
415.365 447.685 li
417.916 450.323 li
420.467 452.858 li
423.018 455.3 li
316.276 368.667 mo
316.276 368.667 li
318.827 370.877 li
321.379 373.086 li
323.93 375.295 li
326.481 377.505 li
329.032 379.714 li
331.583 381.924 li
334.134 384.133 li
336.686 386.342 li
339.237 388.551 li
341.788 390.76 li
344.339 392.968 li
346.891 395.175 li
349.442 397.379 li
351.993 399.575 li
354.544 401.76 li
357.095 403.924 li
359.646 406.053 li
362.198 408.127 li
364.749 410.12 li
367.3 412.005 li
369.851 413.754 li
372.402 415.345 li
374.954 416.778 li
377.505 418.075 li
380.056 419.289 li
382.607 420.503 li
385.158 421.819 li
387.709 423.343 li
390.261 425.165 li
392.812 427.338 li
395.363 429.866 li
397.914 432.706 li
400.465 435.774 li
403.016 438.967 li
405.568 442.179 li
408.119 445.324 li
410.67 448.34 li
413.221 451.2 li
415.772 453.901 li
418.323 456.461 li
311.581 370.022 mo
311.581 370.022 li
314.132 372.232 li
316.684 374.441 li
319.235 376.65 li
321.786 378.86 li
324.337 381.07 li
326.888 383.279 li
329.439 385.488 li
331.991 387.697 li
334.542 389.906 li
337.093 392.115 li
339.645 394.323 li
342.196 396.528 li
344.747 398.729 li
347.298 400.92 li
349.849 403.094 li
352.4 405.238 li
354.952 407.33 li
357.503 409.344 li
360.054 411.243 li
362.605 412.986 li
365.156 414.535 li
367.707 415.862 li
370.259 416.965 li
372.81 417.878 li
375.361 418.678 li
377.912 419.483 li
380.463 420.44 li
383.014 421.697 li
385.566 423.379 li
388.117 425.557 li
390.668 428.237 li
393.219 431.354 li
395.77 434.788 li
398.321 438.391 li
400.873 442.016 li
403.424 445.54 li
405.975 448.881 li
408.526 452 li
411.077 454.896 li
413.629 457.593 li
306.886 371.378 mo
306.886 371.378 li
309.438 373.587 li
311.989 375.797 li
314.54 378.006 li
317.091 380.215 li
319.642 382.425 li
322.193 384.634 li
324.745 386.843 li
327.296 389.052 li
329.847 391.261 li
332.398 393.47 li
334.949 395.677 li
337.5 397.881 li
340.052 400.079 li
342.603 402.264 li
345.154 404.426 li
347.705 406.547 li
350.257 408.6 li
352.808 410.55 li
355.359 412.347 li
357.91 413.939 li
360.461 415.275 li
363.012 416.322 li
365.564 417.077 li
368.115 417.588 li
370.666 417.957 li
373.217 418.34 li
375.768 418.929 li
378.32 419.918 li
380.871 421.465 li
383.422 423.663 li
385.973 426.512 li
388.524 429.925 li
391.075 433.744 li
393.627 437.775 li
396.178 441.828 li
398.729 445.743 li
401.28 449.416 li
403.831 452.799 li
406.382 455.891 li
408.934 458.726 li
302.191 372.733 mo
302.191 372.733 li
304.743 374.943 li
307.294 377.152 li
309.845 379.361 li
312.396 381.57 li
314.947 383.778 li
317.498 385.985 li
320.05 388.191 li
322.601 390.398 li
325.152 392.605 li
327.703 394.814 li
330.254 397.022 li
332.805 399.228 li
335.357 401.425 li
337.908 403.607 li
340.459 405.758 li
343.01 407.859 li
345.562 409.877 li
348.113 411.767 li
350.664 413.472 li
353.215 414.927 li
355.766 416.073 li
358.318 416.869 li
360.869 417.316 li
363.42 417.472 li
365.971 417.465 li
368.522 417.484 li
371.073 417.761 li
373.625 418.527 li
376.176 419.972 li
378.727 422.201 li
381.278 425.212 li
383.829 428.893 li
386.38 433.054 li
388.932 437.46 li
391.483 441.882 li
394.034 446.132 li
396.585 450.087 li
399.136 453.692 li
401.688 456.949 li
404.239 459.899 li
297.496 374.088 mo
297.496 374.088 li
300.048 376.298 li
302.599 378.506 li
305.15 380.713 li
307.701 382.915 li
310.252 385.106 li
312.804 387.281 li
315.355 389.442 li
317.906 391.598 li
320.457 393.771 li
323.008 395.977 li
325.559 398.216 li
328.111 400.47 li
330.662 402.713 li
333.213 404.924 li
335.764 407.085 li
338.315 409.179 li
340.866 411.174 li
343.418 413.023 li
345.969 414.663 li
348.52 416.022 li
351.071 417.036 li
353.623 417.661 li
356.174 417.9 li
358.725 417.821 li
361.276 417.568 li
363.827 417.356 li
366.379 417.439 li
368.93 418.075 li
371.481 419.472 li
374.032 421.741 li
376.583 424.874 li
379.134 428.743 li
381.686 433.134 li
384.237 437.785 li
386.788 442.444 li
389.339 446.906 li
391.89 451.036 li
394.441 454.777 li
396.993 458.133 li
399.544 461.15 li
292.802 375.443 mo
292.802 375.443 li
295.353 377.652 li
297.904 379.856 li
300.455 382.044 li
303.006 384.191 li
305.557 386.247 li
308.109 388.153 li
310.66 389.892 li
313.211 391.552 li
315.762 393.329 li
318.313 395.424 li
320.864 397.893 li
323.416 400.602 li
325.967 403.329 li
328.518 405.907 li
331.069 408.281 li
333.62 410.469 li
336.171 412.491 li
338.723 414.336 li
341.274 415.954 li
343.825 417.281 li
346.376 418.25 li
348.927 418.822 li
351.479 419 li
354.03 418.857 li
356.581 418.544 li
359.132 418.283 li
361.684 418.335 li
364.235 418.965 li
366.786 420.379 li
369.337 422.688 li
371.888 425.877 li
374.439 429.813 li
376.991 434.27 li
379.542 438.984 li
382.093 443.695 li
384.644 448.196 li
387.195 452.355 li
389.746 456.114 li
392.298 459.481 li
394.849 462.504 li
288.107 376.798 mo
288.107 376.798 li
290.658 379.003 li
293.209 381.189 li
295.76 383.309 li
298.311 385.231 li
300.862 386.694 li
303.414 387.348 li
305.965 386.993 li
308.516 385.974 li
311.067 385.329 li
313.618 386.329 li
316.17 389.584 li
318.721 394.558 li
321.272 399.994 li
323.823 404.802 li
326.374 408.57 li
328.925 411.447 li
331.477 413.748 li
334.028 415.692 li
336.579 417.356 li
339.13 418.724 li
341.681 419.749 li
344.232 420.397 li
346.784 420.674 li
349.335 420.653 li
351.886 420.48 li
354.438 420.365 li
356.989 420.557 li
359.54 421.303 li
362.091 422.796 li
364.642 425.136 li
367.193 428.303 li
369.745 432.167 li
372.296 436.514 li
374.847 441.091 li
377.398 445.657 li
379.949 450.018 li
382.5 454.052 li
385.052 457.708 li
387.603 460.994 li
390.154 463.959 li
283.412 378.152 mo
283.412 378.152 li
285.963 380.351 li
288.514 382.506 li
291.065 384.49 li
293.616 385.944 li
296.168 386.088 li
298.719 383.749 li
301.27 378.001 li
303.821 369.454 li
306.372 361.147 li
308.923 357.504 li
311.475 361.432 li
314.026 372.045 li
316.577 385.375 li
319.128 397.314 li
321.679 405.883 li
324.23 411.29 li
326.782 414.67 li
329.333 417.013 li
331.884 418.84 li
334.435 420.328 li
336.986 421.497 li
339.538 422.333 li
342.089 422.848 li
344.64 423.108 li
347.191 423.241 li
349.742 423.433 li
352.293 423.903 li
354.845 424.863 li
357.396 426.48 li
359.947 428.834 li
362.498 431.906 li
365.05 435.578 li
367.601 439.661 li
370.152 443.936 li
372.703 448.192 li
375.254 452.265 li
377.805 456.049 li
380.357 459.503 li
382.908 462.638 li
385.459 465.494 li
278.717 379.507 mo
278.717 379.507 li
281.268 381.702 li
283.819 383.838 li
286.37 385.726 li
288.921 386.801 li
291.473 385.745 li
294.024 380.365 li
296.575 368.502 li
299.126 350.374 li
301.677 330.829 li
304.229 318.415 li
306.78 320.208 li
309.331 336.418 li
311.882 360.22 li
314.433 382.982 li
316.984 399.581 li
319.536 409.582 li
322.087 415.062 li
324.638 418.211 li
327.189 420.351 li
329.74 422.03 li
332.291 423.404 li
334.843 424.501 li
337.394 425.34 li
339.945 425.977 li
342.496 426.519 li
345.047 427.115 li
347.598 427.942 li
350.15 429.169 li
352.701 430.927 li
355.252 433.279 li
357.803 436.204 li
360.354 439.606 li
362.905 443.331 li
365.457 447.201 li
368.008 451.05 li
370.559 454.747 li
373.111 458.211 li
375.662 461.409 li
378.213 464.35 li
380.764 467.071 li
274.022 380.863 mo
274.022 380.863 li
276.573 383.062 li
279.124 385.214 li
281.675 387.161 li
284.227 388.397 li
286.778 387.658 li
289.329 382.64 li
291.88 370.666 li
294.431 351.017 li
296.982 327.858 li
299.534 310.352 li
302.085 307.708 li
304.636 322.414 li
307.187 348.224 li
309.738 375.065 li
312.289 395.745 li
314.841 408.599 li
317.392 415.606 li
319.943 419.434 li
322.494 421.875 li
325.045 423.758 li
327.596 425.355 li
330.148 426.734 li
332.699 427.922 li
335.25 428.964 li
337.801 429.939 li
340.352 430.961 li
342.904 432.159 li
345.455 433.658 li
348.006 435.553 li
350.557 437.888 li
353.108 440.646 li
355.659 443.752 li
358.211 447.092 li
360.762 450.534 li
363.313 453.955 li
365.864 457.26 li
368.415 460.391 li
370.967 463.324 li
373.518 466.068 li
376.069 468.65 li
269.327 382.22 mo
269.327 382.22 li
271.878 384.425 li
274.429 386.608 li
276.98 388.695 li
279.532 390.427 li
282.083 391.116 li
284.634 389.397 li
287.185 383.454 li
289.736 372.299 li
292.288 357.78 li
294.839 345.343 li
297.39 341.534 li
299.941 349.403 li
302.492 366.068 li
305.043 385.018 li
307.595 400.712 li
310.146 411.175 li
312.697 417.323 li
315.248 420.956 li
317.799 423.436 li
320.35 425.448 li
322.902 427.239 li
325.453 428.876 li
328.004 430.384 li
330.555 431.796 li
333.106 433.167 li
335.657 434.575 li
338.209 436.108 li
340.76 437.849 li
343.311 439.862 li
345.862 442.175 li
348.413 444.774 li
350.964 447.608 li
353.516 450.596 li
356.067 453.65 li
358.618 456.686 li
361.169 459.64 li
363.72 462.473 li
366.271 465.172 li
368.823 467.741 li
371.374 470.201 li
264.632 383.575 mo
264.632 383.575 li
267.183 385.784 li
269.734 387.987 li
272.286 390.163 li
274.837 392.239 li
277.388 394 li
279.939 394.99 li
282.49 394.526 li
285.041 392.083 li
287.593 388.041 li
290.144 384.186 li
292.695 383.083 li
295.246 386.378 li
297.797 393.506 li
300.348 402.15 li
302.9 409.944 li
305.451 415.778 li
308.002 419.797 li
310.553 422.668 li
313.104 424.974 li
315.655 427.031 li
318.207 428.962 li
320.758 430.803 li
323.309 432.57 li
325.86 434.284 li
328.411 435.979 li
330.962 437.701 li
333.514 439.506 li
336.065 441.443 li
338.616 443.552 li
341.167 445.847 li
343.718 448.319 li
346.27 450.934 li
348.821 453.642 li
351.372 456.387 li
353.923 459.118 li
356.474 461.795 li
359.025 464.395 li
361.577 466.909 li
364.128 469.343 li
366.679 471.708 li
259.937 384.931 mo
259.937 384.931 li
262.488 387.14 li
265.039 389.349 li
267.591 391.553 li
270.142 393.741 li
272.693 395.875 li
275.244 397.867 li
277.795 399.576 li
280.346 400.861 li
282.898 401.742 li
285.449 402.538 li
288 403.806 li
290.551 405.995 li
293.102 409.106 li
295.654 412.688 li
298.205 416.179 li
300.756 419.252 li
303.307 421.881 li
305.858 424.202 li
308.409 426.354 li
310.961 428.422 li
313.512 430.441 li
316.063 432.424 li
318.614 434.379 li
321.165 436.317 li
323.716 438.257 li
326.268 440.222 li
328.819 442.238 li
331.37 444.333 li
333.921 446.523 li
336.472 448.816 li
339.023 451.205 li
341.575 453.67 li
344.126 456.183 li
346.677 458.711 li
349.228 461.227 li
351.779 463.71 li
354.33 466.146 li
356.882 468.531 li
359.433 470.87 li
361.984 473.168 li
255.242 386.286 mo
255.242 386.286 li
257.793 388.496 li
260.345 390.705 li
262.896 392.914 li
265.447 395.121 li
267.998 397.323 li
270.549 399.509 li
273.1 401.664 li
275.652 403.766 li
278.203 405.809 li
280.754 407.824 li
283.305 409.874 li
285.856 412.023 li
288.407 414.283 li
290.959 416.605 li
293.51 418.913 li
296.061 421.152 li
298.612 423.314 li
301.163 425.417 li
303.714 427.484 li
306.266 429.538 li
308.817 431.591 li
311.368 433.654 li
313.919 435.732 li
316.47 437.831 li
319.021 439.955 li
321.573 442.11 li
324.124 444.302 li
326.675 446.535 li
329.226 448.812 li
331.777 451.132 li
334.329 453.49 li
336.88 455.875 li
339.431 458.273 li
341.982 460.671 li
344.533 463.055 li
347.084 465.416 li
349.636 467.749 li
352.187 470.054 li
354.738 472.332 li
357.289 474.589 li
250.547 387.641 mo
250.547 387.641 li
253.098 389.851 li
255.65 392.06 li
258.201 394.27 li
260.752 396.479 li
263.303 398.687 li
265.854 400.893 li
268.405 403.097 li
270.957 405.293 li
273.508 407.481 li
276.059 409.658 li
278.61 411.823 li
281.161 413.977 li
283.712 416.115 li
286.264 418.228 li
288.815 420.306 li
291.366 422.345 li
293.917 424.348 li
296.468 426.326 li
299.02 428.298 li
301.571 430.286 li
304.122 432.313 li
306.673 434.395 li
309.224 436.543 li
311.775 438.759 li
314.327 441.038 li
316.878 443.367 li
319.429 445.731 li
321.98 448.116 li
324.531 450.509 li
327.082 452.902 li
329.634 455.286 li
332.185 457.658 li
334.736 460.014 li
337.287 462.351 li
339.838 464.669 li
342.389 466.966 li
344.941 469.243 li
347.492 471.502 li
350.043 473.748 li
352.594 475.981 li
245.852 388.997 mo
245.852 388.997 li
248.403 391.206 li
250.954 393.416 li
253.506 395.625 li
256.057 397.834 li
258.608 400.042 li
261.159 402.249 li
263.711 404.453 li
266.262 406.653 li
268.813 408.844 li
271.364 411.02 li
273.915 413.175 li
276.466 415.298 li
279.018 417.377 li
281.569 419.402 li
284.12 421.365 li
286.671 423.263 li
289.222 425.106 li
291.773 426.915 li
294.325 428.723 li
296.876 430.569 li
299.427 432.496 li
301.978 434.536 li
304.529 436.712 li
307.08 439.023 li
309.632 441.454 li
312.183 443.975 li
314.734 446.546 li
317.285 449.131 li
319.836 451.697 li
322.388 454.225 li
324.939 456.702 li
327.49 459.126 li
330.041 461.502 li
332.592 463.836 li
335.143 466.136 li
337.695 468.41 li
340.246 470.664 li
342.797 472.904 li
345.348 475.133 li
347.899 477.355 li
241.157 390.352 mo
241.157 390.352 li
243.708 392.561 li
246.259 394.771 li
248.811 396.98 li
251.362 399.189 li
253.913 401.397 li
256.464 403.602 li
259.016 405.804 li
261.567 407.999 li
264.118 410.181 li
266.669 412.34 li
269.22 414.465 li
271.771 416.539 li
274.323 418.543 li
276.874 420.459 li
279.425 422.273 li
281.976 423.981 li
284.527 425.596 li
287.079 427.153 li
289.63 428.704 li
292.181 430.317 li
294.732 432.061 li
297.283 433.996 li
299.834 436.158 li
302.386 438.554 li
304.937 441.155 li
307.488 443.91 li
310.039 446.75 li
312.59 449.609 li
315.141 452.428 li
317.693 455.169 li
320.244 457.812 li
322.795 460.354 li
325.346 462.807 li
327.897 465.184 li
330.448 467.506 li
333 469.786 li
335.551 472.04 li
338.102 474.275 li
340.653 476.5 li
343.204 478.718 li
236.462 391.708 mo
236.462 391.708 li
239.013 393.917 li
241.564 396.126 li
244.116 398.335 li
246.667 400.543 li
249.218 402.75 li
251.769 404.955 li
254.32 407.154 li
256.871 409.343 li
259.423 411.513 li
261.974 413.651 li
264.525 415.74 li
267.077 417.753 li
269.628 419.664 li
272.179 421.442 li
274.73 423.066 li
277.281 424.528 li
279.832 425.845 li
282.384 427.066 li
284.935 428.268 li
287.486 429.552 li
290.037 431.027 li
292.588 432.788 li
295.139 434.895 li
297.691 437.363 li
300.242 440.155 li
302.793 443.192 li
305.344 446.372 li
307.895 449.587 li
310.446 452.746 li
312.998 455.784 li
315.549 458.669 li
318.1 461.394 li
320.651 463.975 li
323.202 466.437 li
325.754 468.81 li
328.305 471.119 li
330.856 473.387 li
333.407 475.629 li
335.958 477.856 li
338.509 480.075 li
231.767 393.063 mo
231.767 393.063 li
234.318 395.272 li
236.87 397.481 li
239.421 399.69 li
241.972 401.899 li
244.523 404.105 li
247.074 406.308 li
249.625 408.504 li
252.177 410.686 li
254.728 412.844 li
257.279 414.96 li
259.83 417.009 li
262.381 418.958 li
264.932 420.765 li
267.484 422.391 li
270.035 423.802 li
272.586 424.984 li
275.138 425.956 li
277.689 426.781 li
280.24 427.564 li
282.791 428.445 li
285.342 429.577 li
287.893 431.1 li
290.445 433.106 li
292.996 435.623 li
295.547 438.609 li
298.098 441.959 li
300.649 445.528 li
303.2 449.165 li
305.752 452.734 li
308.303 456.139 li
310.854 459.328 li
313.405 462.29 li
315.956 465.042 li
318.507 467.622 li
321.059 470.069 li
323.61 472.424 li
326.161 474.718 li
328.712 476.973 li
331.263 479.207 li
333.814 481.428 li
227.072 394.418 mo
227.072 394.418 li
229.623 396.627 li
232.175 398.836 li
234.726 401.045 li
237.277 403.253 li
239.828 405.459 li
242.379 407.661 li
244.93 409.855 li
247.482 412.032 li
250.033 414.179 li
252.584 416.275 li
255.135 418.288 li
257.686 420.177 li
260.238 421.889 li
262.789 423.37 li
265.34 424.574 li
267.891 425.481 li
270.443 426.108 li
272.994 426.529 li
275.545 426.876 li
278.096 427.326 li
280.647 428.079 li
283.198 429.322 li
285.75 431.183 li
288.301 433.713 li
290.852 436.867 li
293.403 440.516 li
295.954 444.476 li
298.505 448.547 li
301.057 452.55 li
303.608 456.351 li
306.159 459.875 li
308.71 463.101 li
311.261 466.049 li
313.812 468.765 li
316.364 471.302 li
318.915 473.712 li
321.466 476.038 li
324.017 478.311 li
326.568 480.554 li
329.12 482.78 li
222.377 395.774 mo
222.377 395.774 li
224.929 397.983 li
227.48 400.192 li
230.031 402.401 li
232.582 404.609 li
235.133 406.814 li
237.684 409.016 li
240.236 411.208 li
242.787 413.381 li
245.338 415.522 li
247.889 417.604 li
250.44 419.593 li
252.991 421.438 li
255.543 423.079 li
258.094 424.45 li
260.645 425.494 li
263.196 426.18 li
265.747 426.524 li
268.298 426.605 li
270.85 426.572 li
273.401 426.635 li
275.952 427.033 li
278.504 427.993 li
281.055 429.684 li
283.606 432.179 li
286.157 435.438 li
288.708 439.317 li
291.259 443.6 li
293.811 448.047 li
296.362 452.436 li
298.913 456.599 li
301.464 460.436 li
304.015 463.914 li
306.566 467.052 li
309.118 469.902 li
311.669 472.528 li
314.22 474.995 li
316.771 477.354 li
319.322 479.647 li
321.873 481.9 li
324.425 484.131 li
217.682 397.129 mo
217.682 397.129 li
220.234 399.338 li
222.785 401.547 li
225.336 403.756 li
227.887 405.964 li
230.438 408.17 li
232.989 410.371 li
235.541 412.563 li
238.092 414.736 li
240.643 416.874 li
243.194 418.953 li
245.745 420.933 li
248.296 422.761 li
250.848 424.372 li
253.399 425.691 li
255.95 426.655 li
258.501 427.222 li
261.052 427.404 li
263.604 427.278 li
266.155 427 li
268.706 426.797 li
271.257 426.932 li
273.808 427.662 li
276.36 429.186 li
278.911 431.6 li
281.462 434.875 li
284.013 438.864 li
286.564 443.336 li
289.116 448.023 li
291.667 452.674 li
294.218 457.094 li
296.769 461.161 li
299.32 464.829 li
301.871 468.115 li
304.423 471.073 li
306.974 473.773 li
309.525 476.287 li
312.076 478.675 li
314.627 480.984 li
317.179 483.246 li
319.73 485.482 li
212.988 398.484 mo
212.988 398.484 li
215.539 400.693 li
218.09 402.902 li
220.641 405.111 li
223.192 407.32 li
225.743 409.525 li
228.295 411.727 li
230.846 413.92 li
233.397 416.095 li
235.948 418.238 li
238.499 420.323 li
241.05 422.313 li
243.602 424.154 li
246.153 425.782 li
248.704 427.121 li
251.255 428.102 li
253.806 428.68 li
256.357 428.858 li
258.909 428.705 li
261.46 428.373 li
264.011 428.084 li
266.562 428.107 li
269.113 428.71 li
271.664 430.106 li
274.216 432.408 li
276.767 435.605 li
279.318 439.558 li
281.87 444.039 li
284.421 448.776 li
286.972 453.507 li
289.523 458.021 li
292.074 462.184 li
294.625 465.942 li
297.177 469.302 li
299.728 472.318 li
302.279 475.059 li
304.83 477.602 li
307.381 480.008 li
309.932 482.327 li
312.484 484.595 li
315.035 486.834 li
208.293 399.84 mo
208.293 399.84 li
210.844 402.049 li
213.395 404.258 li
215.946 406.467 li
218.497 408.675 li
221.048 410.882 li
223.6 413.084 li
226.151 415.28 li
228.702 417.46 li
231.253 419.611 li
233.804 421.711 li
236.355 423.726 li
238.907 425.609 li
241.458 427.297 li
244.009 428.722 li
246.56 429.815 li
249.111 430.53 li
251.662 430.862 li
254.214 430.87 li
256.765 430.685 li
259.316 430.512 li
261.867 430.601 li
264.418 431.208 li
266.97 432.544 li
269.521 434.731 li
272.072 437.772 li
274.623 441.552 li
277.174 445.861 li
279.725 450.447 li
282.277 455.054 li
284.828 459.479 li
287.379 463.584 li
289.93 467.308 li
292.482 470.652 li
295.033 473.661 li
297.584 476.403 li
300.135 478.948 li
302.686 481.357 li
305.238 483.679 li
307.789 485.949 li
310.34 488.188 li
203.598 401.195 mo
203.598 401.195 li
206.149 403.404 li
208.7 405.613 li
211.251 407.822 li
213.802 410.031 li
216.354 412.238 li
218.905 414.442 li
221.456 416.64 li
224.007 418.826 li
226.558 420.989 li
229.109 423.11 li
231.661 425.161 li
234.212 427.102 li
236.763 428.882 li
239.314 430.438 li
241.865 431.712 li
244.416 432.659 li
246.968 433.271 li
249.519 433.588 li
252.07 433.72 li
254.621 433.836 li
257.172 434.152 li
259.723 434.893 li
262.275 436.252 li
264.826 438.345 li
267.377 441.19 li
269.928 444.698 li
272.479 448.695 li
275.03 452.961 li
277.582 457.273 li
280.133 461.445 li
282.684 465.349 li
285.235 468.924 li
287.786 472.165 li
290.338 475.107 li
292.889 477.808 li
295.44 480.328 li
297.991 482.724 li
300.543 485.04 li
303.094 487.306 li
305.645 489.545 li
198.903 402.55 mo
198.903 402.55 li
201.454 404.759 li
204.005 406.969 li
206.556 409.178 li
209.107 411.386 li
211.659 413.594 li
214.21 415.8 li
216.761 418.001 li
219.312 420.193 li
221.863 422.368 li
224.414 424.511 li
226.966 426.602 li
229.517 428.609 li
232.068 430.491 li
234.619 432.199 li
237.17 433.686 li
239.721 434.913 li
242.273 435.868 li
244.824 436.579 li
247.375 437.126 li
249.926 437.641 li
252.477 438.294 li
255.029 439.267 li
257.58 440.721 li
260.131 442.759 li
262.682 445.407 li
265.233 448.601 li
267.784 452.211 li
270.336 456.06 li
272.887 459.969 li
275.438 463.781 li
277.989 467.388 li
280.54 470.732 li
283.091 473.806 li
285.643 476.633 li
288.194 479.261 li
290.745 481.737 li
293.296 484.107 li
295.847 486.408 li
298.398 488.668 li
300.95 490.903 li
194.208 403.905 mo
194.208 403.905 li
196.759 406.115 li
199.31 408.324 li
201.861 410.533 li
204.412 412.742 li
206.964 414.95 li
209.515 417.158 li
212.066 419.361 li
214.617 421.559 li
217.168 423.745 li
219.72 425.909 li
222.271 428.036 li
224.822 430.104 li
227.373 432.083 li
229.924 433.939 li
232.475 435.633 li
235.027 437.138 li
237.578 438.439 li
240.129 439.554 li
242.68 440.538 li
245.231 441.484 li
247.782 442.515 li
250.334 443.768 li
252.885 445.365 li
255.436 447.39 li
257.987 449.869 li
260.538 452.764 li
263.089 455.983 li
265.641 459.397 li
268.192 462.871 li
270.743 466.287 li
273.294 469.558 li
275.845 472.637 li
278.396 475.514 li
280.948 478.205 li
283.499 480.742 li
286.05 483.162 li
288.601 485.499 li
291.152 487.783 li
293.704 490.032 li
296.255 492.262 li
189.513 405.261 mo
189.513 405.261 li
192.064 407.47 li
194.615 409.679 li
197.166 411.889 li
199.718 414.098 li
202.269 416.307 li
204.82 418.515 li
207.371 420.72 li
209.922 422.922 li
212.473 425.117 li
215.025 427.297 li
217.576 429.454 li
220.127 431.573 li
222.678 433.634 li
225.229 435.612 li
227.78 437.483 li
230.332 439.226 li
232.883 440.83 li
235.434 442.303 li
237.985 443.68 li
240.536 445.021 li
243.088 446.409 li
245.639 447.938 li
248.19 449.693 li
250.741 451.736 li
253.292 454.092 li
255.843 456.739 li
258.395 459.617 li
260.946 462.641 li
263.497 465.719 li
266.048 468.765 li
268.599 471.718 li
271.15 474.542 li
273.702 477.227 li
276.253 479.782 li
278.804 482.228 li
281.355 484.591 li
283.906 486.894 li
286.457 489.158 li
289.009 491.397 li
291.56 493.622 li
184.818 406.616 mo
184.818 406.616 li
187.369 408.825 li
189.92 411.035 li
192.471 413.244 li
195.023 415.453 li
197.574 417.662 li
200.125 419.871 li
202.676 422.078 li
205.227 424.283 li
207.779 426.484 li
210.33 428.677 li
212.881 430.855 li
215.432 433.011 li
217.983 435.131 li
220.534 437.202 li
223.086 439.207 li
225.637 441.131 li
228.188 442.968 li
230.739 444.721 li
233.29 446.409 li
235.841 448.068 li
238.393 449.75 li
240.944 451.514 li
243.495 453.415 li
246.046 455.495 li
248.597 457.772 li
251.148 460.237 li
253.7 462.854 li
256.251 465.572 li
258.802 468.33 li
261.353 471.074 li
263.904 473.764 li
266.455 476.373 li
269.007 478.895 li
271.558 481.333 li
274.109 483.7 li
276.66 486.012 li
279.211 488.285 li
281.762 490.532 li
284.314 492.761 li
286.865 494.982 li
180.123 407.971 mo
180.123 407.971 li
182.674 410.181 li
185.225 412.39 li
187.777 414.599 li
190.328 416.809 li
192.879 419.018 li
195.43 421.227 li
197.981 423.435 li
200.532 425.642 li
203.084 427.847 li
205.635 430.047 li
208.186 432.24 li
210.737 434.42 li
213.288 436.581 li
215.839 438.713 li
218.391 440.808 li
220.942 442.858 li
223.493 444.856 li
226.044 446.804 li
228.595 448.712 li
231.146 450.601 li
233.698 452.499 li
236.249 454.439 li
238.8 456.457 li
241.351 458.576 li
243.902 460.811 li
246.454 463.156 li
249.005 465.594 li
251.556 468.095 li
254.107 470.624 li
256.658 473.149 li
259.209 475.644 li
261.761 478.093 li
264.312 480.492 li
266.863 482.841 li
269.414 485.147 li
271.965 487.42 li
274.516 489.669 li
277.068 491.902 li
279.619 494.124 li
282.17 496.34 li
175.428 409.327 mo
175.428 409.327 li
177.979 411.536 li
180.53 413.745 li
183.081 415.955 li
185.633 418.164 li
188.184 420.374 li
190.735 422.583 li
193.286 424.791 li
195.838 427 li
198.389 429.207 li
200.94 431.412 li
203.491 433.613 li
206.042 435.807 li
208.593 437.992 li
211.145 440.162 li
213.696 442.313 li
216.247 444.439 li
218.798 446.538 li
221.349 448.609 li
223.9 450.659 li
226.452 452.696 li
229.003 454.735 li
231.554 456.796 li
234.105 458.896 li
236.656 461.049 li
239.207 463.264 li
241.759 465.54 li
244.31 467.867 li
246.861 470.23 li
249.412 472.611 li
251.963 474.992 li
254.514 477.358 li
257.066 479.7 li
259.617 482.015 li
262.168 484.303 li
264.719 486.567 li
267.27 488.813 li
269.821 491.045 li
272.373 493.268 li
274.924 495.485 li
277.475 497.698 li
170.733 410.682 mo
170.733 410.682 li
173.284 412.891 li
175.835 415.101 li
178.386 417.31 li
180.938 419.52 li
183.489 421.729 li
186.04 423.938 li
188.591 426.147 li
191.143 428.356 li
193.694 430.565 li
196.245 432.772 li
198.796 434.977 li
201.347 437.18 li
203.898 439.377 li
206.45 441.568 li
209.001 443.75 li
211.552 445.92 li
214.103 448.076 li
216.654 450.218 li
219.205 452.349 li
221.757 454.473 li
224.308 456.597 li
226.859 458.731 li
229.41 460.883 li
231.961 463.061 li
234.512 465.269 li
237.064 467.508 li
239.615 469.773 li
242.166 472.057 li
244.717 474.351 li
247.268 476.646 li
249.82 478.935 li
252.371 481.212 li
254.922 483.475 li
257.473 485.726 li
260.024 487.964 li
262.575 490.192 li
265.127 492.414 li
267.678 494.63 li
270.229 496.844 li
272.78 499.055 li
166.038 412.037 mo
166.038 412.037 li
168.589 414.247 li
171.14 416.456 li
173.691 418.665 li
176.243 420.875 li
178.794 423.084 li
181.345 425.293 li
183.896 427.503 li
186.447 429.712 li
188.999 431.921 li
191.55 434.129 li
194.101 436.337 li
196.652 438.543 li
199.204 440.748 li
201.755 442.949 li
204.306 445.147 li
206.857 447.338 li
209.408 449.524 li
211.959 451.704 li
214.511 453.877 li
217.062 456.048 li
219.613 458.218 li
222.164 460.391 li
224.715 462.573 li
227.266 464.767 li
229.818 466.974 li
232.369 469.195 li
234.92 471.428 li
237.471 473.671 li
240.022 475.919 li
242.573 478.168 li
245.125 480.415 li
247.676 482.656 li
250.227 484.891 li
252.778 487.12 li
255.329 489.343 li
257.88 491.561 li
260.432 493.777 li
262.983 495.99 li
265.534 498.201 li
268.085 500.412 li
0.25 gry
@
353.836 357.825 mo
353.836 357.825 li
349.141 359.18 li
344.446 360.535 li
339.751 361.891 li
335.056 363.246 li
330.361 364.601 li
325.666 365.957 li
320.971 367.312 li
316.276 368.667 li
311.581 370.022 li
306.886 371.378 li
302.191 372.733 li
297.496 374.088 li
292.802 375.443 li
288.107 376.798 li
283.412 378.152 li
278.717 379.507 li
274.022 380.863 li
269.327 382.22 li
264.632 383.575 li
259.937 384.931 li
255.242 386.286 li
250.547 387.641 li
245.852 388.997 li
241.157 390.352 li
236.462 391.708 li
231.767 393.063 li
227.072 394.418 li
222.377 395.774 li
217.682 397.129 li
212.988 398.484 li
208.293 399.84 li
203.598 401.195 li
198.903 402.55 li
194.208 403.905 li
189.513 405.261 li
184.818 406.616 li
180.123 407.971 li
175.428 409.327 li
170.733 410.682 li
166.038 412.037 li
356.387 360.034 mo
356.387 360.034 li
351.692 361.39 li
346.997 362.745 li
342.302 364.1 li
337.607 365.455 li
332.912 366.811 li
328.217 368.166 li
323.522 369.521 li
318.827 370.877 li
314.132 372.232 li
309.438 373.587 li
304.743 374.943 li
300.048 376.298 li
295.353 377.652 li
290.658 379.003 li
285.963 380.351 li
281.268 381.702 li
276.573 383.062 li
271.878 384.425 li
267.183 385.784 li
262.488 387.14 li
257.793 388.496 li
253.098 389.851 li
248.403 391.206 li
243.708 392.561 li
239.013 393.917 li
234.318 395.272 li
229.623 396.627 li
224.929 397.983 li
220.234 399.338 li
215.539 400.693 li
210.844 402.049 li
206.149 403.404 li
201.454 404.759 li
196.759 406.115 li
192.064 407.47 li
187.369 408.825 li
182.674 410.181 li
177.979 411.536 li
173.284 412.891 li
168.589 414.247 li
358.938 362.243 mo
358.938 362.243 li
354.243 363.599 li
349.548 364.954 li
344.854 366.309 li
340.159 367.665 li
335.464 369.02 li
330.769 370.375 li
326.073 371.731 li
321.379 373.086 li
316.684 374.441 li
311.989 375.797 li
307.294 377.152 li
302.599 378.506 li
297.904 379.856 li
293.209 381.189 li
288.514 382.506 li
283.819 383.838 li
279.124 385.214 li
274.429 386.608 li
269.734 387.987 li
265.039 389.349 li
260.345 390.705 li
255.65 392.06 li
250.954 393.416 li
246.259 394.771 li
241.564 396.126 li
236.87 397.481 li
232.175 398.836 li
227.48 400.192 li
222.785 401.547 li
218.09 402.902 li
213.395 404.258 li
208.7 405.613 li
204.005 406.969 li
199.31 408.324 li
194.615 409.679 li
189.92 411.035 li
185.225 412.39 li
180.53 413.745 li
175.835 415.101 li
171.14 416.456 li
361.489 364.453 mo
361.489 364.453 li
356.795 365.808 li
352.1 367.163 li
347.405 368.519 li
342.71 369.874 li
338.015 371.229 li
333.32 372.585 li
328.625 373.94 li
323.93 375.295 li
319.235 376.65 li
314.54 378.006 li
309.845 379.361 li
305.15 380.713 li
300.455 382.044 li
295.76 383.309 li
291.065 384.49 li
286.37 385.726 li
281.675 387.161 li
276.98 388.695 li
272.286 390.163 li
267.591 391.553 li
262.896 392.914 li
258.201 394.27 li
253.506 395.625 li
248.811 396.98 li
244.116 398.335 li
239.421 399.69 li
234.726 401.045 li
230.031 402.401 li
225.336 403.756 li
220.641 405.111 li
215.946 406.467 li
211.251 407.822 li
206.556 409.178 li
201.861 410.533 li
197.166 411.889 li
192.471 413.244 li
187.777 414.599 li
183.081 415.955 li
178.386 417.31 li
173.691 418.665 li
364.041 366.662 mo
364.041 366.662 li
359.346 368.018 li
354.651 369.373 li
349.956 370.728 li
345.261 372.084 li
340.566 373.439 li
335.871 374.794 li
331.176 376.149 li
326.481 377.505 li
321.786 378.86 li
317.091 380.215 li
312.396 381.57 li
307.701 382.915 li
303.006 384.191 li
298.311 385.231 li
293.616 385.944 li
288.921 386.801 li
284.227 388.397 li
279.532 390.427 li
274.837 392.239 li
270.142 393.741 li
265.447 395.121 li
260.752 396.479 li
256.057 397.834 li
251.362 399.189 li
246.667 400.543 li
241.972 401.899 li
237.277 403.253 li
232.582 404.609 li
227.887 405.964 li
223.192 407.32 li
218.497 408.675 li
213.802 410.031 li
209.107 411.386 li
204.412 412.742 li
199.718 414.098 li
195.023 415.453 li
190.328 416.809 li
185.633 418.164 li
180.938 419.52 li
176.243 420.875 li
366.592 368.872 mo
366.592 368.872 li
361.897 370.227 li
357.202 371.582 li
352.507 372.938 li
347.812 374.293 li
343.117 375.648 li
338.422 377.004 li
333.727 378.359 li
329.032 379.714 li
324.337 381.07 li
319.642 382.425 li
314.947 383.778 li
310.252 385.106 li
305.557 386.247 li
300.862 386.694 li
296.168 386.088 li
291.473 385.745 li
286.778 387.658 li
282.083 391.116 li
277.388 394 li
272.693 395.875 li
267.998 397.323 li
263.303 398.687 li
258.608 400.042 li
253.913 401.397 li
249.218 402.75 li
244.523 404.105 li
239.828 405.459 li
235.133 406.814 li
230.438 408.17 li
225.743 409.525 li
221.048 410.882 li
216.354 412.238 li
211.659 413.594 li
206.964 414.95 li
202.269 416.307 li
197.574 417.662 li
192.879 419.018 li
188.184 420.374 li
183.489 421.729 li
178.794 423.084 li
369.143 371.081 mo
369.143 371.081 li
364.448 372.436 li
359.753 373.791 li
355.058 375.147 li
350.363 376.502 li
345.668 377.858 li
340.973 379.213 li
336.279 380.568 li
331.583 381.924 li
326.888 383.279 li
322.193 384.634 li
317.498 385.985 li
312.804 387.281 li
308.109 388.153 li
303.414 387.348 li
298.719 383.749 li
294.024 380.365 li
289.329 382.64 li
284.634 389.397 li
279.939 394.99 li
275.244 397.867 li
270.549 399.509 li
265.854 400.893 li
261.159 402.249 li
256.464 403.602 li
251.769 404.955 li
247.074 406.308 li
242.379 407.661 li
237.684 409.016 li
232.989 410.371 li
228.295 411.727 li
223.6 413.084 li
218.905 414.442 li
214.21 415.8 li
209.515 417.158 li
204.82 418.515 li
200.125 419.871 li
195.43 421.227 li
190.735 422.583 li
186.04 423.938 li
181.345 425.293 li
371.694 373.29 mo
371.694 373.29 li
366.999 374.646 li
362.304 376.001 li
357.609 377.356 li
352.914 378.712 li
348.22 380.067 li
343.525 381.422 li
338.83 382.777 li
334.134 384.133 li
329.439 385.488 li
324.745 386.843 li
320.05 388.191 li
315.355 389.442 li
310.66 389.892 li
305.965 386.993 li
301.27 378.001 li
296.575 368.502 li
291.88 370.666 li
287.185 383.454 li
282.49 394.526 li
277.795 399.576 li
273.1 401.664 li
268.405 403.097 li
263.711 404.453 li
259.016 405.804 li
254.32 407.154 li
249.625 408.504 li
244.93 409.855 li
240.236 411.208 li
235.541 412.563 li
230.846 413.92 li
226.151 415.28 li
221.456 416.64 li
216.761 418.001 li
212.066 419.361 li
207.371 420.72 li
202.676 422.078 li
197.981 423.435 li
193.286 424.791 li
188.591 426.147 li
183.896 427.503 li
374.245 375.5 mo
374.245 375.5 li
369.55 376.855 li
364.855 378.21 li
360.161 379.566 li
355.466 380.921 li
350.771 382.276 li
346.076 383.632 li
341.381 384.987 li
336.686 386.342 li
331.991 387.697 li
327.296 389.052 li
322.601 390.398 li
317.906 391.598 li
313.211 391.552 li
308.516 385.974 li
303.821 369.454 li
299.126 350.374 li
294.431 351.017 li
289.736 372.299 li
285.041 392.083 li
280.346 400.861 li
275.652 403.766 li
270.957 405.293 li
266.262 406.653 li
261.567 407.999 li
256.871 409.343 li
252.177 410.686 li
247.482 412.032 li
242.787 413.381 li
238.092 414.736 li
233.397 416.095 li
228.702 417.46 li
224.007 418.826 li
219.312 420.193 li
214.617 421.559 li
209.922 422.922 li
205.227 424.283 li
200.532 425.642 li
195.838 427 li
191.143 428.356 li
186.447 429.712 li
376.796 377.709 mo
376.796 377.709 li
372.102 379.065 li
367.407 380.42 li
362.712 381.775 li
358.017 383.131 li
353.322 384.486 li
348.627 385.841 li
343.932 387.196 li
339.237 388.551 li
334.542 389.906 li
329.847 391.261 li
325.152 392.605 li
320.457 393.771 li
315.762 393.329 li
311.067 385.329 li
306.372 361.147 li
301.677 330.829 li
296.982 327.858 li
292.288 357.78 li
287.593 388.041 li
282.898 401.742 li
278.203 405.809 li
273.508 407.481 li
268.813 408.844 li
264.118 410.181 li
259.423 411.513 li
254.728 412.844 li
250.033 414.179 li
245.338 415.522 li
240.643 416.874 li
235.948 418.238 li
231.253 419.611 li
226.558 420.989 li
221.863 422.368 li
217.168 423.745 li
212.473 425.117 li
207.779 426.484 li
203.084 427.847 li
198.389 429.207 li
193.694 430.565 li
188.999 431.921 li
379.348 379.918 mo
379.348 379.918 li
374.653 381.274 li
369.958 382.629 li
365.263 383.984 li
360.568 385.34 li
355.873 386.695 li
351.178 388.05 li
346.483 389.405 li
341.788 390.76 li
337.093 392.115 li
332.398 393.47 li
327.703 394.814 li
323.008 395.977 li
318.313 395.424 li
313.618 386.329 li
308.923 357.504 li
304.229 318.415 li
299.534 310.352 li
294.839 345.343 li
290.144 384.186 li
285.449 402.538 li
280.754 407.824 li
276.059 409.658 li
271.364 411.02 li
266.669 412.34 li
261.974 413.651 li
257.279 414.96 li
252.584 416.275 li
247.889 417.604 li
243.194 418.953 li
238.499 420.323 li
233.804 421.711 li
229.109 423.11 li
224.414 424.511 li
219.72 425.909 li
215.025 427.297 li
210.33 428.677 li
205.635 430.047 li
200.94 431.412 li
196.245 432.772 li
191.55 434.129 li
381.899 382.128 mo
381.899 382.128 li
377.204 383.483 li
372.509 384.838 li
367.814 386.194 li
363.119 387.549 li
358.424 388.904 li
353.729 390.259 li
349.034 391.614 li
344.339 392.968 li
339.645 394.323 li
334.949 395.677 li
330.254 397.022 li
325.559 398.216 li
320.864 397.893 li
316.17 389.584 li
311.475 361.432 li
306.78 320.208 li
302.085 307.708 li
297.39 341.534 li
292.695 383.083 li
288 403.806 li
283.305 409.874 li
278.61 411.823 li
273.915 413.175 li
269.22 414.465 li
264.525 415.74 li
259.83 417.009 li
255.135 418.288 li
250.44 419.593 li
245.745 420.933 li
241.05 422.313 li
236.355 423.726 li
231.661 425.161 li
226.966 426.602 li
222.271 428.036 li
217.576 429.454 li
212.881 430.855 li
208.186 432.24 li
203.491 433.613 li
198.796 434.977 li
194.101 436.337 li
384.45 384.337 mo
384.45 384.337 li
379.755 385.693 li
375.06 387.048 li
370.365 388.403 li
365.67 389.758 li
360.975 391.113 li
356.28 392.467 li
351.586 393.822 li
346.891 395.175 li
342.196 396.528 li
337.5 397.881 li
332.805 399.228 li
328.111 400.47 li
323.416 400.602 li
318.721 394.558 li
314.026 372.045 li
309.331 336.418 li
304.636 322.414 li
299.941 349.403 li
295.246 386.378 li
290.551 405.995 li
285.856 412.023 li
281.161 413.977 li
276.466 415.298 li
271.771 416.539 li
267.077 417.753 li
262.381 418.958 li
257.686 420.177 li
252.991 421.438 li
248.296 422.761 li
243.602 424.154 li
238.907 425.609 li
234.212 427.102 li
229.517 428.609 li
224.822 430.104 li
220.127 431.573 li
215.432 433.011 li
210.737 434.42 li
206.042 435.807 li
201.347 437.18 li
196.652 438.543 li
387.001 386.547 mo
387.001 386.547 li
382.306 387.902 li
377.611 389.257 li
372.916 390.612 li
368.221 391.967 li
363.527 393.321 li
358.832 394.675 li
354.137 396.027 li
349.442 397.379 li
344.747 398.729 li
340.052 400.079 li
335.357 401.425 li
330.662 402.713 li
325.967 403.329 li
321.272 399.994 li
316.577 385.375 li
311.882 360.22 li
307.187 348.224 li
302.492 366.068 li
297.797 393.506 li
293.102 409.106 li
288.407 414.283 li
283.712 416.115 li
279.018 417.377 li
274.323 418.543 li
269.628 419.664 li
264.932 420.765 li
260.238 421.889 li
255.543 423.079 li
250.848 424.372 li
246.153 425.782 li
241.458 427.297 li
236.763 428.882 li
232.068 430.491 li
227.373 432.083 li
222.678 433.634 li
217.983 435.131 li
213.288 436.581 li
208.593 437.992 li
203.898 439.377 li
199.204 440.748 li
389.552 388.756 mo
389.552 388.756 li
384.857 390.111 li
380.162 391.466 li
375.468 392.821 li
370.773 394.175 li
366.078 395.528 li
361.383 396.879 li
356.688 398.229 li
351.993 399.575 li
347.298 400.92 li
342.603 402.264 li
337.908 403.607 li
333.213 404.924 li
328.518 405.907 li
323.823 404.802 li
319.128 397.314 li
314.433 382.982 li
309.738 375.065 li
305.043 385.018 li
300.348 402.15 li
295.654 412.688 li
290.959 416.605 li
286.264 418.228 li
281.569 419.402 li
276.874 420.459 li
272.179 421.442 li
267.484 422.391 li
262.789 423.37 li
258.094 424.45 li
253.399 425.691 li
248.704 427.121 li
244.009 428.722 li
239.314 430.438 li
234.619 432.199 li
229.924 433.939 li
225.229 435.612 li
220.534 437.202 li
215.839 438.713 li
211.145 440.162 li
206.45 441.568 li
201.755 442.949 li
392.104 390.965 mo
392.104 390.965 li
387.409 392.32 li
382.714 393.675 li
378.019 395.029 li
373.324 396.382 li
368.629 397.733 li
363.934 399.08 li
359.239 400.422 li
354.544 401.76 li
349.849 403.094 li
345.154 404.426 li
340.459 405.758 li
335.764 407.085 li
331.069 408.281 li
326.374 408.57 li
321.679 405.883 li
316.984 399.581 li
312.289 395.745 li
307.595 400.712 li
302.9 409.944 li
298.205 416.179 li
293.51 418.913 li
288.815 420.306 li
284.12 421.365 li
279.425 422.273 li
274.73 423.066 li
270.035 423.802 li
265.34 424.574 li
260.645 425.494 li
255.95 426.655 li
251.255 428.102 li
246.56 429.815 li
241.865 431.712 li
237.17 433.686 li
232.475 435.633 li
227.78 437.483 li
223.086 439.207 li
218.391 440.808 li
213.696 442.313 li
209.001 443.75 li
204.306 445.147 li
394.655 393.175 mo
394.655 393.175 li
389.96 394.529 li
385.265 395.884 li
380.57 397.236 li
375.875 398.587 li
371.18 399.933 li
366.485 401.272 li
361.79 402.603 li
357.095 403.924 li
352.4 405.238 li
347.705 406.547 li
343.01 407.859 li
338.315 409.179 li
333.62 410.469 li
328.925 411.447 li
324.23 411.29 li
319.536 409.582 li
314.841 408.599 li
310.146 411.175 li
305.451 415.778 li
300.756 419.252 li
296.061 421.152 li
291.366 422.345 li
286.671 423.263 li
281.976 423.981 li
277.281 424.528 li
272.586 424.984 li
267.891 425.481 li
263.196 426.18 li
258.501 427.222 li
253.806 428.68 li
249.111 430.53 li
244.416 432.659 li
239.721 434.913 li
235.027 437.138 li
230.332 439.226 li
225.637 441.131 li
220.942 442.858 li
216.247 444.439 li
211.552 445.92 li
206.857 447.338 li
397.206 395.384 mo
397.206 395.384 li
392.511 396.738 li
387.816 398.091 li
383.121 399.442 li
378.426 400.788 li
373.731 402.126 li
369.036 403.451 li
364.341 404.761 li
359.646 406.053 li
354.952 407.33 li
350.257 408.6 li
345.562 409.877 li
340.866 411.174 li
336.171 412.491 li
331.477 413.748 li
326.782 414.67 li
322.087 415.062 li
317.392 415.606 li
312.697 417.323 li
308.002 419.797 li
303.307 421.881 li
298.612 423.314 li
293.917 424.348 li
289.222 425.106 li
284.527 425.596 li
279.832 425.845 li
275.138 425.956 li
270.443 426.108 li
265.747 426.524 li
261.052 427.404 li
256.357 428.858 li
251.662 430.862 li
246.968 433.271 li
242.273 435.868 li
237.578 438.439 li
232.883 440.83 li
228.188 442.968 li
223.493 444.856 li
218.798 446.538 li
214.103 448.076 li
209.408 449.524 li
399.757 397.593 mo
399.757 397.593 li
395.062 398.947 li
390.367 400.298 li
385.672 401.645 li
380.977 402.983 li
376.282 404.307 li
371.588 405.609 li
366.893 406.884 li
362.198 408.127 li
357.503 409.344 li
352.808 410.55 li
348.113 411.767 li
343.418 413.023 li
338.723 414.336 li
334.028 415.692 li
329.333 417.013 li
324.638 418.211 li
319.943 419.434 li
315.248 420.956 li
310.553 422.668 li
305.858 424.202 li
301.163 425.417 li
296.468 426.326 li
291.773 426.915 li
287.079 427.153 li
282.384 427.066 li
277.689 426.781 li
272.994 426.529 li
268.298 426.605 li
263.604 427.278 li
258.909 428.705 li
254.214 430.87 li
249.519 433.588 li
244.824 436.579 li
240.129 439.554 li
235.434 442.303 li
230.739 444.721 li
226.044 446.804 li
221.349 448.609 li
216.654 450.218 li
211.959 451.704 li
402.308 399.802 mo
402.308 399.802 li
397.613 401.154 li
392.918 402.503 li
388.223 403.844 li
383.529 405.17 li
378.834 406.472 li
374.139 407.737 li
369.444 408.955 li
364.749 410.12 li
360.054 411.243 li
355.359 412.347 li
350.664 413.472 li
345.969 414.663 li
341.274 415.954 li
336.579 417.356 li
331.884 418.84 li
327.189 420.351 li
322.494 421.875 li
317.799 423.436 li
313.104 424.974 li
308.409 426.354 li
303.714 427.484 li
299.02 428.298 li
294.325 428.723 li
289.63 428.704 li
284.935 428.268 li
280.24 427.564 li
275.545 426.876 li
270.85 426.572 li
266.155 427 li
261.46 428.373 li
256.765 430.685 li
252.07 433.72 li
247.375 437.126 li
242.68 440.538 li
237.985 443.68 li
233.29 446.409 li
228.595 448.712 li
223.9 450.659 li
219.205 452.349 li
214.511 453.877 li
404.859 402.01 mo
404.859 402.01 li
400.164 403.361 li
395.47 404.706 li
390.775 406.038 li
386.08 407.346 li
381.385 408.614 li
376.69 409.823 li
371.995 410.956 li
367.3 412.005 li
362.605 412.986 li
357.91 413.939 li
353.215 414.927 li
348.52 416.022 li
343.825 417.281 li
339.13 418.724 li
334.435 420.328 li
329.74 422.03 li
325.045 423.758 li
320.35 425.448 li
315.655 427.031 li
310.961 428.422 li
306.266 429.538 li
301.571 430.286 li
296.876 430.569 li
292.181 430.317 li
287.486 429.552 li
282.791 428.445 li
278.096 427.326 li
273.401 426.635 li
268.706 426.797 li
264.011 428.084 li
259.316 430.512 li
254.621 433.836 li
249.926 437.641 li
245.231 441.484 li
240.536 445.021 li
235.841 448.068 li
231.146 450.601 li
226.452 452.696 li
221.757 454.473 li
217.062 456.048 li
407.411 404.218 mo
407.411 404.218 li
402.716 405.567 li
398.021 406.905 li
393.326 408.224 li
388.631 409.506 li
383.936 410.727 li
379.241 411.856 li
374.546 412.868 li
369.851 413.754 li
365.156 414.535 li
360.461 415.275 li
355.766 416.073 li
351.071 417.036 li
346.376 418.25 li
341.681 419.749 li
336.986 421.497 li
332.291 423.404 li
327.596 425.355 li
322.902 427.239 li
318.207 428.962 li
313.512 430.441 li
308.817 431.591 li
304.122 432.313 li
299.427 432.496 li
294.732 432.061 li
290.037 431.027 li
285.342 429.577 li
280.647 428.079 li
275.952 427.033 li
271.257 426.932 li
266.562 428.107 li
261.867 430.601 li
257.172 434.152 li
252.477 438.294 li
247.782 442.515 li
243.088 446.409 li
238.393 449.75 li
233.698 452.499 li
229.003 454.735 li
224.308 456.597 li
219.613 458.218 li
409.962 406.425 mo
409.962 406.425 li
405.267 407.77 li
400.572 409.101 li
395.877 410.403 li
391.182 411.65 li
386.487 412.806 li
381.792 413.828 li
377.097 414.679 li
372.402 415.345 li
367.707 415.862 li
363.012 416.322 li
358.318 416.869 li
353.623 417.661 li
348.927 418.822 li
344.232 420.397 li
339.538 422.333 li
334.843 424.501 li
330.148 426.734 li
325.453 428.876 li
320.758 430.803 li
316.063 432.424 li
311.368 433.654 li
306.673 434.395 li
301.978 434.536 li
297.283 433.996 li
292.588 432.788 li
287.893 431.1 li
283.198 429.322 li
278.504 427.993 li
273.808 427.662 li
269.113 428.71 li
264.418 431.208 li
259.723 434.893 li
255.029 439.267 li
250.334 443.768 li
245.639 447.938 li
240.944 451.514 li
236.249 454.439 li
231.554 456.796 li
226.859 458.731 li
222.164 460.391 li
412.513 408.632 mo
412.513 408.632 li
407.818 409.973 li
403.123 411.294 li
398.428 412.573 li
393.733 413.775 li
389.038 414.85 li
384.343 415.738 li
379.648 416.386 li
374.954 416.778 li
370.259 416.965 li
365.564 417.077 li
360.869 417.316 li
356.174 417.9 li
351.479 419 li
346.784 420.674 li
342.089 422.848 li
337.394 425.34 li
332.699 427.922 li
328.004 430.384 li
323.309 432.57 li
318.614 434.379 li
313.919 435.732 li
309.224 436.543 li
304.529 436.712 li
299.834 436.158 li
295.139 434.895 li
290.445 433.106 li
285.75 431.183 li
281.055 429.684 li
276.36 429.186 li
271.664 430.106 li
266.97 432.544 li
262.275 436.252 li
257.58 440.721 li
252.885 445.365 li
248.19 449.693 li
243.495 453.415 li
238.8 456.457 li
234.105 458.896 li
229.41 460.883 li
224.715 462.573 li
415.064 410.839 mo
415.064 410.839 li
410.369 412.174 li
405.674 413.483 li
400.979 414.735 li
396.284 415.885 li
391.589 416.864 li
386.895 417.592 li
382.2 418.003 li
377.505 418.075 li
372.81 417.878 li
368.115 417.588 li
363.42 417.472 li
358.725 417.821 li
354.03 418.857 li
349.335 420.653 li
344.64 423.108 li
339.945 425.977 li
335.25 428.964 li
330.555 431.796 li
325.86 434.284 li
321.165 436.317 li
316.47 437.831 li
311.775 438.759 li
307.08 439.023 li
302.386 438.554 li
297.691 437.363 li
292.996 435.623 li
288.301 433.713 li
283.606 432.179 li
278.911 431.6 li
274.216 432.408 li
269.521 434.731 li
264.826 438.345 li
260.131 442.759 li
255.436 447.39 li
250.741 451.736 li
246.046 455.495 li
241.351 458.576 li
236.656 461.049 li
231.961 463.061 li
227.266 464.767 li
417.615 413.045 mo
417.615 413.045 li
412.92 414.375 li
408.225 415.67 li
403.53 416.893 li
398.836 417.984 li
394.141 418.857 li
389.446 419.412 li
384.751 419.564 li
380.056 419.289 li
375.361 418.678 li
370.666 417.957 li
365.971 417.465 li
361.276 417.568 li
356.581 418.544 li
351.886 420.48 li
347.191 423.241 li
342.496 426.519 li
337.801 429.939 li
333.106 433.167 li
328.411 435.979 li
323.716 438.257 li
319.021 439.955 li
314.327 441.038 li
309.632 441.454 li
304.937 441.155 li
300.242 440.155 li
295.547 438.609 li
290.852 436.867 li
286.157 435.438 li
281.462 434.875 li
276.767 435.605 li
272.072 437.772 li
267.377 441.19 li
262.682 445.407 li
257.987 449.869 li
253.292 454.092 li
248.597 457.772 li
243.902 460.811 li
239.207 463.264 li
234.512 465.269 li
229.818 466.974 li
420.166 415.25 mo
420.166 415.25 li
415.471 416.575 li
410.777 417.856 li
406.082 419.049 li
401.387 420.081 li
396.692 420.848 li
391.997 421.229 li
387.302 421.122 li
382.607 420.503 li
377.912 419.483 li
373.217 418.34 li
368.522 417.484 li
363.827 417.356 li
359.132 418.283 li
354.438 420.365 li
349.742 423.433 li
345.047 427.115 li
340.352 430.961 li
335.657 434.575 li
330.962 437.701 li
326.268 440.222 li
321.573 442.11 li
316.878 443.367 li
312.183 443.975 li
307.488 443.91 li
302.793 443.192 li
298.098 441.959 li
293.403 440.516 li
288.708 439.317 li
284.013 438.864 li
279.318 439.558 li
274.623 441.552 li
269.928 444.698 li
265.233 448.601 li
260.538 452.764 li
255.843 456.739 li
251.148 460.237 li
246.454 463.156 li
241.759 465.54 li
237.064 467.508 li
232.369 469.195 li
422.718 417.457 mo
422.718 417.457 li
418.023 418.775 li
413.328 420.044 li
408.633 421.21 li
403.938 422.188 li
399.243 422.858 li
394.548 423.082 li
389.853 422.744 li
385.158 421.819 li
380.463 420.44 li
375.768 418.929 li
371.073 417.761 li
366.379 417.439 li
361.684 418.335 li
356.989 420.557 li
352.293 423.903 li
347.598 427.942 li
342.904 432.159 li
338.209 436.108 li
333.514 439.506 li
328.819 442.238 li
324.124 444.302 li
319.429 445.731 li
314.734 446.546 li
310.039 446.75 li
305.344 446.372 li
300.649 445.528 li
295.954 444.476 li
291.259 443.6 li
286.564 443.336 li
281.87 444.039 li
277.174 445.861 li
272.479 448.695 li
267.784 452.211 li
263.089 455.983 li
258.395 459.617 li
253.7 462.854 li
249.005 465.594 li
244.31 467.867 li
239.615 469.773 li
234.92 471.428 li
425.269 419.663 mo
425.269 419.663 li
420.574 420.978 li
415.879 422.236 li
411.184 423.38 li
406.489 424.316 li
401.794 424.911 li
397.099 425.014 li
392.404 424.499 li
387.709 423.343 li
383.014 421.697 li
378.32 419.918 li
373.625 418.527 li
368.93 418.075 li
364.235 418.965 li
359.54 421.303 li
354.845 424.863 li
350.15 429.169 li
345.455 433.658 li
340.76 437.849 li
336.065 441.443 li
331.37 444.333 li
326.675 446.535 li
321.98 448.116 li
317.285 449.131 li
312.59 449.609 li
307.895 449.587 li
303.2 449.165 li
298.505 448.547 li
293.811 448.047 li
289.116 448.023 li
284.421 448.776 li
279.725 450.447 li
275.03 452.961 li
270.336 456.06 li
265.641 459.397 li
260.946 462.641 li
256.251 465.572 li
251.556 468.095 li
246.861 470.23 li
242.166 472.057 li
237.471 473.671 li
427.82 421.871 mo
427.82 421.871 li
423.125 423.183 li
418.43 424.434 li
413.735 425.565 li
409.04 426.476 li
404.345 427.027 li
399.65 427.06 li
394.955 426.447 li
390.261 425.165 li
385.566 423.379 li
380.871 421.465 li
376.176 419.972 li
371.481 419.472 li
366.786 420.379 li
362.091 422.796 li
357.396 426.48 li
352.701 430.927 li
348.006 435.553 li
343.311 439.862 li
338.616 443.552 li
333.921 446.523 li
329.226 448.812 li
324.531 450.509 li
319.836 451.697 li
315.141 452.428 li
310.446 452.746 li
305.752 452.734 li
301.057 452.55 li
296.362 452.436 li
291.667 452.674 li
286.972 453.507 li
282.277 455.054 li
277.582 457.273 li
272.887 459.969 li
268.192 462.871 li
263.497 465.719 li
258.802 468.33 li
254.107 470.624 li
249.412 472.611 li
244.717 474.351 li
240.022 475.919 li
430.371 424.08 mo
430.371 424.08 li
425.676 425.391 li
420.981 426.641 li
416.286 427.769 li
411.591 428.674 li
406.896 429.218 li
402.202 429.243 li
397.507 428.622 li
392.812 427.338 li
388.117 425.557 li
383.422 423.663 li
378.727 422.201 li
374.032 421.741 li
369.337 422.688 li
364.642 425.136 li
359.947 428.834 li
355.252 433.279 li
350.557 437.888 li
345.862 442.175 li
341.167 445.847 li
336.472 448.816 li
331.777 451.132 li
327.082 452.902 li
322.388 454.225 li
317.693 455.169 li
312.998 455.784 li
308.303 456.139 li
303.608 456.351 li
298.913 456.599 li
294.218 457.094 li
289.523 458.021 li
284.828 459.479 li
280.133 461.445 li
275.438 463.781 li
270.743 466.287 li
266.048 468.765 li
261.353 471.074 li
256.658 473.149 li
251.963 474.992 li
247.268 476.646 li
242.573 478.168 li
432.922 426.29 mo
432.922 426.29 li
428.227 427.602 li
423.532 428.856 li
418.838 429.991 li
414.143 430.913 li
409.448 431.488 li
404.753 431.566 li
400.058 431.03 li
395.363 429.866 li
390.668 428.237 li
385.973 426.512 li
381.278 425.212 li
376.583 424.874 li
371.888 425.877 li
367.193 428.303 li
362.498 431.906 li
357.803 436.204 li
353.108 440.646 li
348.413 444.774 li
343.718 448.319 li
339.023 451.205 li
334.329 453.49 li
329.634 455.286 li
324.939 456.702 li
320.244 457.812 li
315.549 458.669 li
310.854 459.328 li
306.159 459.875 li
301.464 460.436 li
296.769 461.161 li
292.074 462.184 li
287.379 463.584 li
282.684 465.349 li
277.989 467.388 li
273.294 469.558 li
268.599 471.718 li
263.904 473.764 li
259.209 475.644 li
254.514 477.358 li
249.82 478.935 li
245.125 480.415 li
435.473 428.501 mo
435.473 428.501 li
430.779 429.817 li
426.084 431.078 li
421.389 432.231 li
416.694 433.188 li
411.999 433.827 li
407.304 434.014 li
402.609 433.643 li
397.914 432.706 li
393.219 431.354 li
388.524 429.925 li
383.829 428.893 li
379.134 428.743 li
374.439 429.813 li
369.745 432.167 li
365.05 435.578 li
360.354 439.606 li
355.659 443.752 li
350.964 447.608 li
346.27 450.934 li
341.575 453.67 li
336.88 455.875 li
332.185 457.658 li
327.49 459.126 li
322.795 460.354 li
318.1 461.394 li
313.405 462.29 li
308.71 463.101 li
304.015 463.914 li
299.32 464.829 li
294.625 465.942 li
289.93 467.308 li
285.235 468.924 li
280.54 470.732 li
275.845 472.637 li
271.15 474.542 li
266.455 476.373 li
261.761 478.093 li
257.066 479.7 li
252.371 481.212 li
247.676 482.656 li
438.025 430.713 mo
438.025 430.713 li
433.33 432.033 li
428.635 433.306 li
423.94 434.483 li
419.245 435.489 li
414.55 436.219 li
409.855 436.555 li
405.16 436.408 li
400.465 435.774 li
395.77 434.788 li
391.075 433.744 li
386.38 433.054 li
381.686 433.134 li
376.991 434.27 li
372.296 436.514 li
367.601 439.661 li
362.905 443.331 li
358.211 447.092 li
353.516 450.596 li
348.821 453.642 li
344.126 456.183 li
339.431 458.273 li
334.736 460.014 li
330.041 461.502 li
325.346 462.807 li
320.651 463.975 li
315.956 465.042 li
311.261 466.049 li
306.566 467.052 li
301.871 468.115 li
297.177 469.302 li
292.482 470.652 li
287.786 472.165 li
283.091 473.806 li
278.396 475.514 li
273.702 477.227 li
269.007 478.895 li
264.312 480.492 li
259.617 482.015 li
254.922 483.475 li
250.227 484.891 li
440.576 432.926 mo
440.576 432.926 li
435.881 434.252 li
431.186 435.538 li
426.491 436.744 li
421.796 437.807 li
417.101 438.641 li
412.406 439.148 li
407.711 439.258 li
403.016 438.967 li
398.321 438.391 li
393.627 437.775 li
388.932 437.46 li
384.237 437.785 li
379.542 438.984 li
374.847 441.091 li
370.152 443.936 li
365.457 447.201 li
360.762 450.534 li
356.067 453.65 li
351.372 456.387 li
346.677 458.711 li
341.982 460.671 li
337.287 462.351 li
332.592 463.836 li
327.897 465.184 li
323.202 466.437 li
318.507 467.622 li
313.812 468.765 li
309.118 469.902 li
304.423 471.073 li
299.728 472.318 li
295.033 473.661 li
290.338 475.107 li
285.643 476.633 li
280.948 478.205 li
276.253 479.782 li
271.558 481.333 li
266.863 482.841 li
262.168 484.303 li
257.473 485.726 li
252.778 487.12 li
443.127 435.139 mo
443.127 435.139 li
438.432 436.47 li
433.737 437.77 li
429.042 439.006 li
424.347 440.129 li
419.652 441.07 li
414.957 441.752 li
410.262 442.122 li
405.568 442.179 li
400.873 442.016 li
396.178 441.828 li
391.483 441.882 li
386.788 442.444 li
382.093 443.695 li
377.398 445.657 li
372.703 448.192 li
368.008 451.05 li
363.313 453.955 li
358.618 456.686 li
353.923 459.118 li
349.228 461.227 li
344.533 463.055 li
339.838 464.669 li
335.143 466.136 li
330.448 467.506 li
325.754 468.81 li
321.059 470.069 li
316.364 471.302 li
311.669 472.528 li
306.974 473.773 li
302.279 475.059 li
297.584 476.403 li
292.889 477.808 li
288.194 479.261 li
283.499 480.742 li
278.804 482.228 li
274.109 483.7 li
269.414 485.147 li
264.719 486.567 li
260.024 487.964 li
255.329 489.343 li
445.679 437.352 mo
445.679 437.352 li
440.983 438.689 li
436.288 440.002 li
431.593 441.267 li
426.898 442.445 li
422.204 443.486 li
417.509 444.333 li
412.814 444.945 li
408.119 445.324 li
403.424 445.54 li
398.729 445.743 li
394.034 446.132 li
389.339 446.906 li
384.644 448.196 li
379.949 450.018 li
375.254 452.265 li
370.559 454.747 li
365.864 457.26 li
361.169 459.64 li
356.474 461.795 li
351.779 463.71 li
347.084 465.416 li
342.389 466.966 li
337.695 468.41 li
333 469.786 li
328.305 471.119 li
323.61 472.424 li
318.915 473.712 li
314.22 474.995 li
309.525 476.287 li
304.83 477.602 li
300.135 478.948 li
295.44 480.328 li
290.745 481.737 li
286.05 483.162 li
281.355 484.591 li
276.66 486.012 li
271.965 487.42 li
267.27 488.813 li
262.575 490.192 li
257.88 491.561 li
448.23 439.564 mo
448.23 439.564 li
443.534 440.906 li
438.839 442.231 li
434.145 443.52 li
429.45 444.747 li
424.755 445.875 li
420.06 446.864 li
415.365 447.685 li
410.67 448.34 li
405.975 448.881 li
401.28 449.416 li
396.585 450.087 li
391.89 451.036 li
387.195 452.355 li
382.5 454.052 li
377.805 456.049 li
373.111 458.211 li
368.415 460.391 li
363.72 462.473 li
359.025 464.395 li
354.33 466.146 li
349.636 467.749 li
344.941 469.243 li
340.246 470.664 li
335.551 472.04 li
330.856 473.387 li
326.161 474.718 li
321.466 476.038 li
316.771 477.354 li
312.076 478.675 li
307.381 480.008 li
302.686 481.357 li
297.991 482.724 li
293.296 484.107 li
288.601 485.499 li
283.906 486.894 li
279.211 488.285 li
274.516 489.669 li
269.821 491.045 li
265.127 492.414 li
260.432 493.777 li
450.781 441.776 mo
450.781 441.776 li
446.086 443.122 li
441.391 444.456 li
436.696 445.765 li
432.001 447.033 li
427.306 448.231 li
422.611 449.334 li
417.916 450.323 li
413.221 451.2 li
408.526 452 li
403.831 452.799 li
399.136 453.692 li
394.441 454.777 li
389.746 456.114 li
385.052 457.708 li
380.357 459.503 li
375.662 461.409 li
370.967 463.324 li
366.271 465.172 li
361.577 466.909 li
356.882 468.531 li
352.187 470.054 li
347.492 471.502 li
342.797 472.904 li
338.102 474.275 li
333.407 475.629 li
328.712 476.973 li
324.017 478.311 li
319.322 479.647 li
314.627 480.984 li
309.932 482.327 li
305.238 483.679 li
300.543 485.04 li
295.847 486.408 li
291.152 487.783 li
286.457 489.158 li
281.762 490.532 li
277.068 491.902 li
272.373 493.268 li
267.678 494.63 li
262.983 495.99 li
453.332 443.987 mo
453.332 443.987 li
448.637 445.336 li
443.942 446.677 li
439.247 448.002 li
434.552 449.3 li
429.857 450.552 li
425.162 451.742 li
420.467 452.858 li
415.772 453.901 li
411.077 454.896 li
406.382 455.891 li
401.688 456.949 li
396.993 458.133 li
392.298 459.481 li
387.603 460.994 li
382.908 462.638 li
378.213 464.35 li
373.518 466.068 li
368.823 467.741 li
364.128 469.343 li
359.433 470.87 li
354.738 472.332 li
350.043 473.748 li
345.348 475.133 li
340.653 476.5 li
335.958 477.856 li
331.263 479.207 li
326.568 480.554 li
321.873 481.9 li
317.179 483.246 li
312.484 484.595 li
307.789 485.949 li
303.094 487.306 li
298.398 488.668 li
293.704 490.032 li
289.009 491.397 li
284.314 492.761 li
279.619 494.124 li
274.924 495.485 li
270.229 496.844 li
265.534 498.201 li
455.883 446.198 mo
455.883 446.198 li
451.188 447.549 li
446.493 448.895 li
441.798 450.232 li
437.103 451.551 li
432.408 452.841 li
427.713 454.094 li
423.018 455.3 li
418.323 456.461 li
413.629 457.593 li
408.934 458.726 li
404.239 459.899 li
399.544 461.15 li
394.849 462.504 li
390.154 463.959 li
385.459 465.494 li
380.764 467.071 li
376.069 468.65 li
371.374 470.201 li
366.679 471.708 li
361.984 473.168 li
357.289 474.589 li
352.594 475.981 li
347.899 477.355 li
343.204 478.718 li
338.509 480.075 li
333.814 481.428 li
329.12 482.78 li
324.425 484.131 li
319.73 485.482 li
315.035 486.834 li
310.34 488.188 li
305.645 489.545 li
300.95 490.903 li
296.255 492.262 li
291.56 493.622 li
286.865 494.982 li
282.17 496.34 li
277.475 497.698 li
272.78 499.055 li
268.085 500.412 li
@
0 gry
true set_gvm
%ADOBeginSubsetFont: BRUPMX+SFBMR9 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginZRVCLC+SFBMR9 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/c <1C60D8A8C9B08A95A742A9906DE57A7252F675E874F78F2F2458032936A9BC2E1C8AADF0B5F88BBF1CDD3375D393BD5BE598180C64547D3A2E8107572F3F94ACF273D5E95A9AEDC8C6443184CE8E779D72BF75E0645E15A6BB1071A6D299297973B41FF8295E895C8735FFFD034D9D890888D4D110EA26CE1BD2A735C04A6F8C8A535874EDC2FC23> |-/d <1C60D8A8C9B08A95D388AD7207A1E6E2FDD0839A2DBE8CA158099E6F5E02973F7E1F6275716F5A31E45FBF425D64C65BD5A5F00DAEF09F254664479AE28D61A1E049D6435FF279DC3595A3E923BB8C18A9A537EAE6A4C603361A50CBD658A4EC70EA4FB5DD85B2375AF077AD156E9117A52D2BFFD94D51B43D3FF2F0E5A5FD76859B7BFD6659222E60F9> |-/g <1C60D8A8C9B08A95D388AD7207A19941788A2C8D37B4726AD3D53DCD87C5DD3905DDB19EAEFE1B737BEF419325C17A64A520121F9B31145996D11BBB4806863E85E848E5AC8289170FAC474CFD46B07BC62E3E51572DDFF4F14AF8447A4A34E168793AFE361E797AD56BEEA43D935C4ABC34FB86085B485E339ED8CE91AEEDD405355FB91C836327E3BFC20D38A1FC90B345F31CE74C9A93D74AC8F1F3BB83A3F2E008F7> |-/v <1C60D8A8C9B7445126457C8AF1DAD845DADCD8E9F180153AE218560B5907E71C99BB448E890B07E1011B6974CFCE1EDC286986AB9824B16DA93C0763B6263B366A1C15BE1991358F3BDB1DCA4ADA74C10AFC9B84> |-systemdict /gcheck known {setglobal} if end {end} ifendZRVCLC+SFBMR9 /Encoding getdup 99 /c putdup 100 /d putdup 103 /g putdup 118 /v putpop%ADOEndSubsetFont
reset_gvm
/ZRVCLC+SFBMR9*1 [40{/.notdef}rp /parenleft /parenright 16{/.notdef}rp /colon 14{/.notdef}rp /I 23{/.notdef}rp /a /b /c /d /e /.notdef /g /.notdef /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r /.notdef /t /.notdef /v 137{/.notdef}rp]ZRVCLC+SFBMR9 nfZRVCLC+SFBMR9*1 [8.96638 0 0 -8.96638 0 0 ]msf242.04 528.379 mo(\(c\)Iteration:)[3.71884 4.31987 7.55887 2.52066 3.4783 4.31989 3.23773 4.56058 3.47827 2.03568 4.80096 4.80124 0 ]xshZRVCLD+HFBRMI9*1 [8.96638 0 0 -8.96638 0 0 ]msf297.48 528.379 mo(t)shtrue set_gvm
%ADOBeginSubsetFont: OIHRMX+HFBR9 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginZRVCLE+HFBR9 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B780B392613AB4D36C5929575DA1A21A55F2D476BBF15241C16EE90104E5DC4662CF790CC079129AA9503DAB58712CC5E48212B7A8A4A5E72C5AAB4DCBD97F5A4A71EC559DCA10B9C8846D92AC2A8E7CA66B7DD369D80C93AD78F7916327B7E733504FE6037FD05300EFAA234EAA9279C138D81069E3D4E0F34D5FEC04D9F3FE115711F0886D0422EEDED29526F56FAA3E4F09AEC00B51AAD467187B0BCE4645B2254CC0E3FA2C213D2E7E875780C00CCE8E3284B03205E08FF4C1FE2F9544CD862885188D7920B24133ED2906C68B6159268C5203> |-/four <1C60D8A8C9B780B365F70BC36D562CC102915B00D3A04756AA508CE4E20253882867930C9685A391E6E54AB295EA4A5A78AE983D5FA3D338DBBF515138A47580B73BC47131AF9B33BDE4BDB121CA7DE69563CED78F4DAA133F398C5DCB9C9B286B87C92D4916F9C258F45EB89E06> |-systemdict /gcheck known {setglobal} if end {end} ifendZRVCLE+HFBR9 /Encoding getdup 51 /three putdup 52 /four putpop%ADOEndSubsetFont
reset_gvm
/ZRVCLE+HFBR9*1 [49{/.notdef}rp /one /.notdef /three /four /five 7{/.notdef}rp /equal 194{/.notdef}rp]ZRVCLE+HFBR9 nfZRVCLE+HFBR9*1 [8.96638 0 0 -8.96638 0 0 ]msf304.2 528.379 mo(=34)[9.71988 4.80002 0 ]xshZRVCLC+SFBMR9*1 [8.96638 0 0 -8.96638 0 0 ]msf326.639 528.379 mo(\(converged\))[3.71884 4.31989 4.80096 4.80121 4.19995 4.31989 3.23773 4.80124 4.31989 4.80124 0 ]xshtrue set_gvm
%ADOBeginSubsetFont: MCAQMX+SFBMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /MCAQMX+SFBMR10 def/FontInfo 5 dict dup begin/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 49 /one putdup 58 /colon putdup 65 /A putdup 68 /D putdup 69 /E putdup 70 /F putdup 77 /M putdup 84 /T putdup 101 /e putdup 103 /g putdup 104 /h putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 119 /w putdef/FontBBox {0 -184 780 704} defendsystemdict begindup /Private11 dict dup begin/|- {def} def/| {put} def/BlueValues [-16 1 473 485 666 675 692 713] def/OtherBlues [-174 -166] def/BlueScale 0.03963 def/StdHW [100] def/StdVW [50] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings22 dict dup begin/one <1C60D8A8C9B78E059E16AC930EAB501DC067BC00F95F3AE65CC58B87730A3D562B1C9118B4B4EBB2525B819207034C50189F5DC93C5A5D753475AFA6E6DAAAAB8C93DBF465> |-/colon <1C60D8A8C9B08A956D794C064F514FA5681968F8C446C30C95B82B5C8D3616AC450FE6325952EC9CC1DF76BEF3749F> |-/A <1C60D8A8C9B65648B5ACD1BDDC42508F46F51C93B5D527BA52983C0549DBEDFB695530703A4DE9F1DFA50F4974586BD816E9A8C68770AFA38C1626B371A66434B10243D8025EBB493DA4451F7DA9CF339ECEAC6B808F1BA2F6D6785B44EC91E09786662850AEDA54D2BB58E6C1055156D66CA88ADE19> |-/D <1C60D8A8C9B08A946DAB579E86747E2578595A7C01BA51F80E113BF0A452849250CDDF256AA17AF99CC4C64F608C5C04FDCC42D4B604929C47495334F6AE3F1201260188FC4F5E4A689B5467CF66742789377EEDCAC5378C8D62B9245DECDBA2A6E0C571DB9C145902497192DC96AAEB981D267B0F07B0657C8EBD867E9BA62783B5E093505E1A1D80686D87506CE454> |-/E <1C60D8A8C9B66482C7688AFFF81B2C667603E0429A6591DA97672EBB3B835F1F6C3118FD3BE26950B4ED1CE585DAC42D3C8CA3ACAD4ABB58550D> |-/F <1C60D8A8C9B08A95F4CC11876FC802075E2400245968549175DEA3A866F9C4D0855EAD03B1814E545621EC9CCF7A60E6DA760FFEC853184CEDE8> |-/M <1C60D8A8C9B08A9417A882075DCBA0A24B3288494C6FC76A07AF661122DB9E0117FE67049BEEC05A1AFA8B95CE0E21946BC0174E6555E01052A3865F34D48EAAF334718B522DA5A117D69A1716A0DADB72897564534309D0A38CDEFE9ECD74F45DE698F25D347C9A9A6658B786F82C4F29FC3E5CD69C7B178A573B9D7FFA21> |-/T <1C60D8A8C9B6086D7F57C280B8DFC28DAF8A7EC3264C1D0105AED84D6B0D1282E493EBD01EFAC41C80DDBD> |-/e <1C60D8A8C9B08A95AA8D60BEBBC2B46FA2247D391E942CB6BC99A1DB1B479B3427823B8F5AE220A87C33B1CF1DC7AD56BEAE754204F13B17A13DBD8ECA9AA03B2006A23211ECEA3695C064C1D98425CD1AA5D47750728DC2AB0912959F691AAB2F992825A29DD112046BB6CE4961D8FCD22CC00E3787F730EE4BEB3CD85AD863BB7353D3926FF329271695B6> |-/g <1C60D8A8C9B08A95D5A64892040202CF03C98656461F4203F198186F868B67D9B281984E13AE60AE171B1BA1758446AA37455598A70CEAB9DBD91CD3E594FCC61BBAAF53655FEB52E4FA7CEE3D38B9C23881D9D5E5BD210231F622EDB94A80C1BE9D3035159FE2879F02BD944FBE68D78698A27BC3A39D1A470D8E9A84631944410D88DFB98F300FC3F4016F61ED5C547D582B63693202CA45CE34082053B1> |-/h <1C60D8A8C9B08A95D5A64892040258AD3269E9E3375F69A24FE5055790776F2F73CC0EFBE2D2B5E96FE64C560CB7630EB492ADCE00985DB2D71B0DBBBEE03E9471A905D3AFA1EF10ECB8525F6B47188100B6D11A629B70D474196F364CDC1D1261300451E75DC34222> |-/i <1C60D8A8C9B88B3A9DE844B0266CCA9935CD07BB7F7CCEFE1A33649E101967F1ADF03A42ABE901E7CD65CE> |-/l <1C60D8A8C9B88B3A9DE844B0266CCA9935CD07BA08CFE1778AE956250677968C> |-/m <1C60D8A8C9B08A9475B07C5E64FAF69E1327F31C775C3DAFAB29EDF2F7C8CC204381CA1DCD6AE3D91E9E8E6AD42F05B18D889A3CBA4D90C8E441A5A36F7B6815940FCF3B9350BF785A2845FC568F7FABE38DA60AEB4A31AFAC84B1974C892F2435FAE69002EE7FD9411F775FB164A5BEA1F884F45F011B53BCB400BE3E0C745398FEBF3E56086461672C8DD1F5C9FF66575378D21AAFE62A0B75EFA6E43BB8CBC359558EFF29A71116E2170B8C41AFE414> |-/n <1C60D8A8C9B08A95D5A64892040258AD3269E9E3377A2CED9C7BAC1897708E48FF37CE64ED67286D0FD15D06D64ECC505F0FA27A0C2AC56EDD5C24A4C5150EB0024CB0596F8F63E68540725E6D2EC5F89B6393D9C3B8F6B190DEF62A20E8B8D49E9C94956C3B9DF8493E472751> |-/o <1C60D8A8C9B78E0596862BF693324459FA950D50D3F69AA0F6AB5A4F7F27AB7149C1E7D486E9F41583D01711E9A681EE131C2130DC0027290A3ABC41CABFB563223A8EDB91AEB8CAB740ED3F878BED19937E82658BBA77AC7EBEF72A7F420097EEF6F3AF0DBC5924BAE3D4C715E6FFD4FB690FFB64AC> |-/r <1C60D8A8C9B08A959BB8C070768DD6C7A2E539B2659B50DEDB4EA17C8197DA951D9F1373CDDA029A0573BC2378A2045BC6D942794C7CF993CF3049CF4269E26F65> |-/s <1C60D8A8C9B08A9513BCF4988675F078C93FA3DE09F41E05457415F6B43BC16170A214BB2C70D62C78397DF0AF060055E79EC3617008A6A57772AB65538F70C057FE69194FD7C16C66B0AAAF73A4163456808B5D2792C65C586634F71D2253A8E887FBE1F8C1649EC30C2E78BA603709E02BC298F7B7B15AF3C7368D6950D7C36CEABAEF3E9BE69AB80E3D054D13A0CC3948> |-/t <1C60D8A8C9B08A9588412A4C5EE26AD1734BAA50BB8C281CA2F5F0EF7BDE8BBFAC8A37C6E521C5827F738B9EFC9BCA821637B26594B87D11A30F8033301DF0E7D188AE414D10514E881C8FC83AC19895D46F3927AC6BA83E7ECE89F61C630B69B520359BE0604341D5B02C6FE38063E3E015> |-/u <1C60D8A8C9B08A95D5A6489204027D0BE274C900D7C03A0035A9CAAA1E8DCBB058F3FA264ED441F1E1257D39214F6DE5E5B5A4F471E0CCA1BCD4846AFA1D08C100F20C21C8253E6B319E3524201CE5A45A7AE5C67146FAAC6CE770CC6A32F98B9BB1D17E202DF6E9A85E33> |-/w <1C60D8A8C9B08A94409A310D584BBCE9A7F814742BD6C7D709ADD066B881736327BAEA841D2F46A0485DD7068D1F8876E8C84099CBB753A07FCEB418B0D4467B3AB1FA136E6A6F4E5A92FBEA83D6DFDFD12AB0591ABDBA20> |-/.notdef <1C60D8A8C9B08A9510679D7DA930DD> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/ZRVCLF+SFBMR10 /MCAQMX+SFBMR10 findfont ct_VMDictPut/ZRVCLF+SFBMR10*1 [49{/.notdef}rp /one 8{/.notdef}rp /colon 6{/.notdef}rp /A 2{/.notdef}rp /D /E /F 6{/.notdef}rp /M 6{/.notdef}rp /T 16{/.notdef}rp /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u /.notdef /w 136{/.notdef}rp]ZRVCLF+SFBMR10 nfZRVCLF+SFBMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf204.12 553.819 mo(Figure1:EMAlgorithminTwoDimensions)[6.4818 2.40007 5.64368 5.64369 3.72179 8.76349 5.75995 8.04375 6.83998 13.1963 7.32001 2.40009 5.64368 5.40009 3.7218 2.40005 4.07822 5.64368 12.7166 2.40009 9.36383 6.96024 7.2037 9.36011 8.16199 2.40005 8.75644 5.04367 5.64365 4.44543 2.40009 5.75995 5.64368 0 ]xshgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
true set_gvm
/ZRVCLB+*1 uf/ZRVCLB+ uf/ uf/ZRVCLC+SFBMR9*1 uf/ZRVCLC+SFBMR9 uf/BRUPMX+SFBMR9 uf/ZRVCLE+HFBR9*1 uf/ZRVCLE+HFBR9 uf/OIHRMX+HFBR9 uf/ZRVCLF+SFBMR10*1 uf/ZRVCLF+SFBMR10 uf/MCAQMX+SFBMR10 uf/ZRVCLD+HFBRMI9*1 uf/ZRVCLD+HFBRMI9 uf/NOGAAA+HFBRMI9 uf/ZRVCKZ+HFBRMI10*1 uf/ZRVCKZ+HFBRMI10 uf/GZFBAA+HFBRMI10 ufreset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
